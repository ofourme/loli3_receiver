C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE LOLI3_RECV_ISR_STC
OBJECT MODULE PLACED IN .\Objects\loli3_recv_isr_stc.obj
COMPILER INVOKED BY: C:\bin\Keil_v5\C51\BIN\C51.EXE ..\port\loli3_recv_isr_stc.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\port
                    -;..\src) DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PRINT(.\Listings\loli3_recv_isr_stc.lst) TABS(2) OBJECT(.\Objects\l
                    -oli3_recv_isr_stc.obj)

line level    source

   1          /*
   2          ********************************************************************************
   3          *                             ---ofme---
   4          *           Copyleft (c) 2021-2023, ÂæÆÈ£éÂ±±Ë∞∑ / ofourme@163.com
   5          *           License: LGPL
   6          *
   7          *   LOLI3_RECV_ISR_STC.C-V1.0.0 (2023.Oct.25th)
   8          *   Á°¨‰ª∂Âõ∫ÂÆöËøêË°åÈ¢ëÁéáÔºö12MHz
   9          *
  10          ********************************************************************************
  11          */
  12          
  13          #define __LOLI3_RECV_ISR_STC_C__
  14          
  15          /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  16          /******************************************************************************/
  17          
  18          #include "loli3_recv.h"
   1      =1  /*
   2      =1  ********************************************************************************
   3      =1  *                             ---ofme---
   4      =1  *           Copyleft (c) 2021-2023, ÂæÆÈ£éÂ±±Ë∞∑ / ofourme@163.com
   5      =1  *           License: LGPL
   6      =1  *
   7      =1  *   LOLI3_RECV.H-V1.0.0 (2023.Sep.25th)
   8      =1  *
   9      =1  ********************************************************************************
  10      =1  */
  11      =1  
  12      =1  #ifndef __LOLI3_RECV_H__
  13      =1  #define __LOLI3_RECV_H__
  14      =1  
  15      =1  /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  16      =1  /******************************************************************************/
  17      =1  
  18      =1  #include "hw.h"
   1      =2  /*
   2      =2  ********************************************************************************
   3      =2  *                             ---ofme---
   4      =2  *           Copyleft (c) 2021-2023, ÂæÆÈ£éÂ±±Ë∞∑ / ofourme@163.com
   5      =2  *           License: LGPL
   6      =2  *
   7      =2  *   HW.H-V1.0.0 (2023.Oct.25th)
   8      =2  *
   9      =2  ********************************************************************************
  10      =2  */
  11      =2  
  12      =2  #ifndef __HW_H__
  13      =2  #define __HW_H__
  14      =2  
  15      =2  /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  16      =2  /******************************************************************************/
  17      =2  
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 2   

  18      =2  #define STC_15W408AS    0
  19      =2  #define STC_15W408AS_SOP20  0
  20      =2  #define ARDUINO_ATMEAG328P  0
  21      =2  #define STC_8H        1
  22      =2  #define STC_8H_TSSOP20    1
  23      =2  
  24      =2  #define FOSC  12000000UL
  25      =2  
  26      =2  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  27      =2  
  28      =2  /*////////////////////////////////////////////////////////////////////////////*/
  29      =2  #if STC_15W408AS
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 
           =2 #include "stc15w.h"
           =2 #include<intrins.h>
           =2 
           =2 #define u8 unsigned char
           =2 #define u16 unsigned int
           =2 #define s16 signed int
           =2 #define u32 unsigned long
           =2 #define word_t u8
           =2 #define uint8_t u8
           =2 #define bool bit
           =2   
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 #elif STC_8H
  45      =2  /*////////////////////////////////////////////////////////////////////////////*/
  46      =2  
  47      =2  #include "STC8H.h"
   1      =3  #ifndef     __STC8H_H__
   2      =3  #define     __STC8H_H__
   3      =3  
   4      =3  /////////////////////////////////////////////////
   5      =3  
   6      =3  //∞¸∫¨±æÕ∑Œƒº˛∫Û,≤ª”√¡ÌÕ‚‘Ÿ∞¸∫¨"REG51.H"
   7      =3  
   8      =3  sfr         P0          =           0x80;
   9      =3  sbit        P00         =           P0^0;
  10      =3  sbit        P01         =           P0^1;
  11      =3  sbit        P02         =           P0^2;
  12      =3  sbit        P03         =           P0^3;
  13      =3  sbit        P04         =           P0^4;
  14      =3  sbit        P05         =           P0^5;
  15      =3  sbit        P06         =           P0^6;
  16      =3  sbit        P07         =           P0^7;
  17      =3  sfr         SP          =           0x81;
  18      =3  sfr         DPL         =           0x82;
  19      =3  sfr         DPH         =           0x83;
  20      =3  sfr         S4CON       =           0x84;
  21      =3  sfr         S4BUF       =           0x85;
  22      =3  sfr         PCON        =           0x87;
  23      =3  sfr         TCON        =           0x88;
  24      =3  sbit        TF1         =           TCON^7;
  25      =3  sbit        TR1         =           TCON^6;
  26      =3  sbit        TF0         =           TCON^5;
  27      =3  sbit        TR0         =           TCON^4;
  28      =3  sbit        IE1         =           TCON^3;
  29      =3  sbit        IT1         =           TCON^2;
  30      =3  sbit        IE0         =           TCON^1;
  31      =3  sbit        IT0         =           TCON^0;
  32      =3  sfr         TMOD        =           0x89;
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 3   

  33      =3  sfr         TL0         =           0x8a;
  34      =3  sfr         TL1         =           0x8b;
  35      =3  sfr         TH0         =           0x8c;
  36      =3  sfr         TH1         =           0x8d;
  37      =3  sfr         AUXR        =           0x8e;
  38      =3  sfr         INTCLKO     =           0x8f;
  39      =3  sfr         P1          =           0x90;
  40      =3  sbit        P10         =           P1^0;
  41      =3  sbit        P11         =           P1^1;
  42      =3  sbit        P12         =           P1^2;
  43      =3  sbit        P13         =           P1^3;
  44      =3  sbit        P14         =           P1^4;
  45      =3  sbit        P15         =           P1^5;
  46      =3  sbit        P16         =           P1^6;
  47      =3  sbit        P17         =           P1^7;
  48      =3  sfr         P1M1        =           0x91;
  49      =3  sfr         P1M0        =           0x92;
  50      =3  sfr         P0M1        =           0x93;
  51      =3  sfr         P0M0        =           0x94;
  52      =3  sfr         P2M1        =           0x95;
  53      =3  sfr         P2M0        =           0x96;
  54      =3  sfr         SCON        =           0x98;
  55      =3  sbit        SM0         =           SCON^7;
  56      =3  sbit        SM1         =           SCON^6;
  57      =3  sbit        SM2         =           SCON^5;
  58      =3  sbit        REN         =           SCON^4;
  59      =3  sbit        TB8         =           SCON^3;
  60      =3  sbit        RB8         =           SCON^2;
  61      =3  sbit        TI          =           SCON^1;
  62      =3  sbit        RI          =           SCON^0;
  63      =3  sfr         SBUF        =           0x99;
  64      =3  sfr         S2CON       =           0x9a;
  65      =3  sfr         S2BUF       =           0x9b;
  66      =3  sfr         IRCBAND     =           0x9d;
  67      =3  sfr         LIRTRIM     =           0x9e;
  68      =3  sfr         IRTRIM      =           0x9f;
  69      =3  sfr         P2          =           0xa0;
  70      =3  sbit        P20         =           P2^0;
  71      =3  sbit        P21         =           P2^1;
  72      =3  sbit        P22         =           P2^2;
  73      =3  sbit        P23         =           P2^3;
  74      =3  sbit        P24         =           P2^4;
  75      =3  sbit        P25         =           P2^5;
  76      =3  sbit        P26         =           P2^6;
  77      =3  sbit        P27         =           P2^7;
  78      =3  sfr         P_SW1       =           0xa2;
  79      =3  sfr         IE          =           0xa8;
  80      =3  sbit        EA          =           IE^7;
  81      =3  sbit        ELVD        =           IE^6;
  82      =3  sbit        EADC        =           IE^5;
  83      =3  sbit        ES          =           IE^4;
  84      =3  sbit        ET1         =           IE^3;
  85      =3  sbit        EX1         =           IE^2;
  86      =3  sbit        ET0         =           IE^1;
  87      =3  sbit        EX0         =           IE^0;
  88      =3  sfr         SADDR       =           0xa9;
  89      =3  sfr         WKTCL       =           0xaa;
  90      =3  sfr         WKTCH       =           0xab;
  91      =3  sfr         S3CON       =           0xac;
  92      =3  sfr         S3BUF       =           0xad;
  93      =3  sfr         TA          =           0xae;
  94      =3  sfr         IE2         =           0xaf;
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 4   

  95      =3  sfr         P3          =           0xb0;
  96      =3  sbit        P30         =           P3^0;
  97      =3  sbit        P31         =           P3^1;
  98      =3  sbit        P32         =           P3^2;
  99      =3  sbit        P33         =           P3^3;
 100      =3  sbit        P34         =           P3^4;
 101      =3  sbit        P35         =           P3^5;
 102      =3  sbit        P36         =           P3^6;
 103      =3  sbit        P37         =           P3^7;
 104      =3  sfr         P3M1        =           0xb1;
 105      =3  sfr         P3M0        =           0xb2;
 106      =3  sfr         P4M1        =           0xb3;
 107      =3  sfr         P4M0        =           0xb4;
 108      =3  sfr         IP2         =           0xb5;
 109      =3  sfr         IP2H        =           0xb6;
 110      =3  sfr         IPH         =           0xb7;
 111      =3  sfr         IP          =           0xb8;
 112      =3  sbit        PPCA        =           IP^7;
 113      =3  sbit        PLVD        =           IP^6;
 114      =3  sbit        PADC        =           IP^5;
 115      =3  sbit        PS          =           IP^4;
 116      =3  sbit        PT1         =           IP^3;
 117      =3  sbit        PX1         =           IP^2;
 118      =3  sbit        PT0         =           IP^1;
 119      =3  sbit        PX0         =           IP^0;
 120      =3  sfr         SADEN       =           0xb9;
 121      =3  sfr         P_SW2       =           0xba;
 122      =3  sfr         ADC_CONTR   =           0xbc;
 123      =3  sfr         ADC_RES     =           0xbd;
 124      =3  sfr         ADC_RESL    =           0xbe;
 125      =3  sfr         P4          =           0xc0;
 126      =3  sbit        P40         =           P4^0;
 127      =3  sbit        P41         =           P4^1;
 128      =3  sbit        P42         =           P4^2;
 129      =3  sbit        P43         =           P4^3;
 130      =3  sbit        P44         =           P4^4;
 131      =3  sbit        P45         =           P4^5;
 132      =3  sbit        P46         =           P4^6;
 133      =3  sbit        P47         =           P4^7;
 134      =3  sfr         WDT_CONTR   =           0xc1;
 135      =3  sfr         IAP_DATA    =           0xc2;
 136      =3  sfr         IAP_ADDRH   =           0xc3;
 137      =3  sfr         IAP_ADDRL   =           0xc4;
 138      =3  sfr         IAP_CMD     =           0xc5;
 139      =3  sfr         IAP_TRIG    =           0xc6;
 140      =3  sfr         IAP_CONTR   =           0xc7;
 141      =3  sfr         P5          =           0xc8;
 142      =3  sbit        P50         =           P5^0;
 143      =3  sbit        P51         =           P5^1;
 144      =3  sbit        P52         =           P5^2;
 145      =3  sbit        P53         =           P5^3;
 146      =3  sbit        P54         =           P5^4;
 147      =3  sbit        P55         =           P5^5;
 148      =3  sbit        P56         =           P5^6;
 149      =3  sbit        P57         =           P5^7;
 150      =3  sfr         P5M1        =           0xc9;
 151      =3  sfr         P5M0        =           0xca;
 152      =3  sfr         P6M1        =           0xcb;
 153      =3  sfr         P6M0        =           0xcc;
 154      =3  sfr         SPSTAT      =           0xcd;
 155      =3  sfr         SPCTL       =           0xce;
 156      =3  sfr         SPDAT       =           0xcf;
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 5   

 157      =3  sfr         PSW         =           0xd0;
 158      =3  sbit        CY          =           PSW^7;
 159      =3  sbit        AC          =           PSW^6;
 160      =3  sbit        F0          =           PSW^5;
 161      =3  sbit        RS1         =           PSW^4;
 162      =3  sbit        RS0         =           PSW^3;
 163      =3  sbit        OV          =           PSW^2;
 164      =3  sbit        F1          =           PSW^1;
 165      =3  sbit        P           =           PSW^0;
 166      =3  sfr         T4T3M       =           0xd1;
 167      =3  sfr         T4H         =           0xd2;
 168      =3  sfr         T4L         =           0xd3;
 169      =3  sfr         T3H         =           0xd4;
 170      =3  sfr         T3L         =           0xd5;
 171      =3  sfr         T2H         =           0xd6;
 172      =3  sfr         T2L         =           0xd7;
 173      =3  sfr         USBCLK      =           0xdc;
 174      =3  sfr         ADCCFG      =           0xde;
 175      =3  sfr         IP3         =           0xdf;
 176      =3  sfr         ACC         =           0xe0;
 177      =3  sfr         P7M1        =           0xe1;
 178      =3  sfr         P7M0        =           0xe2;
 179      =3  sfr         DPS         =           0xe3;
 180      =3  sfr         DPL1        =           0xe4;
 181      =3  sfr         DPH1        =           0xe5;
 182      =3  sfr         CMPCR1      =           0xe6;
 183      =3  sfr         CMPCR2      =           0xe7;
 184      =3  sfr         P6          =           0xe8;
 185      =3  sbit        P60         =           P6^0;
 186      =3  sbit        P61         =           P6^1;
 187      =3  sbit        P62         =           P6^2;
 188      =3  sbit        P63         =           P6^3;
 189      =3  sbit        P64         =           P6^4;
 190      =3  sbit        P65         =           P6^5;
 191      =3  sbit        P66         =           P6^6;
 192      =3  sbit        P67         =           P6^7;
 193      =3  sfr         USBDAT      =           0xec;
 194      =3  sfr         IP3H        =           0xee;
 195      =3  sfr         AUXINTIF    =           0xef;
 196      =3  sfr         B           =           0xf0;
 197      =3  sfr         USBCON      =           0xf4;
 198      =3  sfr         IAP_TPS     =           0xf5;
 199      =3  sfr         P7          =           0xf8;
 200      =3  sbit        P70         =           P7^0;
 201      =3  sbit        P71         =           P7^1;
 202      =3  sbit        P72         =           P7^2;
 203      =3  sbit        P73         =           P7^3;
 204      =3  sbit        P74         =           P7^4;
 205      =3  sbit        P75         =           P7^5;
 206      =3  sbit        P76         =           P7^6;
 207      =3  sbit        P77         =           P7^7;
 208      =3  sfr         USBADR      =           0xfc;
 209      =3  sfr         RSTCFG      =           0xff;
 210      =3  
 211      =3  //»Áœ¬Ãÿ ‚π¶ƒ‹ºƒ¥Ê∆˜Œª”⁄¿©’πRAM«¯”Ú
 212      =3  //∑√Œ ’‚–©ºƒ¥Ê∆˜,–Ëœ»Ω´P_SW2µƒBIT7…Ë÷√Œ™1,≤≈ø…’˝≥£∂¡–¥
 213      =3  
 214      =3  /////////////////////////////////////////////////
 215      =3  //FF00H-FFFFH
 216      =3  /////////////////////////////////////////////////
 217      =3  
 218      =3  
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 6   

 219      =3  
 220      =3  /////////////////////////////////////////////////
 221      =3  //FE00H-FEFFH
 222      =3  /////////////////////////////////////////////////
 223      =3  
 224      =3  #define     CLKSEL                  (*(unsigned char volatile xdata *)0xfe00)
 225      =3  #define     CLKDIV                  (*(unsigned char volatile xdata *)0xfe01)
 226      =3  #define     HIRCCR                  (*(unsigned char volatile xdata *)0xfe02)
 227      =3  #define     XOSCCR                  (*(unsigned char volatile xdata *)0xfe03)
 228      =3  #define     IRC32KCR                (*(unsigned char volatile xdata *)0xfe04)
 229      =3  #define     MCLKOCR                 (*(unsigned char volatile xdata *)0xfe05)
 230      =3  #define     IRCDB                   (*(unsigned char volatile xdata *)0xfe06)
 231      =3  #define     X32KCR                  (*(unsigned char volatile xdata *)0xfe08)
 232      =3  
 233      =3  #define     P0PU                    (*(unsigned char volatile xdata *)0xfe10)
 234      =3  #define     P1PU                    (*(unsigned char volatile xdata *)0xfe11)
 235      =3  #define     P2PU                    (*(unsigned char volatile xdata *)0xfe12)
 236      =3  #define     P3PU                    (*(unsigned char volatile xdata *)0xfe13)
 237      =3  #define     P4PU                    (*(unsigned char volatile xdata *)0xfe14)
 238      =3  #define     P5PU                    (*(unsigned char volatile xdata *)0xfe15)
 239      =3  #define     P6PU                    (*(unsigned char volatile xdata *)0xfe16)
 240      =3  #define     P7PU                    (*(unsigned char volatile xdata *)0xfe17)
 241      =3  #define     P0NCS                   (*(unsigned char volatile xdata *)0xfe18)
 242      =3  #define     P1NCS                   (*(unsigned char volatile xdata *)0xfe19)
 243      =3  #define     P2NCS                   (*(unsigned char volatile xdata *)0xfe1a)
 244      =3  #define     P3NCS                   (*(unsigned char volatile xdata *)0xfe1b)
 245      =3  #define     P4NCS                   (*(unsigned char volatile xdata *)0xfe1c)
 246      =3  #define     P5NCS                   (*(unsigned char volatile xdata *)0xfe1d)
 247      =3  #define     P6NCS                   (*(unsigned char volatile xdata *)0xfe1e)
 248      =3  #define     P7NCS                   (*(unsigned char volatile xdata *)0xfe1f)
 249      =3  #define     P0SR                    (*(unsigned char volatile xdata *)0xfe20)
 250      =3  #define     P1SR                    (*(unsigned char volatile xdata *)0xfe21)
 251      =3  #define     P2SR                    (*(unsigned char volatile xdata *)0xfe22)
 252      =3  #define     P3SR                    (*(unsigned char volatile xdata *)0xfe23)
 253      =3  #define     P4SR                    (*(unsigned char volatile xdata *)0xfe24)
 254      =3  #define     P5SR                    (*(unsigned char volatile xdata *)0xfe25)
 255      =3  #define     P6SR                    (*(unsigned char volatile xdata *)0xfe26)
 256      =3  #define     P7SR                    (*(unsigned char volatile xdata *)0xfe27)
 257      =3  #define     P0DR                    (*(unsigned char volatile xdata *)0xfe28)
 258      =3  #define     P1DR                    (*(unsigned char volatile xdata *)0xfe29)
 259      =3  #define     P2DR                    (*(unsigned char volatile xdata *)0xfe2a)
 260      =3  #define     P3DR                    (*(unsigned char volatile xdata *)0xfe2b)
 261      =3  #define     P4DR                    (*(unsigned char volatile xdata *)0xfe2c)
 262      =3  #define     P5DR                    (*(unsigned char volatile xdata *)0xfe2d)
 263      =3  #define     P6DR                    (*(unsigned char volatile xdata *)0xfe2e)
 264      =3  #define     P7DR                    (*(unsigned char volatile xdata *)0xfe2f)
 265      =3  #define     P0IE                    (*(unsigned char volatile xdata *)0xfe30)
 266      =3  #define     P1IE                    (*(unsigned char volatile xdata *)0xfe31)
 267      =3  #define     P2IE                    (*(unsigned char volatile xdata *)0xfe32)
 268      =3  #define     P3IE                    (*(unsigned char volatile xdata *)0xfe33)
 269      =3  #define     P4IE                    (*(unsigned char volatile xdata *)0xfe34)
 270      =3  #define     P5IE                    (*(unsigned char volatile xdata *)0xfe35)
 271      =3  #define     P6IE                    (*(unsigned char volatile xdata *)0xfe36)
 272      =3  #define     P7IE                    (*(unsigned char volatile xdata *)0xfe37)
 273      =3  
 274      =3  #define     LCMIFCFG                (*(unsigned char volatile xdata *)0xfe50)
 275      =3  #define     LCMIFCFG2               (*(unsigned char volatile xdata *)0xfe51)
 276      =3  #define     LCMIFCR                 (*(unsigned char volatile xdata *)0xfe52)
 277      =3  #define     LCMIFSTA                (*(unsigned char volatile xdata *)0xfe53)
 278      =3  #define     LCMIFDATL               (*(unsigned char volatile xdata *)0xfe54)
 279      =3  #define     LCMIFDATH               (*(unsigned char volatile xdata *)0xfe55)
 280      =3  
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 7   

 281      =3  #define     RTCCR                   (*(unsigned char volatile xdata *)0xfe60)
 282      =3  #define     RTCCFG                  (*(unsigned char volatile xdata *)0xfe61)
 283      =3  #define     RTCIEN                  (*(unsigned char volatile xdata *)0xfe62)
 284      =3  #define     RTCIF                   (*(unsigned char volatile xdata *)0xfe63)
 285      =3  #define     ALAHOUR                 (*(unsigned char volatile xdata *)0xfe64)
 286      =3  #define     ALAMIN                  (*(unsigned char volatile xdata *)0xfe65)
 287      =3  #define     ALASEC                  (*(unsigned char volatile xdata *)0xfe66)
 288      =3  #define     ALASSEC                 (*(unsigned char volatile xdata *)0xfe67)
 289      =3  #define     INIYEAR                 (*(unsigned char volatile xdata *)0xfe68)
 290      =3  #define     INIMONTH                (*(unsigned char volatile xdata *)0xfe69)
 291      =3  #define     INIDAY                  (*(unsigned char volatile xdata *)0xfe6a)
 292      =3  #define     INIHOUR                 (*(unsigned char volatile xdata *)0xfe6b)
 293      =3  #define     INIMIN                  (*(unsigned char volatile xdata *)0xfe6c)
 294      =3  #define     INISEC                  (*(unsigned char volatile xdata *)0xfe6d)
 295      =3  #define     INISSEC                 (*(unsigned char volatile xdata *)0xfe6e)
 296      =3  #define     YEAR                    (*(unsigned char volatile xdata *)0xfe70)
 297      =3  #define     MONTH                   (*(unsigned char volatile xdata *)0xfe71)
 298      =3  #define     DAY                     (*(unsigned char volatile xdata *)0xfe72)
 299      =3  #define     HOUR                    (*(unsigned char volatile xdata *)0xfe73)
 300      =3  #define     MIN                     (*(unsigned char volatile xdata *)0xfe74)
 301      =3  #define     SEC                     (*(unsigned char volatile xdata *)0xfe75)
 302      =3  #define     SSEC                    (*(unsigned char volatile xdata *)0xfe76)
 303      =3  
 304      =3  #define     I2CCFG                  (*(unsigned char volatile xdata *)0xfe80)
 305      =3  #define     I2CMSCR                 (*(unsigned char volatile xdata *)0xfe81)
 306      =3  #define     I2CMSST                 (*(unsigned char volatile xdata *)0xfe82)
 307      =3  #define     I2CSLCR                 (*(unsigned char volatile xdata *)0xfe83)
 308      =3  #define     I2CSLST                 (*(unsigned char volatile xdata *)0xfe84)
 309      =3  #define     I2CSLADR                (*(unsigned char volatile xdata *)0xfe85)
 310      =3  #define     I2CTXD                  (*(unsigned char volatile xdata *)0xfe86)
 311      =3  #define     I2CRXD                  (*(unsigned char volatile xdata *)0xfe87)
 312      =3  #define     I2CMSAUX                (*(unsigned char volatile xdata *)0xfe88)
 313      =3  
 314      =3  #define     TM2PS                   (*(unsigned char volatile xdata *)0xfea2)
 315      =3  #define     TM3PS                   (*(unsigned char volatile xdata *)0xfea3)
 316      =3  #define     TM4PS                   (*(unsigned char volatile xdata *)0xfea4)
 317      =3  #define     ADCTIM                  (*(unsigned char volatile xdata *)0xfea8)
 318      =3  #define     T3T4PIN                 (*(unsigned char volatile xdata *)0xfeac)
 319      =3  #define     ADCEXCFG                (*(unsigned char volatile xdata *)0xfead)
 320      =3  #define     CMPEXCFG                (*(unsigned char volatile xdata *)0xfeae)
 321      =3  
 322      =3  #define     PWM1_ETRPS              (*(unsigned char volatile xdata *)0xfeb0)
 323      =3  #define     PWM1_ENO                (*(unsigned char volatile xdata *)0xfeb1)
 324      =3  #define     PWM1_PS                 (*(unsigned char volatile xdata *)0xfeb2)
 325      =3  #define     PWM1_IOAUX              (*(unsigned char volatile xdata *)0xfeb3)
 326      =3  #define     PWM2_ETRPS              (*(unsigned char volatile xdata *)0xfeb4)
 327      =3  #define     PWM2_ENO                (*(unsigned char volatile xdata *)0xfeb5)
 328      =3  #define     PWM2_PS                 (*(unsigned char volatile xdata *)0xfeb6)
 329      =3  #define     PWM2_IOAUX              (*(unsigned char volatile xdata *)0xfeb7)
 330      =3  #define     PWM1_CR1                (*(unsigned char volatile xdata *)0xfec0)
 331      =3  #define     PWM1_CR2                (*(unsigned char volatile xdata *)0xfec1)
 332      =3  #define     PWM1_SMCR               (*(unsigned char volatile xdata *)0xfec2)
 333      =3  #define     PWM1_ETR                (*(unsigned char volatile xdata *)0xfec3)
 334      =3  #define     PWM1_IER                (*(unsigned char volatile xdata *)0xfec4)
 335      =3  #define     PWM1_SR1                (*(unsigned char volatile xdata *)0xfec5)
 336      =3  #define     PWM1_SR2                (*(unsigned char volatile xdata *)0xfec6)
 337      =3  #define     PWM1_EGR                (*(unsigned char volatile xdata *)0xfec7)
 338      =3  #define     PWM1_CCMR1              (*(unsigned char volatile xdata *)0xfec8)
 339      =3  #define     PWM1_CCMR2              (*(unsigned char volatile xdata *)0xfec9)
 340      =3  #define     PWM1_CCMR3              (*(unsigned char volatile xdata *)0xfeca)
 341      =3  #define     PWM1_CCMR4              (*(unsigned char volatile xdata *)0xfecb)
 342      =3  #define     PWM1_CCER1              (*(unsigned char volatile xdata *)0xfecc)
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 8   

 343      =3  #define     PWM1_CCER2              (*(unsigned char volatile xdata *)0xfecd)
 344      =3  #define     PWM1_CNTR               (*(unsigned  int volatile xdata *)0xfece)
 345      =3  #define     PWM1_CNTRH              (*(unsigned char volatile xdata *)0xfece)
 346      =3  #define     PWM1_CNTRL              (*(unsigned char volatile xdata *)0xfecf)
 347      =3  #define     PWM1_PSCR               (*(unsigned  int volatile xdata *)0xfed0)
 348      =3  #define     PWM1_PSCRH              (*(unsigned char volatile xdata *)0xfed0)
 349      =3  #define     PWM1_PSCRL              (*(unsigned char volatile xdata *)0xfed1)
 350      =3  #define     PWM1_ARR                (*(unsigned  int volatile xdata *)0xfed2)
 351      =3  #define     PWM1_ARRH               (*(unsigned char volatile xdata *)0xfed2)
 352      =3  #define     PWM1_ARRL               (*(unsigned char volatile xdata *)0xfed3)
 353      =3  #define     PWM1_RCR                (*(unsigned char volatile xdata *)0xfed4)
 354      =3  #define     PWM1_CCR1               (*(unsigned  int volatile xdata *)0xfed5)
 355      =3  #define     PWM1_CCR1H              (*(unsigned char volatile xdata *)0xfed5)
 356      =3  #define     PWM1_CCR1L              (*(unsigned char volatile xdata *)0xfed6)
 357      =3  #define     PWM1_CCR2               (*(unsigned  int volatile xdata *)0xfed7)
 358      =3  #define     PWM1_CCR2H              (*(unsigned char volatile xdata *)0xfed7)
 359      =3  #define     PWM1_CCR2L              (*(unsigned char volatile xdata *)0xfed8)
 360      =3  #define     PWM1_CCR3               (*(unsigned  int volatile xdata *)0xfed9)
 361      =3  #define     PWM1_CCR3H              (*(unsigned char volatile xdata *)0xfed9)
 362      =3  #define     PWM1_CCR3L              (*(unsigned char volatile xdata *)0xfeda)
 363      =3  #define     PWM1_CCR4               (*(unsigned  int volatile xdata *)0xfedb)
 364      =3  #define     PWM1_CCR4H              (*(unsigned char volatile xdata *)0xfedb)
 365      =3  #define     PWM1_CCR4L              (*(unsigned char volatile xdata *)0xfedc)
 366      =3  #define     PWM1_BKR                (*(unsigned char volatile xdata *)0xfedd)
 367      =3  #define     PWM1_DTR                (*(unsigned char volatile xdata *)0xfede)
 368      =3  #define     PWM1_OISR               (*(unsigned char volatile xdata *)0xfedf)
 369      =3  #define     PWM2_CR1                (*(unsigned char volatile xdata *)0xfee0)
 370      =3  #define     PWM2_CR2                (*(unsigned char volatile xdata *)0xfee1)
 371      =3  #define     PWM2_SMCR               (*(unsigned char volatile xdata *)0xfee2)
 372      =3  #define     PWM2_ETR                (*(unsigned char volatile xdata *)0xfee3)
 373      =3  #define     PWM2_IER                (*(unsigned char volatile xdata *)0xfee4)
 374      =3  #define     PWM2_SR1                (*(unsigned char volatile xdata *)0xfee5)
 375      =3  #define     PWM2_SR2                (*(unsigned char volatile xdata *)0xfee6)
 376      =3  #define     PWM2_EGR                (*(unsigned char volatile xdata *)0xfee7)
 377      =3  #define     PWM2_CCMR1              (*(unsigned char volatile xdata *)0xfee8)
 378      =3  #define     PWM2_CCMR2              (*(unsigned char volatile xdata *)0xfee9)
 379      =3  #define     PWM2_CCMR3              (*(unsigned char volatile xdata *)0xfeea)
 380      =3  #define     PWM2_CCMR4              (*(unsigned char volatile xdata *)0xfeeb)
 381      =3  #define     PWM2_CCER1              (*(unsigned char volatile xdata *)0xfeec)
 382      =3  #define     PWM2_CCER2              (*(unsigned char volatile xdata *)0xfeed)
 383      =3  #define     PWM2_CNTR               (*(unsigned  int volatile xdata *)0xfeee)
 384      =3  #define     PWM2_CNTRH              (*(unsigned char volatile xdata *)0xfeee)
 385      =3  #define     PWM2_CNTRL              (*(unsigned char volatile xdata *)0xfeef)
 386      =3  #define     PWM2_PSCR               (*(unsigned  int volatile xdata *)0xfef0)
 387      =3  #define     PWM2_PSCRH              (*(unsigned char volatile xdata *)0xfef0)
 388      =3  #define     PWM2_PSCRL              (*(unsigned char volatile xdata *)0xfef1)
 389      =3  #define     PWM2_ARR                (*(unsigned  int volatile xdata *)0xfef2)
 390      =3  #define     PWM2_ARRH               (*(unsigned char volatile xdata *)0xfef2)
 391      =3  #define     PWM2_ARRL               (*(unsigned char volatile xdata *)0xfef3)
 392      =3  #define     PWM2_RCR                (*(unsigned char volatile xdata *)0xfef4)
 393      =3  #define     PWM2_CCR1               (*(unsigned  int volatile xdata *)0xfef5)
 394      =3  #define     PWM2_CCR1H              (*(unsigned char volatile xdata *)0xfef5)
 395      =3  #define     PWM2_CCR1L              (*(unsigned char volatile xdata *)0xfef6)
 396      =3  #define     PWM2_CCR2               (*(unsigned  int volatile xdata *)0xfef7)
 397      =3  #define     PWM2_CCR2H              (*(unsigned char volatile xdata *)0xfef7)
 398      =3  #define     PWM2_CCR2L              (*(unsigned char volatile xdata *)0xfef8)
 399      =3  #define     PWM2_CCR3               (*(unsigned  int volatile xdata *)0xfef9)
 400      =3  #define     PWM2_CCR3H              (*(unsigned char volatile xdata *)0xfef9)
 401      =3  #define     PWM2_CCR3L              (*(unsigned char volatile xdata *)0xfefa)
 402      =3  #define     PWM2_CCR4               (*(unsigned  int volatile xdata *)0xfefb)
 403      =3  #define     PWM2_CCR4H              (*(unsigned char volatile xdata *)0xfefb)
 404      =3  #define     PWM2_CCR4L              (*(unsigned char volatile xdata *)0xfefc)
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 9   

 405      =3  #define     PWM2_BKR                (*(unsigned char volatile xdata *)0xfefd)
 406      =3  #define     PWM2_DTR                (*(unsigned char volatile xdata *)0xfefe)
 407      =3  #define     PWM2_OISR               (*(unsigned char volatile xdata *)0xfeff)
 408      =3  
 409      =3  #define     PWMA_ETRPS              (*(unsigned char volatile xdata *)0xfeb0)
 410      =3  #define     PWMA_ENO                (*(unsigned char volatile xdata *)0xfeb1)
 411      =3  #define     PWMA_PS                 (*(unsigned char volatile xdata *)0xfeb2)
 412      =3  #define     PWMA_IOAUX              (*(unsigned char volatile xdata *)0xfeb3)
 413      =3  #define     PWMB_ETRPS              (*(unsigned char volatile xdata *)0xfeb4)
 414      =3  #define     PWMB_ENO                (*(unsigned char volatile xdata *)0xfeb5)
 415      =3  #define     PWMB_PS                 (*(unsigned char volatile xdata *)0xfeb6)
 416      =3  #define     PWMB_IOAUX              (*(unsigned char volatile xdata *)0xfeb7)
 417      =3  #define     PWMA_CR1                (*(unsigned char volatile xdata *)0xfec0)
 418      =3  #define     PWMA_CR2                (*(unsigned char volatile xdata *)0xfec1)
 419      =3  #define     PWMA_SMCR               (*(unsigned char volatile xdata *)0xfec2)
 420      =3  #define     PWMA_ETR                (*(unsigned char volatile xdata *)0xfec3)
 421      =3  #define     PWMA_IER                (*(unsigned char volatile xdata *)0xfec4)
 422      =3  #define     PWMA_SR1                (*(unsigned char volatile xdata *)0xfec5)
 423      =3  #define     PWMA_SR2                (*(unsigned char volatile xdata *)0xfec6)
 424      =3  #define     PWMA_EGR                (*(unsigned char volatile xdata *)0xfec7)
 425      =3  #define     PWMA_CCMR1              (*(unsigned char volatile xdata *)0xfec8)
 426      =3  #define     PWMA_CCMR2              (*(unsigned char volatile xdata *)0xfec9)
 427      =3  #define     PWMA_CCMR3              (*(unsigned char volatile xdata *)0xfeca)
 428      =3  #define     PWMA_CCMR4              (*(unsigned char volatile xdata *)0xfecb)
 429      =3  #define     PWMA_CCER1              (*(unsigned char volatile xdata *)0xfecc)
 430      =3  #define     PWMA_CCER2              (*(unsigned char volatile xdata *)0xfecd)
 431      =3  #define     PWMA_CNTR               (*(unsigned  int volatile xdata *)0xfece)
 432      =3  #define     PWMA_CNTRH              (*(unsigned char volatile xdata *)0xfece)
 433      =3  #define     PWMA_CNTRL              (*(unsigned char volatile xdata *)0xfecf)
 434      =3  #define     PWMA_PSCR               (*(unsigned  int volatile xdata *)0xfed0)
 435      =3  #define     PWMA_PSCRH              (*(unsigned char volatile xdata *)0xfed0)
 436      =3  #define     PWMA_PSCRL              (*(unsigned char volatile xdata *)0xfed1)
 437      =3  #define     PWMA_ARR                (*(unsigned  int volatile xdata *)0xfed2)
 438      =3  #define     PWMA_ARRH               (*(unsigned char volatile xdata *)0xfed2)
 439      =3  #define     PWMA_ARRL               (*(unsigned char volatile xdata *)0xfed3)
 440      =3  #define     PWMA_RCR                (*(unsigned char volatile xdata *)0xfed4)
 441      =3  #define     PWMA_CCR1               (*(unsigned  int volatile xdata *)0xfed5)
 442      =3  #define     PWMA_CCR1H              (*(unsigned char volatile xdata *)0xfed5)
 443      =3  #define     PWMA_CCR1L              (*(unsigned char volatile xdata *)0xfed6)
 444      =3  #define     PWMA_CCR2               (*(unsigned  int volatile xdata *)0xfed7)
 445      =3  #define     PWMA_CCR2H              (*(unsigned char volatile xdata *)0xfed7)
 446      =3  #define     PWMA_CCR2L              (*(unsigned char volatile xdata *)0xfed8)
 447      =3  #define     PWMA_CCR3               (*(unsigned  int volatile xdata *)0xfed9)
 448      =3  #define     PWMA_CCR3H              (*(unsigned char volatile xdata *)0xfed9)
 449      =3  #define     PWMA_CCR3L              (*(unsigned char volatile xdata *)0xfeda)
 450      =3  #define     PWMA_CCR4               (*(unsigned  int volatile xdata *)0xfedb)
 451      =3  #define     PWMA_CCR4H              (*(unsigned char volatile xdata *)0xfedb)
 452      =3  #define     PWMA_CCR4L              (*(unsigned char volatile xdata *)0xfedc)
 453      =3  #define     PWMA_BKR                (*(unsigned char volatile xdata *)0xfedd)
 454      =3  #define     PWMA_DTR                (*(unsigned char volatile xdata *)0xfede)
 455      =3  #define     PWMA_OISR               (*(unsigned char volatile xdata *)0xfedf)
 456      =3  #define     PWMB_CR1                (*(unsigned char volatile xdata *)0xfee0)
 457      =3  #define     PWMB_CR2                (*(unsigned char volatile xdata *)0xfee1)
 458      =3  #define     PWMB_SMCR               (*(unsigned char volatile xdata *)0xfee2)
 459      =3  #define     PWMB_ETR                (*(unsigned char volatile xdata *)0xfee3)
 460      =3  #define     PWMB_IER                (*(unsigned char volatile xdata *)0xfee4)
 461      =3  #define     PWMB_SR1                (*(unsigned char volatile xdata *)0xfee5)
 462      =3  #define     PWMB_SR2                (*(unsigned char volatile xdata *)0xfee6)
 463      =3  #define     PWMB_EGR                (*(unsigned char volatile xdata *)0xfee7)
 464      =3  #define     PWMB_CCMR1              (*(unsigned char volatile xdata *)0xfee8)
 465      =3  #define     PWMB_CCMR2              (*(unsigned char volatile xdata *)0xfee9)
 466      =3  #define     PWMB_CCMR3              (*(unsigned char volatile xdata *)0xfeea)
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 10  

 467      =3  #define     PWMB_CCMR4              (*(unsigned char volatile xdata *)0xfeeb)
 468      =3  #define     PWMB_CCER1              (*(unsigned char volatile xdata *)0xfeec)
 469      =3  #define     PWMB_CCER2              (*(unsigned char volatile xdata *)0xfeed)
 470      =3  #define     PWMB_CNTR               (*(unsigned  int volatile xdata *)0xfeee)
 471      =3  #define     PWMB_CNTRH              (*(unsigned char volatile xdata *)0xfeee)
 472      =3  #define     PWMB_CNTRL              (*(unsigned char volatile xdata *)0xfeef)
 473      =3  #define     PWMB_PSCR               (*(unsigned  int volatile xdata *)0xfef0)
 474      =3  #define     PWMB_PSCRH              (*(unsigned char volatile xdata *)0xfef0)
 475      =3  #define     PWMB_PSCRL              (*(unsigned char volatile xdata *)0xfef1)
 476      =3  #define     PWMB_ARR                (*(unsigned  int volatile xdata *)0xfef2)
 477      =3  #define     PWMB_ARRH               (*(unsigned char volatile xdata *)0xfef2)
 478      =3  #define     PWMB_ARRL               (*(unsigned char volatile xdata *)0xfef3)
 479      =3  #define     PWMB_RCR                (*(unsigned char volatile xdata *)0xfef4)
 480      =3  #define     PWMB_CCR5               (*(unsigned  int volatile xdata *)0xfef5)
 481      =3  #define     PWMB_CCR5H              (*(unsigned char volatile xdata *)0xfef5)
 482      =3  #define     PWMB_CCR5L              (*(unsigned char volatile xdata *)0xfef6)
 483      =3  #define     PWMB_CCR6               (*(unsigned  int volatile xdata *)0xfef7)
 484      =3  #define     PWMB_CCR6H              (*(unsigned char volatile xdata *)0xfef7)
 485      =3  #define     PWMB_CCR6L              (*(unsigned char volatile xdata *)0xfef8)
 486      =3  #define     PWMB_CCR7               (*(unsigned  int volatile xdata *)0xfef9)
 487      =3  #define     PWMB_CCR7H              (*(unsigned char volatile xdata *)0xfef9)
 488      =3  #define     PWMB_CCR7L              (*(unsigned char volatile xdata *)0xfefa)
 489      =3  #define     PWMB_CCR8               (*(unsigned  int volatile xdata *)0xfefb)
 490      =3  #define     PWMB_CCR8H              (*(unsigned char volatile xdata *)0xfefb)
 491      =3  #define     PWMB_CCR8L              (*(unsigned char volatile xdata *)0xfefc)
 492      =3  #define     PWMB_BKR                (*(unsigned char volatile xdata *)0xfefd)
 493      =3  #define     PWMB_DTR                (*(unsigned char volatile xdata *)0xfefe)
 494      =3  #define     PWMB_OISR               (*(unsigned char volatile xdata *)0xfeff)
 495      =3  
 496      =3  /////////////////////////////////////////////////
 497      =3  //FD00H-FDFFH
 498      =3  /////////////////////////////////////////////////
 499      =3  
 500      =3  #define     P0INTE                  (*(unsigned char volatile xdata *)0xfd00)
 501      =3  #define     P1INTE                  (*(unsigned char volatile xdata *)0xfd01)
 502      =3  #define     P2INTE                  (*(unsigned char volatile xdata *)0xfd02)
 503      =3  #define     P3INTE                  (*(unsigned char volatile xdata *)0xfd03)
 504      =3  #define     P4INTE                  (*(unsigned char volatile xdata *)0xfd04)
 505      =3  #define     P5INTE                  (*(unsigned char volatile xdata *)0xfd05)
 506      =3  #define     P6INTE                  (*(unsigned char volatile xdata *)0xfd06)
 507      =3  #define     P7INTE                  (*(unsigned char volatile xdata *)0xfd07)
 508      =3  #define     P0INTF                  (*(unsigned char volatile xdata *)0xfd10)
 509      =3  #define     P1INTF                  (*(unsigned char volatile xdata *)0xfd11)
 510      =3  #define     P2INTF                  (*(unsigned char volatile xdata *)0xfd12)
 511      =3  #define     P3INTF                  (*(unsigned char volatile xdata *)0xfd13)
 512      =3  #define     P4INTF                  (*(unsigned char volatile xdata *)0xfd14)
 513      =3  #define     P5INTF                  (*(unsigned char volatile xdata *)0xfd15)
 514      =3  #define     P6INTF                  (*(unsigned char volatile xdata *)0xfd16)
 515      =3  #define     P7INTF                  (*(unsigned char volatile xdata *)0xfd17)
 516      =3  #define     P0IM0                   (*(unsigned char volatile xdata *)0xfd20)
 517      =3  #define     P1IM0                   (*(unsigned char volatile xdata *)0xfd21)
 518      =3  #define     P2IM0                   (*(unsigned char volatile xdata *)0xfd22)
 519      =3  #define     P3IM0                   (*(unsigned char volatile xdata *)0xfd23)
 520      =3  #define     P4IM0                   (*(unsigned char volatile xdata *)0xfd24)
 521      =3  #define     P5IM0                   (*(unsigned char volatile xdata *)0xfd25)
 522      =3  #define     P6IM0                   (*(unsigned char volatile xdata *)0xfd26)
 523      =3  #define     P7IM0                   (*(unsigned char volatile xdata *)0xfd27)
 524      =3  #define     P0IM1                   (*(unsigned char volatile xdata *)0xfd30)
 525      =3  #define     P1IM1                   (*(unsigned char volatile xdata *)0xfd31)
 526      =3  #define     P2IM1                   (*(unsigned char volatile xdata *)0xfd32)
 527      =3  #define     P3IM1                   (*(unsigned char volatile xdata *)0xfd33)
 528      =3  #define     P4IM1                   (*(unsigned char volatile xdata *)0xfd34)
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 11  

 529      =3  #define     P5IM1                   (*(unsigned char volatile xdata *)0xfd35)
 530      =3  #define     P6IM1                   (*(unsigned char volatile xdata *)0xfd36)
 531      =3  #define     P7IM1                   (*(unsigned char volatile xdata *)0xfd37)
 532      =3  #define     P0WKUE                  (*(unsigned char volatile xdata *)0xfd40)
 533      =3  #define     P1WKUE                  (*(unsigned char volatile xdata *)0xfd41)
 534      =3  #define     P2WKUE                  (*(unsigned char volatile xdata *)0xfd42)
 535      =3  #define     P3WKUE                  (*(unsigned char volatile xdata *)0xfd43)
 536      =3  #define     P4WKUE                  (*(unsigned char volatile xdata *)0xfd44)
 537      =3  #define     P5WKUE                  (*(unsigned char volatile xdata *)0xfd45)
 538      =3  #define     P6WKUE                  (*(unsigned char volatile xdata *)0xfd46)
 539      =3  #define     P7WKUE                  (*(unsigned char volatile xdata *)0xfd47)
 540      =3  
 541      =3  #define     PIN_IP                  (*(unsigned char volatile xdata *)0xfd60)
 542      =3  #define     PIN_IPH                 (*(unsigned char volatile xdata *)0xfd61)
 543      =3  
 544      =3  #define     CHIPID                  ( (unsigned char volatile xdata *)0xfde0)
 545      =3  
 546      =3  #define     CHIPID0                 (*(unsigned char volatile xdata *)0xfde0)
 547      =3  #define     CHIPID1                 (*(unsigned char volatile xdata *)0xfde1)
 548      =3  #define     CHIPID2                 (*(unsigned char volatile xdata *)0xfde2)
 549      =3  #define     CHIPID3                 (*(unsigned char volatile xdata *)0xfde3)
 550      =3  #define     CHIPID4                 (*(unsigned char volatile xdata *)0xfde4)
 551      =3  #define     CHIPID5                 (*(unsigned char volatile xdata *)0xfde5)
 552      =3  #define     CHIPID6                 (*(unsigned char volatile xdata *)0xfde6)
 553      =3  #define     CHIPID7                 (*(unsigned char volatile xdata *)0xfde7)
 554      =3  #define     CHIPID8                 (*(unsigned char volatile xdata *)0xfde8)
 555      =3  #define     CHIPID9                 (*(unsigned char volatile xdata *)0xfde9)
 556      =3  #define     CHIPID10                (*(unsigned char volatile xdata *)0xfdea)
 557      =3  #define     CHIPID11                (*(unsigned char volatile xdata *)0xfdeb)
 558      =3  #define     CHIPID12                (*(unsigned char volatile xdata *)0xfdec)
 559      =3  #define     CHIPID13                (*(unsigned char volatile xdata *)0xfded)
 560      =3  #define     CHIPID14                (*(unsigned char volatile xdata *)0xfdee)
 561      =3  #define     CHIPID15                (*(unsigned char volatile xdata *)0xfdef)
 562      =3  #define     CHIPID16                (*(unsigned char volatile xdata *)0xfdf0)
 563      =3  #define     CHIPID17                (*(unsigned char volatile xdata *)0xfdf1)
 564      =3  #define     CHIPID18                (*(unsigned char volatile xdata *)0xfdf2)
 565      =3  #define     CHIPID19                (*(unsigned char volatile xdata *)0xfdf3)
 566      =3  #define     CHIPID20                (*(unsigned char volatile xdata *)0xfdf4)
 567      =3  #define     CHIPID21                (*(unsigned char volatile xdata *)0xfdf5)
 568      =3  #define     CHIPID22                (*(unsigned char volatile xdata *)0xfdf6)
 569      =3  #define     CHIPID23                (*(unsigned char volatile xdata *)0xfdf7)
 570      =3  #define     CHIPID24                (*(unsigned char volatile xdata *)0xfdf8)
 571      =3  #define     CHIPID25                (*(unsigned char volatile xdata *)0xfdf9)
 572      =3  #define     CHIPID26                (*(unsigned char volatile xdata *)0xfdfa)
 573      =3  #define     CHIPID27                (*(unsigned char volatile xdata *)0xfdfb)
 574      =3  #define     CHIPID28                (*(unsigned char volatile xdata *)0xfdfc)
 575      =3  #define     CHIPID29                (*(unsigned char volatile xdata *)0xfdfd)
 576      =3  #define     CHIPID30                (*(unsigned char volatile xdata *)0xfdfe)
 577      =3  #define     CHIPID31                (*(unsigned char volatile xdata *)0xfdff)
 578      =3  
 579      =3  /////////////////////////////////////////////////
 580      =3  //FC00H-FCFFH
 581      =3  /////////////////////////////////////////////////
 582      =3  
 583      =3  #define     MD3                     (*(unsigned char volatile xdata *)0xfcf0)
 584      =3  #define     MD2                     (*(unsigned char volatile xdata *)0xfcf1)
 585      =3  #define     MD1                     (*(unsigned char volatile xdata *)0xfcf2)
 586      =3  #define     MD0                     (*(unsigned char volatile xdata *)0xfcf3)
 587      =3  #define     MD5                     (*(unsigned char volatile xdata *)0xfcf4)
 588      =3  #define     MD4                     (*(unsigned char volatile xdata *)0xfcf5)
 589      =3  #define     ARCON                   (*(unsigned char volatile xdata *)0xfcf6)
 590      =3  #define     OPCON                   (*(unsigned char volatile xdata *)0xfcf7)
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 12  

 591      =3  
 592      =3  /////////////////////////////////////////////////
 593      =3  //FB00H-FBFFH
 594      =3  /////////////////////////////////////////////////
 595      =3  
 596      =3  #define     COMEN                   (*(unsigned char volatile xdata *)0xfb00)
 597      =3  #define     SEGENL                  (*(unsigned char volatile xdata *)0xfb01)
 598      =3  #define     SEGENH                  (*(unsigned char volatile xdata *)0xfb02)
 599      =3  #define     LEDCTRL                 (*(unsigned char volatile xdata *)0xfb03)
 600      =3  #define     LEDCKS                  (*(unsigned char volatile xdata *)0xfb04)
 601      =3  #define     COM0_DA_L               (*(unsigned char volatile xdata *)0xfb10)
 602      =3  #define     COM1_DA_L               (*(unsigned char volatile xdata *)0xfb11)
 603      =3  #define     COM2_DA_L               (*(unsigned char volatile xdata *)0xfb12)
 604      =3  #define     COM3_DA_L               (*(unsigned char volatile xdata *)0xfb13)
 605      =3  #define     COM4_DA_L               (*(unsigned char volatile xdata *)0xfb14)
 606      =3  #define     COM5_DA_L               (*(unsigned char volatile xdata *)0xfb15)
 607      =3  #define     COM6_DA_L               (*(unsigned char volatile xdata *)0xfb16)
 608      =3  #define     COM7_DA_L               (*(unsigned char volatile xdata *)0xfb17)
 609      =3  #define     COM0_DA_H               (*(unsigned char volatile xdata *)0xfb18)
 610      =3  #define     COM1_DA_H               (*(unsigned char volatile xdata *)0xfb19)
 611      =3  #define     COM2_DA_H               (*(unsigned char volatile xdata *)0xfb1a)
 612      =3  #define     COM3_DA_H               (*(unsigned char volatile xdata *)0xfb1b)
 613      =3  #define     COM4_DA_H               (*(unsigned char volatile xdata *)0xfb1c)
 614      =3  #define     COM5_DA_H               (*(unsigned char volatile xdata *)0xfb1d)
 615      =3  #define     COM6_DA_H               (*(unsigned char volatile xdata *)0xfb1e)
 616      =3  #define     COM7_DA_H               (*(unsigned char volatile xdata *)0xfb1f)
 617      =3  #define     COM0_DC_L               (*(unsigned char volatile xdata *)0xfb20)
 618      =3  #define     COM1_DC_L               (*(unsigned char volatile xdata *)0xfb21)
 619      =3  #define     COM2_DC_L               (*(unsigned char volatile xdata *)0xfb22)
 620      =3  #define     COM3_DC_L               (*(unsigned char volatile xdata *)0xfb23)
 621      =3  #define     COM4_DC_L               (*(unsigned char volatile xdata *)0xfb24)
 622      =3  #define     COM5_DC_L               (*(unsigned char volatile xdata *)0xfb25)
 623      =3  #define     COM6_DC_L               (*(unsigned char volatile xdata *)0xfb26)
 624      =3  #define     COM7_DC_L               (*(unsigned char volatile xdata *)0xfb27)
 625      =3  #define     COM0_DC_H               (*(unsigned char volatile xdata *)0xfb28)
 626      =3  #define     COM1_DC_H               (*(unsigned char volatile xdata *)0xfb29)
 627      =3  #define     COM2_DC_H               (*(unsigned char volatile xdata *)0xfb2a)
 628      =3  #define     COM3_DC_H               (*(unsigned char volatile xdata *)0xfb2b)
 629      =3  #define     COM4_DC_H               (*(unsigned char volatile xdata *)0xfb2c)
 630      =3  #define     COM5_DC_H               (*(unsigned char volatile xdata *)0xfb2d)
 631      =3  #define     COM6_DC_H               (*(unsigned char volatile xdata *)0xfb2e)
 632      =3  #define     COM7_DC_H               (*(unsigned char volatile xdata *)0xfb2f)
 633      =3  
 634      =3  #define     TSCHEN1                 (*(unsigned char volatile xdata *)0xfb40)
 635      =3  #define     TSCHEN2                 (*(unsigned char volatile xdata *)0xfb41)
 636      =3  #define     TSCFG1                  (*(unsigned char volatile xdata *)0xfb42)
 637      =3  #define     TSCFG2                  (*(unsigned char volatile xdata *)0xfb43)
 638      =3  #define     TSWUTC                  (*(unsigned char volatile xdata *)0xfb44)
 639      =3  #define     TSCTRL                  (*(unsigned char volatile xdata *)0xfb45)
 640      =3  #define     TSSTA1                  (*(unsigned char volatile xdata *)0xfb46)
 641      =3  #define     TSSTA2                  (*(unsigned char volatile xdata *)0xfb47)
 642      =3  #define     TSRT                    (*(unsigned char volatile xdata *)0xfb48)
 643      =3  #define     TSDAT                   (*(unsigned int  volatile xdata *)0xfb49)
 644      =3  #define     TSDATH                  (*(unsigned char volatile xdata *)0xfb49)
 645      =3  #define     TSDATL                  (*(unsigned char volatile xdata *)0xfb4A)
 646      =3  #define     TSTH00                  (*(unsigned int  volatile xdata *)0xfb50)
 647      =3  #define     TSTH00H                 (*(unsigned char volatile xdata *)0xfb50)
 648      =3  #define     TSTH00L                 (*(unsigned char volatile xdata *)0xfb51)
 649      =3  #define     TSTH01                  (*(unsigned int  volatile xdata *)0xfb52)
 650      =3  #define     TSTH01H                 (*(unsigned char volatile xdata *)0xfb52)
 651      =3  #define     TSTH01L                 (*(unsigned char volatile xdata *)0xfb53)
 652      =3  #define     TSTH02                  (*(unsigned int  volatile xdata *)0xfb54)
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 13  

 653      =3  #define     TSTH02H                 (*(unsigned char volatile xdata *)0xfb54)
 654      =3  #define     TSTH02L                 (*(unsigned char volatile xdata *)0xfb55)
 655      =3  #define     TSTH03                  (*(unsigned int  volatile xdata *)0xfb56)
 656      =3  #define     TSTH03H                 (*(unsigned char volatile xdata *)0xfb56)
 657      =3  #define     TSTH03L                 (*(unsigned char volatile xdata *)0xfb57)
 658      =3  #define     TSTH04                  (*(unsigned int  volatile xdata *)0xfb58)
 659      =3  #define     TSTH04H                 (*(unsigned char volatile xdata *)0xfb58)
 660      =3  #define     TSTH04L                 (*(unsigned char volatile xdata *)0xfb59)
 661      =3  #define     TSTH05                  (*(unsigned int  volatile xdata *)0xfb5a)
 662      =3  #define     TSTH05H                 (*(unsigned char volatile xdata *)0xfb5a)
 663      =3  #define     TSTH05L                 (*(unsigned char volatile xdata *)0xfb5b)
 664      =3  #define     TSTH06                  (*(unsigned int  volatile xdata *)0xfb5c)
 665      =3  #define     TSTH06H                 (*(unsigned char volatile xdata *)0xfb5c)
 666      =3  #define     TSTH06L                 (*(unsigned char volatile xdata *)0xfb5d)
 667      =3  #define     TSTH07                  (*(unsigned int  volatile xdata *)0xfb5e)
 668      =3  #define     TSTH07H                 (*(unsigned char volatile xdata *)0xfb5e)
 669      =3  #define     TSTH07L                 (*(unsigned char volatile xdata *)0xfb5f)
 670      =3  #define     TSTH08                  (*(unsigned int  volatile xdata *)0xfb60)
 671      =3  #define     TSTH08H                 (*(unsigned char volatile xdata *)0xfb60)
 672      =3  #define     TSTH08L                 (*(unsigned char volatile xdata *)0xfb61)
 673      =3  #define     TSTH09                  (*(unsigned int  volatile xdata *)0xfb62)
 674      =3  #define     TSTH09H                 (*(unsigned char volatile xdata *)0xfb62)
 675      =3  #define     TSTH09L                 (*(unsigned char volatile xdata *)0xfb63)
 676      =3  #define     TSTH10                  (*(unsigned int  volatile xdata *)0xfb64)
 677      =3  #define     TSTH10H                 (*(unsigned char volatile xdata *)0xfb64)
 678      =3  #define     TSTH10L                 (*(unsigned char volatile xdata *)0xfb65)
 679      =3  #define     TSTH11                  (*(unsigned int  volatile xdata *)0xfb66)
 680      =3  #define     TSTH11H                 (*(unsigned char volatile xdata *)0xfb66)
 681      =3  #define     TSTH11L                 (*(unsigned char volatile xdata *)0xfb67)
 682      =3  #define     TSTH12                  (*(unsigned int  volatile xdata *)0xfb68)
 683      =3  #define     TSTH12H                 (*(unsigned char volatile xdata *)0xfb68)
 684      =3  #define     TSTH12L                 (*(unsigned char volatile xdata *)0xfb69)
 685      =3  #define     TSTH13                  (*(unsigned int  volatile xdata *)0xfb6a)
 686      =3  #define     TSTH13H                 (*(unsigned char volatile xdata *)0xfb6a)
 687      =3  #define     TSTH13L                 (*(unsigned char volatile xdata *)0xfb6b)
 688      =3  #define     TSTH14                  (*(unsigned int  volatile xdata *)0xfb6c)
 689      =3  #define     TSTH14H                 (*(unsigned char volatile xdata *)0xfb6c)
 690      =3  #define     TSTH14L                 (*(unsigned char volatile xdata *)0xfb6d)
 691      =3  #define     TSTH15                  (*(unsigned int  volatile xdata *)0xfb6e)
 692      =3  #define     TSTH15H                 (*(unsigned char volatile xdata *)0xfb6e)
 693      =3  #define     TSTH15L                 (*(unsigned char volatile xdata *)0xfb6f)
 694      =3  
 695      =3  #define     LCDCFG                  (*(unsigned char volatile xdata *)0xfb80)
 696      =3  #define     LCDCFG2                 (*(unsigned char volatile xdata *)0xfb81)
 697      =3  #define     DBLNTH                  (*(unsigned char volatile xdata *)0xfb82)
 698      =3  #define     COMLNTHL                (*(unsigned char volatile xdata *)0xdb83)
 699      =3  #define     COMLNTHM                (*(unsigned char volatile xdata *)0xfb84)
 700      =3  #define     COMLNTHH                (*(unsigned char volatile xdata *)0xfb85)
 701      =3  #define     BLINKFRPS               (*(unsigned char volatile xdata *)0xfb86)
 702      =3  #define     LCDCR                   (*(unsigned char volatile xdata *)0xfb87)
 703      =3  #define     COM_ON_A                (*(unsigned char volatile xdata *)0xfb88)
 704      =3  #define     COM_ON_B                (*(unsigned char volatile xdata *)0xfb89)
 705      =3  #define     SEG_ON_A                (*(unsigned char volatile xdata *)0xfb8a)
 706      =3  #define     SEG_ON_B                (*(unsigned char volatile xdata *)0xfb8b)
 707      =3  #define     SEG_ON_C                (*(unsigned char volatile xdata *)0xfb8c)
 708      =3  #define     SEG_ON_D                (*(unsigned char volatile xdata *)0xfb8d)
 709      =3  #define     SEG_ON_E                (*(unsigned char volatile xdata *)0xfb8e)
 710      =3  #define     C0SEGV0                 (*(unsigned char volatile xdata *)0xfb90)
 711      =3  #define     C0SEGV1                 (*(unsigned char volatile xdata *)0xfb91)
 712      =3  #define     C0SEGV2                 (*(unsigned char volatile xdata *)0xfb92)
 713      =3  #define     C0SEGV3                 (*(unsigned char volatile xdata *)0xfb93)
 714      =3  #define     C0SEGV4                 (*(unsigned char volatile xdata *)0xfb94)
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 14  

 715      =3  #define     C1SEGV0                 (*(unsigned char volatile xdata *)0xfb98)
 716      =3  #define     C1SEGV1                 (*(unsigned char volatile xdata *)0xfb99)
 717      =3  #define     C1SEGV2                 (*(unsigned char volatile xdata *)0xfb9a)
 718      =3  #define     C1SEGV3                 (*(unsigned char volatile xdata *)0xfb9b)
 719      =3  #define     C1SEGV4                 (*(unsigned char volatile xdata *)0xfb9c)
 720      =3  #define     C2SEGV0                 (*(unsigned char volatile xdata *)0xfba0)
 721      =3  #define     C2SEGV1                 (*(unsigned char volatile xdata *)0xfba1)
 722      =3  #define     C2SEGV2                 (*(unsigned char volatile xdata *)0xfba2)
 723      =3  #define     C2SEGV3                 (*(unsigned char volatile xdata *)0xfba3)
 724      =3  #define     C2SEGV4                 (*(unsigned char volatile xdata *)0xfba4)
 725      =3  #define     C3SEGV0                 (*(unsigned char volatile xdata *)0xfba8)
 726      =3  #define     C3SEGV1                 (*(unsigned char volatile xdata *)0xfba9)
 727      =3  #define     C3SEGV2                 (*(unsigned char volatile xdata *)0xfbaa)
 728      =3  #define     C3SEGV3                 (*(unsigned char volatile xdata *)0xfbab)
 729      =3  #define     C3SEGV4                 (*(unsigned char volatile xdata *)0xfbac)
 730      =3  
 731      =3  /////////////////////////////////////////////////
 732      =3  //FA00H-FAFFH
 733      =3  /////////////////////////////////////////////////
 734      =3  
 735      =3  #define     DMA_M2M_CFG             (*(unsigned char volatile xdata *)0xfa00)
 736      =3  #define     DMA_M2M_CR              (*(unsigned char volatile xdata *)0xfa01)
 737      =3  #define     DMA_M2M_STA             (*(unsigned char volatile xdata *)0xfa02)
 738      =3  #define     DMA_M2M_AMT             (*(unsigned char volatile xdata *)0xfa03)
 739      =3  #define     DMA_M2M_DONE            (*(unsigned char volatile xdata *)0xfa04)
 740      =3  #define     DMA_M2M_TXAH            (*(unsigned char volatile xdata *)0xfa05)
 741      =3  #define     DMA_M2M_TXAL            (*(unsigned char volatile xdata *)0xfa06)
 742      =3  #define     DMA_M2M_RXAH            (*(unsigned char volatile xdata *)0xfa07)
 743      =3  #define     DMA_M2M_RXAL            (*(unsigned char volatile xdata *)0xfa08)
 744      =3  
 745      =3  #define     DMA_ADC_CFG             (*(unsigned char volatile xdata *)0xfa10)
 746      =3  #define     DMA_ADC_CR              (*(unsigned char volatile xdata *)0xfa11)
 747      =3  #define     DMA_ADC_STA             (*(unsigned char volatile xdata *)0xfa12)
 748      =3  #define     DMA_ADC_RXA             (*(unsigned  int volatile xdata *)0xfa17)
 749      =3  #define     DMA_ADC_RXAH            (*(unsigned char volatile xdata *)0xfa17)
 750      =3  #define     DMA_ADC_RXAL            (*(unsigned char volatile xdata *)0xfa18)
 751      =3  #define     DMA_ADC_CFG2            (*(unsigned char volatile xdata *)0xfa19)
 752      =3  #define     DMA_ADC_CHSW0           (*(unsigned char volatile xdata *)0xfa1a)
 753      =3  #define     DMA_ADC_CHSW1           (*(unsigned char volatile xdata *)0xfa1b)
 754      =3  
 755      =3  #define     DMA_SPI_CFG             (*(unsigned char volatile xdata *)0xfa20)
 756      =3  #define     DMA_SPI_CR              (*(unsigned char volatile xdata *)0xfa21)
 757      =3  #define     DMA_SPI_STA             (*(unsigned char volatile xdata *)0xfa22)
 758      =3  #define     DMA_SPI_AMT             (*(unsigned char volatile xdata *)0xfa23)
 759      =3  #define     DMA_SPI_DONE            (*(unsigned char volatile xdata *)0xfa24)
 760      =3  #define     DMA_SPI_TXA             (*(unsigned  int volatile xdata *)0xfa25)
 761      =3  #define     DMA_SPI_TXAH            (*(unsigned char volatile xdata *)0xfa25)
 762      =3  #define     DMA_SPI_TXAL            (*(unsigned char volatile xdata *)0xfa26)
 763      =3  #define     DMA_SPI_RXA             (*(unsigned  int volatile xdata *)0xfa27)
 764      =3  #define     DMA_SPI_RXAH            (*(unsigned char volatile xdata *)0xfa27)
 765      =3  #define     DMA_SPI_RXAL            (*(unsigned char volatile xdata *)0xfa28)
 766      =3  #define     DMA_SPI_CFG2            (*(unsigned char volatile xdata *)0xfa29)
 767      =3  
 768      =3  #define     DMA_UR1T_CFG            (*(unsigned char volatile xdata *)0xfa30)
 769      =3  #define     DMA_UR1T_CR             (*(unsigned char volatile xdata *)0xfa31)
 770      =3  #define     DMA_UR1T_STA            (*(unsigned char volatile xdata *)0xfa32)
 771      =3  #define     DMA_UR1T_AMT            (*(unsigned char volatile xdata *)0xfa33)
 772      =3  #define     DMA_UR1T_DONE           (*(unsigned char volatile xdata *)0xfa34)
 773      =3  #define     DMA_UR1T_TXA            (*(unsigned  int volatile xdata *)0xfa35)
 774      =3  #define     DMA_UR1T_TXAH           (*(unsigned char volatile xdata *)0xfa35)
 775      =3  #define     DMA_UR1T_TXAL           (*(unsigned char volatile xdata *)0xfa36)
 776      =3  #define     DMA_UR1R_CFG            (*(unsigned char volatile xdata *)0xfa38)
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 15  

 777      =3  #define     DMA_UR1R_CR             (*(unsigned char volatile xdata *)0xfa39)
 778      =3  #define     DMA_UR1R_STA            (*(unsigned char volatile xdata *)0xfa3a)
 779      =3  #define     DMA_UR1R_AMT            (*(unsigned char volatile xdata *)0xfa3b)
 780      =3  #define     DMA_UR1R_DONE           (*(unsigned char volatile xdata *)0xfa3c)
 781      =3  #define     DMA_UR1R_RXA            (*(unsigned  int volatile xdata *)0xfa3d)
 782      =3  #define     DMA_UR1R_RXAH           (*(unsigned char volatile xdata *)0xfa3d)
 783      =3  #define     DMA_UR1R_RXAL           (*(unsigned char volatile xdata *)0xfa3e)
 784      =3  
 785      =3  #define     DMA_UR2T_CFG            (*(unsigned char volatile xdata *)0xfa40)
 786      =3  #define     DMA_UR2T_CR             (*(unsigned char volatile xdata *)0xfa41)
 787      =3  #define     DMA_UR2T_STA            (*(unsigned char volatile xdata *)0xfa42)
 788      =3  #define     DMA_UR2T_AMT            (*(unsigned char volatile xdata *)0xfa43)
 789      =3  #define     DMA_UR2T_DONE           (*(unsigned char volatile xdata *)0xfa44)
 790      =3  #define     DMA_UR2T_TXA            (*(unsigned  int volatile xdata *)0xfa45)
 791      =3  #define     DMA_UR2T_TXAH           (*(unsigned char volatile xdata *)0xfa45)
 792      =3  #define     DMA_UR2T_TXAL           (*(unsigned char volatile xdata *)0xfa46)
 793      =3  #define     DMA_UR2R_CFG            (*(unsigned char volatile xdata *)0xfa48)
 794      =3  #define     DMA_UR2R_CR             (*(unsigned char volatile xdata *)0xfa49)
 795      =3  #define     DMA_UR2R_STA            (*(unsigned char volatile xdata *)0xfa4a)
 796      =3  #define     DMA_UR2R_AMT            (*(unsigned char volatile xdata *)0xfa4b)
 797      =3  #define     DMA_UR2R_DONE           (*(unsigned char volatile xdata *)0xfa4c)
 798      =3  #define     DMA_UR2R_RXA            (*(unsigned  int volatile xdata *)0xfa4d)
 799      =3  #define     DMA_UR2R_RXAH           (*(unsigned char volatile xdata *)0xfa4d)
 800      =3  #define     DMA_UR2R_RXAL           (*(unsigned char volatile xdata *)0xfa4e)
 801      =3  
 802      =3  #define     DMA_UR3T_CFG            (*(unsigned char volatile xdata *)0xfa50)
 803      =3  #define     DMA_UR3T_CR             (*(unsigned char volatile xdata *)0xfa51)
 804      =3  #define     DMA_UR3T_STA            (*(unsigned char volatile xdata *)0xfa52)
 805      =3  #define     DMA_UR3T_AMT            (*(unsigned char volatile xdata *)0xfa53)
 806      =3  #define     DMA_UR3T_DONE           (*(unsigned char volatile xdata *)0xfa54)
 807      =3  #define     DMA_UR3T_TXA            (*(unsigned  int volatile xdata *)0xfa55)
 808      =3  #define     DMA_UR3T_TXAH           (*(unsigned char volatile xdata *)0xfa55)
 809      =3  #define     DMA_UR3T_TXAL           (*(unsigned char volatile xdata *)0xfa56)
 810      =3  #define     DMA_UR3R_CFG            (*(unsigned char volatile xdata *)0xfa58)
 811      =3  #define     DMA_UR3R_CR             (*(unsigned char volatile xdata *)0xfa59)
 812      =3  #define     DMA_UR3R_STA            (*(unsigned char volatile xdata *)0xfa5a)
 813      =3  #define     DMA_UR3R_AMT            (*(unsigned char volatile xdata *)0xfa5b)
 814      =3  #define     DMA_UR3R_DONE           (*(unsigned char volatile xdata *)0xfa5c)
 815      =3  #define     DMA_UR3R_RXA            (*(unsigned  int volatile xdata *)0xfa5d)
 816      =3  #define     DMA_UR3R_RXAH           (*(unsigned char volatile xdata *)0xfa5d)
 817      =3  #define     DMA_UR3R_RXAL           (*(unsigned char volatile xdata *)0xfa5e)
 818      =3  
 819      =3  #define     DMA_UR4T_CFG            (*(unsigned char volatile xdata *)0xfa60)
 820      =3  #define     DMA_UR4T_CR             (*(unsigned char volatile xdata *)0xfa61)
 821      =3  #define     DMA_UR4T_STA            (*(unsigned char volatile xdata *)0xfa62)
 822      =3  #define     DMA_UR4T_AMT            (*(unsigned char volatile xdata *)0xfa63)
 823      =3  #define     DMA_UR4T_DONE           (*(unsigned char volatile xdata *)0xfa64)
 824      =3  #define     DMA_UR4T_TXA            (*(unsigned  int volatile xdata *)0xfa65)
 825      =3  #define     DMA_UR4T_TXAH           (*(unsigned char volatile xdata *)0xfa65)
 826      =3  #define     DMA_UR4T_TXAL           (*(unsigned char volatile xdata *)0xfa66)
 827      =3  #define     DMA_UR4R_CFG            (*(unsigned char volatile xdata *)0xfa68)
 828      =3  #define     DMA_UR4R_CR             (*(unsigned char volatile xdata *)0xfa69)
 829      =3  #define     DMA_UR4R_STA            (*(unsigned char volatile xdata *)0xfa6a)
 830      =3  #define     DMA_UR4R_AMT            (*(unsigned char volatile xdata *)0xfa6b)
 831      =3  #define     DMA_UR4R_DONE           (*(unsigned char volatile xdata *)0xfa6c)
 832      =3  #define     DMA_UR4R_RXA            (*(unsigned  int volatile xdata *)0xfa6d)
 833      =3  #define     DMA_UR4R_RXAH           (*(unsigned char volatile xdata *)0xfa6d)
 834      =3  #define     DMA_UR4R_RXAL           (*(unsigned char volatile xdata *)0xfa6e)
 835      =3  
 836      =3  #define     DMA_LCM_CFG             (*(unsigned char volatile xdata *)0xfa70)
 837      =3  #define     DMA_LCM_CR              (*(unsigned char volatile xdata *)0xfa71)
 838      =3  #define     DMA_LCM_STA             (*(unsigned char volatile xdata *)0xfa72)
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 16  

 839      =3  #define     DMA_LCM_AMT             (*(unsigned char volatile xdata *)0xfa73)
 840      =3  #define     DMA_LCM_DONE            (*(unsigned char volatile xdata *)0xfa74)
 841      =3  #define     DMA_LCM_TXA             (*(unsigned  int volatile xdata *)0xfa75)
 842      =3  #define     DMA_LCM_TXAH            (*(unsigned char volatile xdata *)0xfa75)
 843      =3  #define     DMA_LCM_TXAL            (*(unsigned char volatile xdata *)0xfa76)
 844      =3  #define     DMA_LCM_RXA             (*(unsigned  int volatile xdata *)0xfa77)
 845      =3  #define     DMA_LCM_RXAH            (*(unsigned char volatile xdata *)0xfa77)
 846      =3  #define     DMA_LCM_RXAL            (*(unsigned char volatile xdata *)0xfa78)
 847      =3  
 848      =3  /////////////////////////////////////////////////
 849      =3  //USB Control Regiter
 850      =3  /////////////////////////////////////////////////
 851      =3  
 852      =3  //sfr       USBCLK      =           0xdc;
 853      =3  //sfr       USBDAT      =           0xec;
 854      =3  //sfr       USBCON      =           0xf4;
 855      =3  //sfr       USBADR      =           0xfc;
 856      =3  
 857      =3  // π”√∑Ω∑®:
 858      =3  //      char dat;
 859      =3  //
 860      =3  //      READ_USB(CSR0, dat);        //∂¡USBºƒ¥Ê∆˜
 861      =3  //      WRITE_USB(FADDR, 0x00);     //–¥USBºƒ¥Ê∆˜
 862      =3  
 863      =3  #define     READ_USB(reg, dat)          \
 864      =3              {                           \
 865      =3                  while (USBADR & 0x80);  \
 866      =3                  USBADR = (reg) | 0x80;  \
 867      =3                  while (USBADR & 0x80);  \
 868      =3                  (dat) = USBDAT;         \
 869      =3              }
 870      =3  
 871      =3  #define     WRITE_USB(reg, dat)         \
 872      =3              {                           \
 873      =3                  while (USBADR & 0x80);  \
 874      =3                  USBADR = (reg) & 0x7f;  \
 875      =3                  USBDAT = (dat);         \
 876      =3              }
 877      =3  
 878      =3  #define     USBBASE                 0
 879      =3  #define     FADDR                   (USBBASE + 0)
 880      =3  #define     UPDATE                  0x80
 881      =3  #define     POWER                   (USBBASE + 1)
 882      =3  #define     ISOUD                   0x80
 883      =3  #define     USBRST                  0x08
 884      =3  #define     USBRSU                  0x04
 885      =3  #define     USBSUS                  0x02
 886      =3  #define     ENSUS                   0x01
 887      =3  #define     INTRIN1                 (USBBASE + 2)
 888      =3  #define     EP5INIF                 0x20
 889      =3  #define     EP4INIF                 0x10
 890      =3  #define     EP3INIF                 0x08
 891      =3  #define     EP2INIF                 0x04
 892      =3  #define     EP1INIF                 0x02
 893      =3  #define     EP0IF                   0x01
 894      =3  #define     INTROUT1                (USBBASE + 4)
 895      =3  #define     EP5OUTIF                0x20
 896      =3  #define     EP4OUTIF                0x10
 897      =3  #define     EP3OUTIF                0x08
 898      =3  #define     EP2OUTIF                0x04
 899      =3  #define     EP1OUTIF                0x02
 900      =3  #define     INTRUSB                 (USBBASE + 6)
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 17  

 901      =3  #define     SOFIF                   0x08
 902      =3  #define     RSTIF                   0x04
 903      =3  #define     RSUIF                   0x02
 904      =3  #define     SUSIF                   0x01
 905      =3  #define     INTRIN1E                (USBBASE + 7)
 906      =3  #define     EP5INIE                 0x20
 907      =3  #define     EP4INIE                 0x10
 908      =3  #define     EP3INIE                 0x08
 909      =3  #define     EP2INIE                 0x04
 910      =3  #define     EP1INIE                 0x02
 911      =3  #define     EP0IE                   0x01
 912      =3  #define     INTROUT1E               (USBBASE + 9)
 913      =3  #define     EP5OUTIE                0x20
 914      =3  #define     EP4OUTIE                0x10
 915      =3  #define     EP3OUTIE                0x08
 916      =3  #define     EP2OUTIE                0x04
 917      =3  #define     EP1OUTIE                0x02
 918      =3  #define     INTRUSBE                (USBBASE + 11)
 919      =3  #define     SOFIE                   0x08
 920      =3  #define     RSTIE                   0x04
 921      =3  #define     RSUIE                   0x02
 922      =3  #define     SUSIE                   0x01
 923      =3  #define     FRAME1                  (USBBASE + 12)
 924      =3  #define     FRAME2                  (USBBASE + 13)
 925      =3  #define     INDEX                   (USBBASE + 14)
 926      =3  #define     INMAXP                  (USBBASE + 16)
 927      =3  #define     CSR0                    (USBBASE + 17)
 928      =3  #define     SSUEND                  0x80
 929      =3  #define     SOPRDY                  0x40
 930      =3  #define     SDSTL                   0x20
 931      =3  #define     SUEND                   0x10
 932      =3  #define     DATEND                  0x08
 933      =3  #define     STSTL                   0x04
 934      =3  #define     IPRDY                   0x02
 935      =3  #define     OPRDY                   0x01
 936      =3  #define     INCSR1                  (USBBASE + 17)
 937      =3  #define     INCLRDT                 0x40
 938      =3  #define     INSTSTL                 0x20
 939      =3  #define     INSDSTL                 0x10
 940      =3  #define     INFLUSH                 0x08
 941      =3  #define     INUNDRUN                0x04
 942      =3  #define     INFIFONE                0x02
 943      =3  #define     INIPRDY                 0x01
 944      =3  #define     INCSR2                  (USBBASE + 18)
 945      =3  #define     INAUTOSET               0x80
 946      =3  #define     INISO                   0x40
 947      =3  #define     INMODEIN                0x20
 948      =3  #define     INMODEOUT               0x00
 949      =3  #define     INENDMA                 0x10
 950      =3  #define     INFCDT                  0x08
 951      =3  #define     OUTMAXP                 (USBBASE + 19)
 952      =3  #define     OUTCSR1                 (USBBASE + 20)
 953      =3  #define     OUTCLRDT                0x80
 954      =3  #define     OUTSTSTL                0x40
 955      =3  #define     OUTSDSTL                0x20
 956      =3  #define     OUTFLUSH                0x10
 957      =3  #define     OUTDATERR               0x08
 958      =3  #define     OUTOVRRUN               0x04
 959      =3  #define     OUTFIFOFUL              0x02
 960      =3  #define     OUTOPRDY                0x01
 961      =3  #define     OUTCSR2                 (USBBASE + 21)
 962      =3  #define     OUTAUTOCLR              0x80
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 18  

 963      =3  #define     OUTISO                  0x40
 964      =3  #define     OUTENDMA                0x20
 965      =3  #define     OUTDMAMD                0x10
 966      =3  #define     COUNT0                  (USBBASE + 22)
 967      =3  #define     OUTCOUNT1               (USBBASE + 22)
 968      =3  #define     OUTCOUNT2               (USBBASE + 23)
 969      =3  #define     FIFO0                   (USBBASE + 32)
 970      =3  #define     FIFO1                   (USBBASE + 33)
 971      =3  #define     FIFO2                   (USBBASE + 34)
 972      =3  #define     FIFO3                   (USBBASE + 35)
 973      =3  #define     FIFO4                   (USBBASE + 36)
 974      =3  #define     FIFO5                   (USBBASE + 37)
 975      =3  #define     UTRKCTL                 (USBBASE + 48)
 976      =3  #define     UTRKSTS                 (USBBASE + 49)
 977      =3  
 978      =3  /////////////////////////////////////////////////
 979      =3  //Interrupt Vector
 980      =3  /////////////////////////////////////////////////
 981      =3  
 982      =3  #define     INT0_VECTOR             0       //0003H
 983      =3  #define     TMR0_VECTOR             1       //000BH
 984      =3  #define     INT1_VECTOR             2       //0013H
 985      =3  #define     TMR1_VECTOR             3       //001BH
 986      =3  #define     UART1_VECTOR            4       //0023H
 987      =3  #define     ADC_VECTOR              5       //002BH
 988      =3  #define     LVD_VECTOR              6       //0033H
 989      =3  #define     UART2_VECTOR            8       //0043H
 990      =3  #define     SPI_VECTOR              9       //004BH
 991      =3  #define     INT2_VECTOR             10      //0053H
 992      =3  #define     INT3_VECTOR             11      //005BH
 993      =3  #define     TMR2_VECTOR             12      //0063H
 994      =3  #define     USER_VECTOR             13      //006BH
 995      =3  #define     INT4_VECTOR             16      //0083H
 996      =3  #define     UART3_VECTOR            17      //008BH
 997      =3  #define     UART4_VECTOR            18      //0093H
 998      =3  #define     TMR3_VECTOR             19      //009BH
 999      =3  #define     TMR4_VECTOR             20      //00A3H
1000      =3  #define     CMP_VECTOR              21      //00ABH
1001      =3  #define     I2C_VECTOR              24      //00C3H
1002      =3  #define     USB_VECTOR              25      //00CBH
1003      =3  #define     PWMA_VECTOR             26      //00D3H
1004      =3  #define     PWMB_VECTOR             27      //00DBH
1005      =3  
1006      =3  #define     TKSU_VECTOR             35      //011BH
1007      =3  #define     RTC_VECTOR              36      //0123H
1008      =3  #define     P0INT_VECTOR            37      //012BH
1009      =3  #define     P1INT_VECTOR            38      //0133H
1010      =3  #define     P2INT_VECTOR            39      //013BH
1011      =3  #define     P3INT_VECTOR            40      //0143H
1012      =3  #define     P4INT_VECTOR            41      //014BH
1013      =3  #define     P5INT_VECTOR            42      //0153H
1014      =3  #define     P6INT_VECTOR            43      //015BH
1015      =3  #define     P7INT_VECTOR            44      //0163H
1016      =3  #define     DMA_M2M_VECTOR          47      //017BH
1017      =3  #define     DMA_ADC_VECTOR          48      //0183H
1018      =3  #define     DMA_SPI_VECTOR          49      //018BH
1019      =3  #define     DMA_UR1T_VECTOR         50      //0193H
1020      =3  #define     DMA_UR1R_VECTOR         51      //019BH
1021      =3  #define     DMA_UR2T_VECTOR         52      //01A3H
1022      =3  #define     DMA_UR2R_VECTOR         53      //01ABH
1023      =3  #define     DMA_UR3T_VECTOR         54      //01B3H
1024      =3  #define     DMA_UR3R_VECTOR         55      //01BBH
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 19  

1025      =3  #define     DMA_UR4T_VECTOR         56      //01C3H
1026      =3  #define     DMA_UR4R_VECTOR         57      //01CBH
1027      =3  #define     DMA_LCM_VECTOR          58      //01D3H
1028      =3  #define     LCM_VECTOR              59      //01DBH
1029      =3  
1030      =3  /////////////////////////////////////////////////
1031      =3  #define EAXSFR()    P_SW2 |= 0x80   /* MOVX A,@DPTR/MOVX @DPTR,A÷∏¡Óµƒ≤Ÿ◊˜∂‘œÛŒ™¿©’πSFR(XSFR) */
1032      =3  #define EAXRAM()    P_SW2 &= ~0x80    /* MOVX A,@DPTR/MOVX @DPTR,A÷∏¡Óµƒ≤Ÿ◊˜∂‘œÛŒ™¿©’πRAM(XRAM) */
1033      =3  
1034      =3  
1035      =3  /////////////////////////////////////////////////
1036      =3  #define NOP1()  _nop_()
1037      =3  #define NOP2()  NOP1(),NOP1()
1038      =3  #define NOP3()  NOP2(),NOP1()
1039      =3  #define NOP4()  NOP3(),NOP1()
1040      =3  #define NOP5()  NOP4(),NOP1()
1041      =3  #define NOP6()  NOP5(),NOP1()
1042      =3  #define NOP7()  NOP6(),NOP1()
1043      =3  #define NOP8()  NOP7(),NOP1()
1044      =3  #define NOP9()  NOP8(),NOP1()
1045      =3  #define NOP10() NOP9(),NOP1()
1046      =3  #define NOP11() NOP10(),NOP1()
1047      =3  #define NOP12() NOP11(),NOP1()
1048      =3  #define NOP13() NOP12(),NOP1()
1049      =3  #define NOP14() NOP13(),NOP1()
1050      =3  #define NOP15() NOP14(),NOP1()
1051      =3  #define NOP16() NOP15(),NOP1()
1052      =3  #define NOP17() NOP16(),NOP1()
1053      =3  #define NOP18() NOP17(),NOP1()
1054      =3  #define NOP19() NOP18(),NOP1()
1055      =3  #define NOP20() NOP19(),NOP1()
1056      =3  #define NOP21() NOP20(),NOP1()
1057      =3  #define NOP22() NOP21(),NOP1()
1058      =3  #define NOP23() NOP22(),NOP1()
1059      =3  #define NOP24() NOP23(),NOP1()
1060      =3  #define NOP25() NOP24(),NOP1()
1061      =3  #define NOP26() NOP25(),NOP1()
1062      =3  #define NOP27() NOP26(),NOP1()
1063      =3  #define NOP28() NOP27(),NOP1()
1064      =3  #define NOP29() NOP28(),NOP1()
1065      =3  #define NOP30() NOP29(),NOP1()
1066      =3  #define NOP31() NOP30(),NOP1()
1067      =3  #define NOP32() NOP31(),NOP1()
1068      =3  #define NOP33() NOP32(),NOP1()
1069      =3  #define NOP34() NOP33(),NOP1()
1070      =3  #define NOP35() NOP34(),NOP1()
1071      =3  #define NOP36() NOP35(),NOP1()
1072      =3  #define NOP37() NOP36(),NOP1()
1073      =3  #define NOP38() NOP37(),NOP1()
1074      =3  #define NOP39() NOP38(),NOP1()
1075      =3  #define NOP40() NOP39(),NOP1()
1076      =3  #define NOP(N)  NOP##N()
1077      =3  
1078      =3  
1079      =3  /////////////////////////////////////////////////
1080      =3  
1081      =3  #endif
1082      =3  
  48      =2  #include<intrins.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  INTRINS.H
   3      =3  
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 20  

   4      =3  Intrinsic functions for C51.
   5      =3  Copyright (c) 1988-2010 Keil Elektronik GmbH and ARM Germany GmbH
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __INTRINS_H__
  10      =3  #define __INTRINS_H__
  11      =3  
  12      =3  #pragma SAVE
  13      =3  
  14      =3  #if defined (__CX2__)
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 #endif
  18      =3  
  19      =3  extern void          _nop_     (void);
  20      =3  extern bit           _testbit_ (bit);
  21      =3  extern unsigned char _cror_    (unsigned char, unsigned char);
  22      =3  extern unsigned int  _iror_    (unsigned int,  unsigned char);
  23      =3  extern unsigned long _lror_    (unsigned long, unsigned char);
  24      =3  extern unsigned char _crol_    (unsigned char, unsigned char);
  25      =3  extern unsigned int  _irol_    (unsigned int,  unsigned char);
  26      =3  extern unsigned long _lrol_    (unsigned long, unsigned char);
  27      =3  extern unsigned char _chkfloat_(float);
  28      =3  #if defined (__CX2__)
           =3 extern int           abs       (int);
           =3 extern void          _illop_   (void);
           =3 #endif
  32      =3  #if !defined (__CX2__)
  33      =3  extern void          _push_    (unsigned char _sfr);
  34      =3  extern void          _pop_     (unsigned char _sfr);
  35      =3  #endif
  36      =3  
  37      =3  #pragma RESTORE
  38      =3  
  39      =3  #endif
  40      =3  
  49      =2  
  50      =2  #define u8 unsigned char
  51      =2  #define u16 unsigned int
  52      =2  #define s16 signed int
  53      =2  #define u32 unsigned long
  54      =2  #define s32 signed long
  55      =2  #define word_t u8
  56      =2  #define uint8_t u8
  57      =2  #define bool bit
  58      =2  
  59      =2  /*////////////////////////////////////////////////////////////////////////////*/
  60      =2  #elif ARDUINO_ATMEAG328P
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 
           =2 #include <arduino.h>
           =2 
           =2 #define u8 unsigned char
           =2 #define u16 unsigned int
           =2 #define s16 signed int
           =2 #define u32 unsigned long
           =2 #define word_t u8
           =2 #define uint8_t u8
           =2 #define idata
           =2 #define xdata
           =2 #define code
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 21  

           =2 
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 
           =2 #else
           =2   #error "board not defined!"
           =2 #endif
  80      =2  
  81      =2  /*////////////////////////////////////////////////////////////////////////////*/
  82      =2  
  83      =2  /******************************************************************************/
  84      =2  /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  85      =2  
  86      =2  #endif
  19      =1  #include "config.h"
   1      =2  /*
   2      =2  ********************************************************************************
   3      =2  *                             ---ofme---
   4      =2  *           Copyleft (c) 2021-2023, ÂæÆÈ£éÂ±±Ë∞∑ / ofourme@163.com
   5      =2  *           License: LGPL
   6      =2  *
   7      =2  *   CONFIG.H-V1.1.0 (2023.Oct.25th)
   8      =2  *
   9      =2  ********************************************************************************
  10      =2  */
  11      =2  
  12      =2  #ifndef __CONFIG_H__
  13      =2  #define __CONFIG_H__
  14      =2  
  15      =2  /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  16      =2  /******************************************************************************/
  17      =2  
  18      =2  #include "hw.h"
   1      =3  /*
   2      =3  ********************************************************************************
   3      =3  *                             ---ofme---
   4      =3  *           Copyleft (c) 2021-2023, ÂæÆÈ£éÂ±±Ë∞∑ / ofourme@163.com
   5      =3  *           License: LGPL
   6      =3  *
   7      =3  *   HW.H-V1.0.0 (2023.Oct.25th)
   8      =3  *
   9      =3  ********************************************************************************
  10      =3  */
  11      =3  
  12      =3  #ifndef __HW_H__
           =3 #define __HW_H__
           =3 
           =3 /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
           =3 /******************************************************************************/
           =3 
           =3 #define STC_15W408AS    0
           =3 #define STC_15W408AS_SOP20  0
           =3 #define ARDUINO_ATMEAG328P  0
           =3 #define STC_8H        1
           =3 #define STC_8H_TSSOP20    1
           =3 
           =3 #define FOSC  12000000UL
           =3 
           =3 /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
           =3 
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 #if STC_15W408AS
           =3 /*////////////////////////////////////////////////////////////////////////////*/
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 22  

           =3 
           =3 #include "stc15w.h"
           =3 #include<intrins.h>
           =3 
           =3 #define u8 unsigned char
           =3 #define u16 unsigned int
           =3 #define s16 signed int
           =3 #define u32 unsigned long
           =3 #define word_t u8
           =3 #define uint8_t u8
           =3 #define bool bit
           =3   
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 #elif STC_8H
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 
           =3 #include "STC8H.h"
           =3 #include<intrins.h>
           =3 
           =3 #define u8 unsigned char
           =3 #define u16 unsigned int
           =3 #define s16 signed int
           =3 #define u32 unsigned long
           =3 #define s32 signed long
           =3 #define word_t u8
           =3 #define uint8_t u8
           =3 #define bool bit
           =3 
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 #elif ARDUINO_ATMEAG328P
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 
           =3 #include <arduino.h>
           =3 
           =3 #define u8 unsigned char
           =3 #define u16 unsigned int
           =3 #define s16 signed int
           =3 #define u32 unsigned long
           =3 #define word_t u8
           =3 #define uint8_t u8
           =3 #define idata
           =3 #define xdata
           =3 #define code
           =3 
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 
           =3 #else
           =3   #error "board not defined!"
           =3 #endif
           =3 
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 
           =3 /******************************************************************************/
           =3 /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
           =3 
           =3 #endif
  19      =2  #include "loli3_pact.h"
   1      =3  /*
   2      =3  ********************************************************************************
   3      =3  *                             ---ofme---
   4      =3  *           Copyleft (c) 2008-2023, ÂæÆÈ£éÂ±±Ë∞∑/ofourme@163.com
   5      =3  *           License: LGPL
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 23  

   6      =3  *
   7      =3  *   LOLI3_PACT.H-V1.1.0 (2023.Sep.18th)
   8      =3  *
   9      =3  ********************************************************************************
  10      =3  */
  11      =3  
  12      =3  #ifndef __LOLI3_PACT_H__
  13      =3  #define __LOLI3_PACT_H__
  14      =3  
  15      =3  /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  16      =3  /******************************************************************************/
  17      =3  /*////////////////////////////////////////////////////////////////////////////*/
  18      =3  
  19      =3  //‰ΩøÁî®‚ÄúLOVE‚Äù‰Ωú‰∏∫ÈªòËÆ§Âú∞ÂùÄ
  20      =3  #define LOLI3_ADDRESS_STARTUP           'L','O','V','E','!'
  21      =3  #define LOLI3_NRF_DATA_LENGTH           11
  22      =3  
  23      =3  //‰ΩøÁî®33È¢ëÈÅì‰Ωú‰∏∫Êé•Êî∂Êú∫ÈáçËøûCHANNEL
  24      =3  #define LOLI3_CHANNEL_STARTUP           33
  25      =3  //‰ΩøÁî®66È¢ëÈÅì‰Ωú‰∏∫Êé•Êî∂Êú∫ÂêØÂä®CHANNEL
  26      =3  #define LOLI3_CHANNEL_CONNECT           66
  27      =3  //Ë∑≥È¢ëCHANNELÊï∞Èáè
  28      =3  #define LOLI3_NUM_HOPPING               5
  29      =3  //ÈªòËÆ§Áî®‰∫éË∑≥È¢ëÁöÑ5‰∏™CHANNEL
  30      =3  #define LOLI3_HOPPING_STARTUP           10,35,60,85,110
  31      =3  
  32      =3  /*////////////////////////////////////////////////////////////////////////////*/
  33      =3  // update(20230918):
  34      =3  // ËàµÊú∫ËæìÂÖ•ËÑâÂÆΩ0.5~2.5msÔºåÂë®Êúü20msÔºõËà™Ê®°ËàµÊú∫‰∏ÄËà¨‰ΩøÁî®ËÑâÂÆΩ1~2ms„ÄÇ
  35      =3  // loli3Êé•Êî∂Êú∫ÂØπÊé•Êî∂Âà∞ÁöÑÈÄöÈÅìÊï∞ÊçÆ‰Ωú*27/20=1.35ËøêÁÆóÔºåÂç≥ËÑâÂÆΩ=0.811+CH*27/20
  36      =3  // ‰∏∫‰øùÊåÅÂÖºÂÆπÔºåÂêåÊó∂ÊèêÂçáÊïàÁéáÔºå‰øÆÊîπ‰∏∫*43(*43ÂèØ‰øùËØÅ10‰ΩçCHÂÄº‰∏çÊ∫¢Âá∫16‰Ωç)ÂêåÊó∂Âè≥Áßª5‰
             -Ωç=*43/32=1.34375~=1.35Ôºå
  37      =3  //     --> ÂêåÊó∂‰øÆÊîπÊúÄ‰ΩéËÑâÂÆΩ‰∏∫0.813‰ª•‰øùÊåÅ‰∏≠‰ΩçÂÄº1.5ms‰∏çÂèòÔºåÂç≥ËÑâÂÆΩ=0.813+CH*43>>5
  38      =3  #define LOLI3_RECV_SERVO_RANGE_MUL      43
  39      =3  #define LOLI3_RECV_SERVO_RANGE_R_SHIFT  5
  40      =3  // ÂàÜÊûêloli3Êé•Êî∂Êú∫Ê∫êÁ†ÅÔºåÂΩìpwmÊï∞ÂÄºÂ∞è‰∫é‰∏ÄÂÆöÂÄºÔºåÁõ¥Êé•ËæìÂá∫0„ÄÇÊ≠§ÂèÇÊï∞ÊåâÊúÄÈ´ò1023ËÆæÁΩÆ
             -„ÄÇ
  41      =3  #define LOLI3_RECV_PWM_MINNUM_DEFAULT   100
  42      =3  
  43      =3  /******************************************************************************/
  44      =3  /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  45      =3  
  46      =3  #endif
  20      =2  
  21      =2  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  22      =2  
  23      =2  // enable SBUS_DEBUG  would disable SBUS pin output
  24      =2  //#define SBUS_DEBUG
  25      =2  //----------------------------------------------------------------------------//
  26      =2  // Set the SBUS baud rate. UART always be SERIAL_8E2(8‰ΩçÊï∞ÊçÆÔºåÂÅ∂Ê†°È™åÔºå2‰ΩçÂÅúÊ≠¢‰Ωç)
  27      =2  // Optional: SBUS_BPS_9600, SBUS_BPS_115200, SBUS_BPS_100K; Default: SBUS_BPS_100K.
  28      =2  //#define SBUS_BPS_115200
  29      =2  #define SBUS_BPS_100K
  30      =2  //----------------------------------------------------------------------------//
  31      =2  // ËΩÆËØ¢‰ªªÂä°ÂÆöÊó∂Âô®Ê≠•ËøõÁ≤æÂ∫¶ÔºåÈªòËÆ§3ms
  32      =2  #define LOLI3_RECV_TIMERS_TICK_SETPS 3
  33      =2  //----------------------------------------------------------------------------//
  34      =2  // LOLI3_RECV_PWM_MINNUM: LOLI3_RECV_PWM_MINNUM_DEFAULT would compatibility with loli3 original.
  35      =2  //                        0 would set the minimum if possible.  ÊëáÊùÜËôö‰ΩçÂ§ßÂèØËÉΩÂØºËá¥Êó†Ê≥ïËæìÂá∫0.
  36      =2  #define LOLI3_RECV_PWM_MINNUM   LOLI3_RECV_PWM_MINNUM_DEFAULT
  37      =2  // #define LOLI3_RECV_PWM_MINNUM 0
  38      =2  //----------------------------------------------------------------------------//
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 24  

  39      =2  // Âä®ÂäõÁîµÊ±†ÁîµÈòªÂàÜÂéãÊîæÂ§ßÂÄçÊï∞ÔºåÊ≠£Â∏∏ÊòØ3„ÄÇ
  40      =2  #define VOLTAGE_BAT_MULTIPLE 3
  41      =2  //----------------------------------------------------------------------------//
  42      =2  // ËäØÁâáÁîµÂéãË∞ÉÊï¥Á≥ªÊï∞ÔºåÂæÆË∞ÉÊ≠§Á≥ªÊï∞‰ª•ÂåπÈÖçÂêÑ‰∏™ËäØÁâá„ÄÇ
  43      =2  /*
  44      =2    BGV: ÂÜÖÈÉ®ÂèÇËÄÉ‰ø°Âè∑Ê∫êÁîµÂéãADCÂÄºÔºõBGV5Ôºö5VÊó∂ADCÂÄºÔºõBGVxÔºöVCCÂèÇËÄÉÁîµÂéãÊó∂ËΩ¨Êç¢ÁöÑADCÂÄº
  45      =2    STC15W: ÂÜÖÈÉ®ÂèÇËÄÉ‰ø°Âè∑Ê∫êÁîµÂéãÂõ∫ÂÆö‰ΩÜ‰∏çÁ°ÆÂÆöÔºåÂõ∫ÂÆöÁîµÂéãVa=BGV5/1024*5=BGVx/1024*VCC
  46      =2            --> VCC=BGV5/1024*5*1024/BGVx=BGV5*5/BGVx
  47      =2    STC8H:  ÂÜÖÈÉ®ÂèÇËÄÉ‰ø°Âè∑Ê∫êÁîµÂéãÂõ∫ÂÆö(1.19v)Ôºå 1.19v=BGV5/1024*5=BGVx/1024*VCC
  48      =2            --> VCC=BGV5/1024*5*1024/BGVx=BGV5*5/BGVx
  49      =2            ÂÖ∂‰∏≠BGV5=1.19*1024/5+0.5~=244
  50      =2  */
  51      =2  #if STC_15W408AS
           =2   #define BGV5  260
           =2 #elif STC_8H
  54      =2    #define BGV5  ((unsigned long)(1.19*1024/5+0.5))
  55      =2  #else
           =2   #err "BGV5 not defined."
           =2 #endif
  58      =2    // Ê≠§Â§Ñ5‰∏é5VÁîµÂéãÂåπÈÖçÔºå‰º†ËæìÁîµÂéãÊï∞ÊçÆÈúÄÊâ©Â§ß100ÂÄç‰ª•‰øùÁïôÂ∞èÊï∞ÁÇπÂêé2‰ΩçÔºåËÄåËæìÂÖ•adcÂÄ
             -ºÊª§Ê≥¢ÂêéÊâ©Â§ß8ÂÄçÔºå‰∏∫Áªü‰∏ÄÂçï‰ΩçÊïÖ*5*100*8
  59      =2  #define VOLTAGE_IC_ADJUST ((5ul*100*8)*BGV5)
  60      =2  //----------------------------------------------------------------------------//
  61      =2  
  62      =2  #ifdef SBUS_DEBUG
           =2   #define DBG(str) hw_uart_puts(str)
           =2 #else
  65      =2    #define DBG(str)
  66      =2  #endif
  67      =2  
  68      =2  /*////////////////////////////////////////////////////////////////////////////*/
  69      =2  #if STC_15W408AS
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 
           =2 #if STC_15W408AS_SOP20
           =2 //ÂÆö‰πâÊåáÁ§∫ÁÅØ
           =2 sbit LED=P1^0;
           =2 //ÂÆö‰πâ8‰∏™ÈÄöÈÅìËæìÂá∫
           =2 sbit CH1=P3^7;
           =2 sbit CH2=P3^6;
           =2 sbit CH3=P3^5;
           =2 sbit CH4=P3^4;
           =2 sbit CH5=P3^3;
           =2 sbit CH6=P3^2;
           =2 sbit CH7=P3^1;
           =2 sbit CH8=P3^0;
           =2 
           =2 sbit CH9=P5^4;
           =2 sbit CH10=P5^5;
           =2 
           =2 //ÂÆö‰πâÊó†Á∫øÊ®°ÂùóÁöÑÁÆ°ËÑö
           =2 sbit CE  =P1^2;
           =2 sbit SCK =P1^4;
           =2 sbit MISO=P1^6;
           =2 sbit IRQ =P1^7;
           =2 sbit MOSI=P1^5;
           =2 sbit CSN =P1^3;
           =2 
           =2 #else
           =2 //ÂÆö‰πâÊåáÁ§∫ÁÅØ
           =2 sbit LED=P1^2;
           =2 //ÂÆö‰πâ8‰∏™ÈÄöÈÅìËæìÂá∫
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 25  

           =2 sbit CH1=P3^7;
           =2 sbit CH2=P3^6;
           =2 sbit CH3=P3^5;
           =2 sbit CH4=P3^4;
           =2 sbit CH5=P3^3;
           =2 sbit CH6=P3^2;
           =2 sbit CH7=P3^1;
           =2 sbit CH8=P3^0;
           =2 //ÂÆö‰πâÊó†Á∫øÊ®°ÂùóÁöÑÁÆ°ËÑö
           =2 sbit CE  =P5^5;
           =2 sbit SCK =P5^4;
           =2 sbit MISO=P1^7;
           =2 sbit IRQ =P1^6;
           =2 sbit MOSI=P1^5;
           =2 sbit CSN =P1^4;
           =2 
           =2 #endif
           =2 
           =2 /*////////////////////////////////////*/
           =2 // Ê†πÊçÆÁ°¨‰ª∂ÂÆûÈôÖÊÉÖÂÜµÊù°‰ª∂ÁºñËØë
           =2 // PIN_CH5/PIN_CH_OUTÁî®‰∫éËæìÂá∫ÔºåPIN_CH6/PIN_CH_INÁî®‰∫éËæìÂÖ•„ÄÇÊé•Êî∂Êú∫ÂêØÂä®Êó∂Â¶ÇÊûúÊ£ÄÊµãÂà∞CH5„Ä
             -ÅCH6Áü≠Êé•ÔºåÂàôÈáçÊñ∞ÈÖçÂØπ„ÄÇ
           =2 #define PIN_CH_OUT_P33
           =2 #define PIN_CH_IN_P32
           =2 // Âä®ÂäõÁîµÊ±†ÁîµÂéãÊ£ÄÊµãÂºïËÑöP1.1
           =2 #define PIN_ADC_P1X 1
           =2 // EEPROMÈ°µÈù¢Â§ßÂ∞è
           =2 #define SIZE_STC_EEPROM_PAGE  512
           =2 #define SIZE_EEPROM_PAGE      SIZE_STC_EEPROM_PAGE
           =2 // Áä∂ÊÄÅÁÅØÈ©±Âä®
           =2 #define LED_ON()  do{LED = 1;}while(0)
           =2 #define LED_OFF() do{LED = 0;}while(0)
           =2 
           =2 /*////////////////////////////////////*/
           =2 #define FUNC_MILLIS_EN  0
           =2 #define FUNC_MICROS_EN  1
           =2 #define FUNC_DELAY_EN   1
           =2 #define FUNC_DELAYMICROSECONDS_EN 0
           =2 
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 #elif STC_8H
 140      =2  /*////////////////////////////////////////////////////////////////////////////*/
 141      =2  
 142      =2  #if STC_8H_TSSOP20
 143      =2  
 144      =2  sbit LED=P1^2;
 145      =2  
 146      =2  sbit CH1=P5^4;
 147      =2  sbit CH2=P1^7;
 148      =2  sbit CH3=P1^0;
 149      =2  sbit CH4=P3^7;
 150      =2  sbit CH5=P3^6;
 151      =2  sbit CH6=P3^4;
 152      =2  sbit CH7=P3^3;
 153      =2  sbit CH8=P3^0;
 154      =2  
 155      =2  sbit CHx=P3^1;
 156      =2  
 157      =2  sbit CE  =P3^2;
 158      =2  sbit SCK =P1^5;
 159      =2  sbit MISO=P1^4;
 160      =2  sbit IRQ =P1^6;
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 26  

 161      =2  sbit MOSI=P1^3;
 162      =2  sbit CSN =P3^5;
 163      =2  
 164      =2  #else
           =2 #endif
 166      =2  
 167      =2  /*////////////////////////////////////*/
 168      =2  // ÂÜçÊ¨°ÂÆö‰πâVOLTAGE_BAT_MULTIPLEÔºåË¶ÜÁõñÊéâÂâçÈù¢ÁöÑÊï∞ÊçÆ
 169      =2  #if defined  VOLTAGE_BAT_MULTIPLE
 170      =2  #define VOLTAGE_BAT_MULTIPLE 4
*** WARNING C317 IN LINE 170 OF ..\port\config.h: attempt to redefine macro 'VOLTAGE_BAT_MULTIPLE'
 171      =2  #endif
 172      =2  #define PIN_CH_OUT_P37
 173      =2  #define PIN_CH_IN_P36
 174      =2  #define PIN_ADC_P1X 1
 175      =2  #define SIZE_STC_EEPROM_PAGE  512
 176      =2  #define SIZE_EEPROM_PAGE      SIZE_STC_EEPROM_PAGE
 177      =2  #define LED_ON()  do{LED = 1;}while(0)
 178      =2  #define LED_OFF() do{LED = 0;}while(0)
 179      =2  
 180      =2  /*////////////////////////////////////*/
 181      =2  #define FUNC_MILLIS_EN  0
 182      =2  #define FUNC_MICROS_EN  1
 183      =2  #define FUNC_DELAY_EN   1
 184      =2  #define FUNC_DELAYMICROSECONDS_EN 0
 185      =2  
 186      =2  /*////////////////////////////////////////////////////////////////////////////*/
 187      =2  #elif ARDUINO_ATMEAG328P
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 
           =2 #define DEF_SPI_SOFT
           =2 //ÂÆö‰πâÊåáÁ§∫ÁÅØ
           =2 #define LED 13
           =2 //ÂÆö‰πâ8‰∏™ÈÄöÈÅìËæìÂá∫
           =2 //ÂÆö‰πâÊó†Á∫øÊ®°ÂùóÁöÑÁÆ°ËÑö
           =2 #define IRQ   2
           =2 #define MISO  3
           =2 #define MOSI  4
           =2 #define SCK   5
           =2 #define CSN   6
           =2 #define CE    7
           =2 
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 #endif
 204      =2  /******************************************************************************/
 205      =2  /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
 206      =2  
 207      =2  #endif
  20      =1  #include "loli3_pact.h"
   1      =2  /*
   2      =2  ********************************************************************************
   3      =2  *                             ---ofme---
   4      =2  *           Copyleft (c) 2008-2023, ÂæÆÈ£éÂ±±Ë∞∑/ofourme@163.com
   5      =2  *           License: LGPL
   6      =2  *
   7      =2  *   LOLI3_PACT.H-V1.1.0 (2023.Sep.18th)
   8      =2  *
   9      =2  ********************************************************************************
  10      =2  */
  11      =2  
  12      =2  #ifndef __LOLI3_PACT_H__
           =2 #define __LOLI3_PACT_H__
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 27  

           =2 
           =2 /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
           =2 /******************************************************************************/
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 
           =2 //‰ΩøÁî®‚ÄúLOVE‚Äù‰Ωú‰∏∫ÈªòËÆ§Âú∞ÂùÄ
           =2 #define LOLI3_ADDRESS_STARTUP           'L','O','V','E','!'
           =2 #define LOLI3_NRF_DATA_LENGTH           11
           =2 
           =2 //‰ΩøÁî®33È¢ëÈÅì‰Ωú‰∏∫Êé•Êî∂Êú∫ÈáçËøûCHANNEL
           =2 #define LOLI3_CHANNEL_STARTUP           33
           =2 //‰ΩøÁî®66È¢ëÈÅì‰Ωú‰∏∫Êé•Êî∂Êú∫ÂêØÂä®CHANNEL
           =2 #define LOLI3_CHANNEL_CONNECT           66
           =2 //Ë∑≥È¢ëCHANNELÊï∞Èáè
           =2 #define LOLI3_NUM_HOPPING               5
           =2 //ÈªòËÆ§Áî®‰∫éË∑≥È¢ëÁöÑ5‰∏™CHANNEL
           =2 #define LOLI3_HOPPING_STARTUP           10,35,60,85,110
           =2 
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 // update(20230918):
           =2 // ËàµÊú∫ËæìÂÖ•ËÑâÂÆΩ0.5~2.5msÔºåÂë®Êúü20msÔºõËà™Ê®°ËàµÊú∫‰∏ÄËà¨‰ΩøÁî®ËÑâÂÆΩ1~2ms„ÄÇ
           =2 // loli3Êé•Êî∂Êú∫ÂØπÊé•Êî∂Âà∞ÁöÑÈÄöÈÅìÊï∞ÊçÆ‰Ωú*27/20=1.35ËøêÁÆóÔºåÂç≥ËÑâÂÆΩ=0.811+CH*27/20
           =2 // ‰∏∫‰øùÊåÅÂÖºÂÆπÔºåÂêåÊó∂ÊèêÂçáÊïàÁéáÔºå‰øÆÊîπ‰∏∫*43(*43ÂèØ‰øùËØÅ10‰ΩçCHÂÄº‰∏çÊ∫¢Âá∫16‰Ωç)ÂêåÊó∂Âè≥Áßª5‰
             -Ωç=*43/32=1.34375~=1.35Ôºå
           =2 //     --> ÂêåÊó∂‰øÆÊîπÊúÄ‰ΩéËÑâÂÆΩ‰∏∫0.813‰ª•‰øùÊåÅ‰∏≠‰ΩçÂÄº1.5ms‰∏çÂèòÔºåÂç≥ËÑâÂÆΩ=0.813+CH*43>>5
           =2 #define LOLI3_RECV_SERVO_RANGE_MUL      43
           =2 #define LOLI3_RECV_SERVO_RANGE_R_SHIFT  5
           =2 // ÂàÜÊûêloli3Êé•Êî∂Êú∫Ê∫êÁ†ÅÔºåÂΩìpwmÊï∞ÂÄºÂ∞è‰∫é‰∏ÄÂÆöÂÄºÔºåÁõ¥Êé•ËæìÂá∫0„ÄÇÊ≠§ÂèÇÊï∞ÊåâÊúÄÈ´ò1023ËÆæÁΩÆ
             -„ÄÇ
           =2 #define LOLI3_RECV_PWM_MINNUM_DEFAULT   100
           =2 
           =2 /******************************************************************************/
           =2 /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
           =2 
           =2 #endif
  21      =1  #include "loli3_lib.h"
   1      =2  /*
   2      =2  ********************************************************************************
   3      =2  *                             ---ofme---
   4      =2  *           Copyleft (c) 2021, ÂæÆÈ£éÂ±±Ë∞∑ / ofourme@163.com
   5      =2  *           License: LGPL
   6      =2  *
   7      =2  *   LIB.H-V1.0.1 (2021.Dec.11th)
   8      =2  *
   9      =2  ********************************************************************************
  10      =2  */
  11      =2  
  12      =2  #ifndef __LOLI3_LIB_H__
  13      =2  #define __LOLI3_LIB_H__
  14      =2  
  15      =2  /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  16      =2  /******************************************************************************/
  17      =2  
  18      =2  #include "loli3_recv_port.h"
   1      =3  /*
   2      =3  ********************************************************************************
   3      =3  *                             ---ofme---
   4      =3  *           Copyleft (c) 2023, ÂæÆÈ£éÂ±±Ë∞∑ / ofourme@163.com
   5      =3  *           License: LGPL
   6      =3  *
   7      =3  *   LOLI3_RECV_PORT.H-V1.1.0 (2023.Oct.30th)
   8      =3  *
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 28  

   9      =3  ********************************************************************************
  10      =3  */
  11      =3  
  12      =3  #ifndef __LOLI3_RECV_PORT_H__
  13      =3  #define __LOLI3_RECV_PORT_H__
  14      =3  
  15      =3  /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  16      =3  /******************************************************************************/
  17      =3  
  18      =3  #include "hw.h"
   1      =4  /*
   2      =4  ********************************************************************************
   3      =4  *                             ---ofme---
   4      =4  *           Copyleft (c) 2021-2023, ÂæÆÈ£éÂ±±Ë∞∑ / ofourme@163.com
   5      =4  *           License: LGPL
   6      =4  *
   7      =4  *   HW.H-V1.0.0 (2023.Oct.25th)
   8      =4  *
   9      =4  ********************************************************************************
  10      =4  */
  11      =4  
  12      =4  #ifndef __HW_H__
           =4 #define __HW_H__
           =4 
           =4 /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
           =4 /******************************************************************************/
           =4 
           =4 #define STC_15W408AS    0
           =4 #define STC_15W408AS_SOP20  0
           =4 #define ARDUINO_ATMEAG328P  0
           =4 #define STC_8H        1
           =4 #define STC_8H_TSSOP20    1
           =4 
           =4 #define FOSC  12000000UL
           =4 
           =4 /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
           =4 
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 #if STC_15W408AS
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 
           =4 #include "stc15w.h"
           =4 #include<intrins.h>
           =4 
           =4 #define u8 unsigned char
           =4 #define u16 unsigned int
           =4 #define s16 signed int
           =4 #define u32 unsigned long
           =4 #define word_t u8
           =4 #define uint8_t u8
           =4 #define bool bit
           =4   
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 #elif STC_8H
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 
           =4 #include "STC8H.h"
           =4 #include<intrins.h>
           =4 
           =4 #define u8 unsigned char
           =4 #define u16 unsigned int
           =4 #define s16 signed int
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 29  

           =4 #define u32 unsigned long
           =4 #define s32 signed long
           =4 #define word_t u8
           =4 #define uint8_t u8
           =4 #define bool bit
           =4 
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 #elif ARDUINO_ATMEAG328P
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 
           =4 #include <arduino.h>
           =4 
           =4 #define u8 unsigned char
           =4 #define u16 unsigned int
           =4 #define s16 signed int
           =4 #define u32 unsigned long
           =4 #define word_t u8
           =4 #define uint8_t u8
           =4 #define idata
           =4 #define xdata
           =4 #define code
           =4 
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 
           =4 #else
           =4   #error "board not defined!"
           =4 #endif
           =4 
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 
           =4 /******************************************************************************/
           =4 /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
           =4 
           =4 #endif
  19      =3  #include "config.h"
   1      =4  /*
   2      =4  ********************************************************************************
   3      =4  *                             ---ofme---
   4      =4  *           Copyleft (c) 2021-2023, ÂæÆÈ£éÂ±±Ë∞∑ / ofourme@163.com
   5      =4  *           License: LGPL
   6      =4  *
   7      =4  *   CONFIG.H-V1.1.0 (2023.Oct.25th)
   8      =4  *
   9      =4  ********************************************************************************
  10      =4  */
  11      =4  
  12      =4  #ifndef __CONFIG_H__
           =4 #define __CONFIG_H__
           =4 
           =4 /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
           =4 /******************************************************************************/
           =4 
           =4 #include "hw.h"
           =4 #include "loli3_pact.h"
           =4 
           =4 /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
           =4 
           =4 // enable SBUS_DEBUG  would disable SBUS pin output
           =4 //#define SBUS_DEBUG
           =4 //----------------------------------------------------------------------------//
           =4 // Set the SBUS baud rate. UART always be SERIAL_8E2(8‰ΩçÊï∞ÊçÆÔºåÂÅ∂Ê†°È™åÔºå2‰ΩçÂÅúÊ≠¢‰Ωç)
           =4 // Optional: SBUS_BPS_9600, SBUS_BPS_115200, SBUS_BPS_100K; Default: SBUS_BPS_100K.
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 30  

           =4 //#define SBUS_BPS_115200
           =4 #define SBUS_BPS_100K
           =4 //----------------------------------------------------------------------------//
           =4 // ËΩÆËØ¢‰ªªÂä°ÂÆöÊó∂Âô®Ê≠•ËøõÁ≤æÂ∫¶ÔºåÈªòËÆ§3ms
           =4 #define LOLI3_RECV_TIMERS_TICK_SETPS 3
           =4 //----------------------------------------------------------------------------//
           =4 // LOLI3_RECV_PWM_MINNUM: LOLI3_RECV_PWM_MINNUM_DEFAULT would compatibility with loli3 original.
           =4 //                        0 would set the minimum if possible.  ÊëáÊùÜËôö‰ΩçÂ§ßÂèØËÉΩÂØºËá¥Êó†Ê≥ïËæìÂá∫0.
           =4 #define LOLI3_RECV_PWM_MINNUM   LOLI3_RECV_PWM_MINNUM_DEFAULT
           =4 // #define LOLI3_RECV_PWM_MINNUM 0
           =4 //----------------------------------------------------------------------------//
           =4 // Âä®ÂäõÁîµÊ±†ÁîµÈòªÂàÜÂéãÊîæÂ§ßÂÄçÊï∞ÔºåÊ≠£Â∏∏ÊòØ3„ÄÇ
           =4 #define VOLTAGE_BAT_MULTIPLE 3
           =4 //----------------------------------------------------------------------------//
           =4 // ËäØÁâáÁîµÂéãË∞ÉÊï¥Á≥ªÊï∞ÔºåÂæÆË∞ÉÊ≠§Á≥ªÊï∞‰ª•ÂåπÈÖçÂêÑ‰∏™ËäØÁâá„ÄÇ
           =4 /*
           =4   BGV: ÂÜÖÈÉ®ÂèÇËÄÉ‰ø°Âè∑Ê∫êÁîµÂéãADCÂÄºÔºõBGV5Ôºö5VÊó∂ADCÂÄºÔºõBGVxÔºöVCCÂèÇËÄÉÁîµÂéãÊó∂ËΩ¨Êç¢ÁöÑADCÂÄº
           =4   STC15W: ÂÜÖÈÉ®ÂèÇËÄÉ‰ø°Âè∑Ê∫êÁîµÂéãÂõ∫ÂÆö‰ΩÜ‰∏çÁ°ÆÂÆöÔºåÂõ∫ÂÆöÁîµÂéãVa=BGV5/1024*5=BGVx/1024*VCC
           =4           --> VCC=BGV5/1024*5*1024/BGVx=BGV5*5/BGVx
           =4   STC8H:  ÂÜÖÈÉ®ÂèÇËÄÉ‰ø°Âè∑Ê∫êÁîµÂéãÂõ∫ÂÆö(1.19v)Ôºå 1.19v=BGV5/1024*5=BGVx/1024*VCC
           =4           --> VCC=BGV5/1024*5*1024/BGVx=BGV5*5/BGVx
           =4           ÂÖ∂‰∏≠BGV5=1.19*1024/5+0.5~=244
           =4 */
           =4 #if STC_15W408AS
           =4   #define BGV5  260
           =4 #elif STC_8H
           =4   #define BGV5  ((unsigned long)(1.19*1024/5+0.5))
           =4 #else
           =4   #err "BGV5 not defined."
           =4 #endif
           =4   // Ê≠§Â§Ñ5‰∏é5VÁîµÂéãÂåπÈÖçÔºå‰º†ËæìÁîµÂéãÊï∞ÊçÆÈúÄÊâ©Â§ß100ÂÄç‰ª•‰øùÁïôÂ∞èÊï∞ÁÇπÂêé2‰ΩçÔºåËÄåËæìÂÖ•adcÂÄ
             -ºÊª§Ê≥¢ÂêéÊâ©Â§ß8ÂÄçÔºå‰∏∫Áªü‰∏ÄÂçï‰ΩçÊïÖ*5*100*8
           =4 #define VOLTAGE_IC_ADJUST ((5ul*100*8)*BGV5)
           =4 //----------------------------------------------------------------------------//
           =4 
           =4 #ifdef SBUS_DEBUG
           =4   #define DBG(str) hw_uart_puts(str)
           =4 #else
           =4   #define DBG(str)
           =4 #endif
           =4 
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 #if STC_15W408AS
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 
           =4 #if STC_15W408AS_SOP20
           =4 //ÂÆö‰πâÊåáÁ§∫ÁÅØ
           =4 sbit LED=P1^0;
           =4 //ÂÆö‰πâ8‰∏™ÈÄöÈÅìËæìÂá∫
           =4 sbit CH1=P3^7;
           =4 sbit CH2=P3^6;
           =4 sbit CH3=P3^5;
           =4 sbit CH4=P3^4;
           =4 sbit CH5=P3^3;
           =4 sbit CH6=P3^2;
           =4 sbit CH7=P3^1;
           =4 sbit CH8=P3^0;
           =4 
           =4 sbit CH9=P5^4;
           =4 sbit CH10=P5^5;
           =4 
           =4 //ÂÆö‰πâÊó†Á∫øÊ®°ÂùóÁöÑÁÆ°ËÑö
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 31  

           =4 sbit CE  =P1^2;
           =4 sbit SCK =P1^4;
           =4 sbit MISO=P1^6;
           =4 sbit IRQ =P1^7;
           =4 sbit MOSI=P1^5;
           =4 sbit CSN =P1^3;
           =4 
           =4 #else
           =4 //ÂÆö‰πâÊåáÁ§∫ÁÅØ
           =4 sbit LED=P1^2;
           =4 //ÂÆö‰πâ8‰∏™ÈÄöÈÅìËæìÂá∫
           =4 sbit CH1=P3^7;
           =4 sbit CH2=P3^6;
           =4 sbit CH3=P3^5;
           =4 sbit CH4=P3^4;
           =4 sbit CH5=P3^3;
           =4 sbit CH6=P3^2;
           =4 sbit CH7=P3^1;
           =4 sbit CH8=P3^0;
           =4 //ÂÆö‰πâÊó†Á∫øÊ®°ÂùóÁöÑÁÆ°ËÑö
           =4 sbit CE  =P5^5;
           =4 sbit SCK =P5^4;
           =4 sbit MISO=P1^7;
           =4 sbit IRQ =P1^6;
           =4 sbit MOSI=P1^5;
           =4 sbit CSN =P1^4;
           =4 
           =4 #endif
           =4 
           =4 /*////////////////////////////////////*/
           =4 // Ê†πÊçÆÁ°¨‰ª∂ÂÆûÈôÖÊÉÖÂÜµÊù°‰ª∂ÁºñËØë
           =4 // PIN_CH5/PIN_CH_OUTÁî®‰∫éËæìÂá∫ÔºåPIN_CH6/PIN_CH_INÁî®‰∫éËæìÂÖ•„ÄÇÊé•Êî∂Êú∫ÂêØÂä®Êó∂Â¶ÇÊûúÊ£ÄÊµãÂà∞CH5„Ä
             -ÅCH6Áü≠Êé•ÔºåÂàôÈáçÊñ∞ÈÖçÂØπ„ÄÇ
           =4 #define PIN_CH_OUT_P33
           =4 #define PIN_CH_IN_P32
           =4 // Âä®ÂäõÁîµÊ±†ÁîµÂéãÊ£ÄÊµãÂºïËÑöP1.1
           =4 #define PIN_ADC_P1X 1
           =4 // EEPROMÈ°µÈù¢Â§ßÂ∞è
           =4 #define SIZE_STC_EEPROM_PAGE  512
           =4 #define SIZE_EEPROM_PAGE      SIZE_STC_EEPROM_PAGE
           =4 // Áä∂ÊÄÅÁÅØÈ©±Âä®
           =4 #define LED_ON()  do{LED = 1;}while(0)
           =4 #define LED_OFF() do{LED = 0;}while(0)
           =4 
           =4 /*////////////////////////////////////*/
           =4 #define FUNC_MILLIS_EN  0
           =4 #define FUNC_MICROS_EN  1
           =4 #define FUNC_DELAY_EN   1
           =4 #define FUNC_DELAYMICROSECONDS_EN 0
           =4 
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 #elif STC_8H
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 
           =4 #if STC_8H_TSSOP20
           =4 
           =4 sbit LED=P1^2;
           =4 
           =4 sbit CH1=P5^4;
           =4 sbit CH2=P1^7;
           =4 sbit CH3=P1^0;
           =4 sbit CH4=P3^7;
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 32  

           =4 sbit CH5=P3^6;
           =4 sbit CH6=P3^4;
           =4 sbit CH7=P3^3;
           =4 sbit CH8=P3^0;
           =4 
           =4 sbit CHx=P3^1;
           =4 
           =4 sbit CE  =P3^2;
           =4 sbit SCK =P1^5;
           =4 sbit MISO=P1^4;
           =4 sbit IRQ =P1^6;
           =4 sbit MOSI=P1^3;
           =4 sbit CSN =P3^5;
           =4 
           =4 #else
           =4 #endif
           =4 
           =4 /*////////////////////////////////////*/
           =4 // ÂÜçÊ¨°ÂÆö‰πâVOLTAGE_BAT_MULTIPLEÔºåË¶ÜÁõñÊéâÂâçÈù¢ÁöÑÊï∞ÊçÆ
           =4 #if defined  VOLTAGE_BAT_MULTIPLE
           =4 #define VOLTAGE_BAT_MULTIPLE 4
           =4 #endif
           =4 #define PIN_CH_OUT_P37
           =4 #define PIN_CH_IN_P36
           =4 #define PIN_ADC_P1X 1
           =4 #define SIZE_STC_EEPROM_PAGE  512
           =4 #define SIZE_EEPROM_PAGE      SIZE_STC_EEPROM_PAGE
           =4 #define LED_ON()  do{LED = 1;}while(0)
           =4 #define LED_OFF() do{LED = 0;}while(0)
           =4 
           =4 /*////////////////////////////////////*/
           =4 #define FUNC_MILLIS_EN  0
           =4 #define FUNC_MICROS_EN  1
           =4 #define FUNC_DELAY_EN   1
           =4 #define FUNC_DELAYMICROSECONDS_EN 0
           =4 
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 #elif ARDUINO_ATMEAG328P
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 
           =4 #define DEF_SPI_SOFT
           =4 //ÂÆö‰πâÊåáÁ§∫ÁÅØ
           =4 #define LED 13
           =4 //ÂÆö‰πâ8‰∏™ÈÄöÈÅìËæìÂá∫
           =4 //ÂÆö‰πâÊó†Á∫øÊ®°ÂùóÁöÑÁÆ°ËÑö
           =4 #define IRQ   2
           =4 #define MISO  3
           =4 #define MOSI  4
           =4 #define SCK   5
           =4 #define CSN   6
           =4 #define CE    7
           =4 
           =4 /*////////////////////////////////////////////////////////////////////////////*/
           =4 #endif
           =4 /******************************************************************************/
           =4 /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
           =4 
           =4 #endif
  20      =3  
  21      =3  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  22      =3  
  23      =3  #define UART_BPS_100K 0
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 33  

  24      =3  #define UART_BPS_9600 1
  25      =3  #define UART_BPS_115200 2
  26      =3  
  27      =3  /*////////////////////////////////////////////////////////////////////////////*/
  28      =3  
  29      =3  // Á≥ªÁªüÂàùÂßãÂåñÂáΩÊï∞
  30      =3  void hw_sys_init();
  31      =3  //----------------------------------------------------------------------------//
  32      =3  // Âü∫Á°ÄÂäüËÉΩÂáΩÊï∞
  33      =3  void hw_delay_1ms(void);
  34      =3  void hw_delay_ms(u8 ms);
  35      =3  //----------------------------------------------------------------------------//
  36      =3  // Á´ØÂè£ÂàùÂßãÂåñÂèäËæìÂÖ•ËæìÂá∫ÂáΩÊï∞
  37      =3  void hw_io_chs_init();
  38      =3  // CHÂè£Êé®ÊåΩËæìÂá∫
  39      =3  void hw_io_chs_pushpull();
  40      =3    // ËæìÂá∫Âè£
  41      =3  void hw_io_cho_init();
  42      =3  void hw_io_cho_clr();
  43      =3  void hw_io_cho_set();
  44      =3    // ËæìÂÖ•Âè£
  45      =3  void hw_io_chi_init();
  46      =3  u8   hw_io_chi_get();
  47      =3  //----------------------------------------------------------------------------//
  48      =3  // ‰∏≤Âè£ÂàùÂßãÂåñÂèäËæìÂá∫ÂáΩÊï∞
  49      =3  #define UART_BPS_100K 0
  50      =3  #define UART_BPS_9600 1
  51      =3  #define UART_BPS_115200 2
  52      =3  void hw_uart_init(u8 bps);      // bpsÂèØÈÄâÂÄº[UART_BPS_100K, UART_BPS_9600, UART_BPS_115200]
  53      =3  void UART_pushByte(char c);     // push a byte into UART then return, not waitting for finished
  54      =3  void hw_uart_puts(const char* str);
  55      =3  //----------------------------------------------------------------------------//
  56      =3  // ÁîµÂéãADCÂäüËÉΩÂàùÂßãÂåñÂèäËØªÂèñÂáΩÊï∞
  57      =3  void hw_adc_init();
  58      =3  void hw_adc_open(u8 i); // adcËΩ¨Êç¢È¢ÑÂêØÂä®ÔºåÂáèÂ∞ëadc_readÁ≠âÂæÖÊó∂Èó¥„ÄÇ//0ÔºöÂÜÖÈÉ®ÂèÇËÄÉÁîµÂéãÔºõ1Ô
             -ºöÂ§ñÈÉ®ÁîµÂéã
  59      =3  u16  hw_adc_read();     // Êé•Êî∂Êú∫Á®ãÂ∫èÂØπADCËøîÂõûÊï∞ÊçÆÊåâ10‰ΩçÂ§ÑÁêÜÔºåÁßªÊ§ç‰∏çÂêåÁ°¨‰ª∂ÈúÄÊ≥®ÊÑè‰øùÊ
             -åÅ‰∏ÄËá¥„ÄÇ
  60      =3  //----------------------------------------------------------------------------//
  61      =3  // Á≥ªÁªüÂøÉË∑≥ÂäüËÉΩÂàùÂßãÂåñ
  62      =3  void hw_tick_init();
  63      =3      //ÂêØÂä®Á≥ªÁªüÂë®ÊúüÊÄß‰ªªÂä°ÔºàPCAÊéßÂà∂ÂØÑÂ≠òÂô®ÔºöÂêØÂä®PCAÂÆöÊó∂Âô®ÔºåÊ∏ÖÈô§‰∏≠Êñ≠Ê†áÂøóÔºâ
  64      =3      //void hw_tick_en() // #define hw_tick_en()     do{CCON =0x40;}while(0)
  65      =3  
  66      =3  //ÂÖºÂÆπarduinoÁöÑÊó∂Èó¥ÂáΩÊï∞Ôºå‰æùËµñ‰∫éhw_tick_init()
  67      =3  #if FUNC_MILLIS_EN
           =3 u32  millis(void);
           =3 #endif
  70      =3  #if FUNC_MICROS_EN
  71      =3  u16  micros(void);
  72      =3  #endif
  73      =3  #if FUNC_DELAY_EN
  74      =3  void delay(u16 ms);
  75      =3  #endif
  76      =3  #if FUNC_DELAYMICROSECONDS_EN
           =3 void delayMicroseconds(u16 us);
           =3 #endif
  79      =3  
  80      =3  //----------------------------------------------------------------------------//
  81      =3  // ÈÄöÈÅìËàµÈáèËæìÂá∫/pwmËæìÂá∫ÂäüËÉΩÂàùÂßãÂåñÂèä‰ΩøËÉΩ
  82      =3  void hw_output_init();
  83      =3      //ÂêØÂä®CHÈÄöÈÅìËæìÂá∫ÔºàÂêØÂä®T0ÔºåT0‰∏≠Êñ≠ÂáΩÊï∞ÊéßÂà∂ËæìÂá∫Ôºâ
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 34  

  84      =3      //void hw_output_en();
  85      =3  //ÈÄöÈÅìchËåÉÂõ¥[0,7]ÂØπÂ∫î[CH1,CH8]; STC15WÂÆûÁé∞CH1&CH2ÔºåSTC8HÂÆûÁé∞CH1&CH2&CH6&CH7
  86      =3  //ÈÄöÈÅìpwmËåÉÂõ¥[0,255]
  87      =3  void hw_pwm_en (u8 ch);
  88      =3  void hw_pwm_dis(u8 ch);
  89      =3  void hw_pwm_set(u8 ch, u8 pwm);
  90      =3  //----------------------------------------------------------------------------//
  91      =3  // Áä∂ÊÄÅÁÅØÊìç‰ΩúÂáΩÊï∞
  92      =3  void LED_on(void);
  93      =3  void LED_off(void);
  94      =3  //----------------------------------------------------------------------------//
  95      =3  // Á≥ªÁªüEEPROMÂäüËÉΩÂáΩÊï∞
  96      =3  u8   EEPROM_read (u16 addr);
  97      =3  void EEPROM_write(u16 addr,u8 byte);
  98      =3  void EEPROM_cleanPage(u8 addPage);
  99      =3  #if 0
           =3 void EEPROM_begin();
           =3 void EEPROM_end();
           =3 void DATA_mutex_get();
           =3 void DATA_mutex_release();
           =3 #elif 0
           =3 #define EEPROM_begin()        do{IAP_CONTR=0x83;}while(0)
           =3 #define EEPROM_end()          do{IAP_CONTR=0x00;}while(0)
           =3 #define DATA_mutex_get()      do{EA = 0;}while(0)
           =3 #define DATA_mutex_release()  do{EA = 1;}while(0)
           =3 #endif
 110      =3  //----------------------------------------------------------------------------//
 111      =3  
 112      =3  // NRF24L01 SPIÁ´ØÂè£IOÊ®°ÂºèÂàùÂßãÂåñ
 113      =3  void SPI_init_0(void);
 114      =3  void SPI_init_1(void);
 115      =3  
 116      =3  /*////////////////////////////////////////////////////////////////////////////*/
 117      =3  #if STC_15W408AS
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 
           =3 // 24L01 IRQ ËæìÂá∫1Ë°®Á§∫Ê≤°Êúâ‰∏≠Êñ≠ÂèëÁîü
           =3 #define noRF()          IRQ
           =3 #define SPI_MISO_GET()  MISO
           =3 // stc51 uart Âè£ËæìÂá∫0Â∞ÜÂØºËá¥‰∏≤Âè£Êó†Ê≥ïËæìÂá∫ÔºåÈáçÁΩÆ‰∏∫1‰øùËØÅ‰∏≤Âè£Ê≠£Â∏∏Â∑•‰Ωú
           =3 #define PIN_SBUS_SET()  CH7=1
           =3 #define PIN_PPM_SET()   CH1=1
           =3 #define PIN_PPM_CLR()   CH1=0
           =3 
           =3 #define hw_tick_en()          do{CCON =0x40;}while(0)
           =3 #define hw_output_en()        do{TR0=1;}while(0)
           =3 #define EEPROM_begin()        do{IAP_CONTR=0x83;}while(0)
           =3 #define EEPROM_end()          do{IAP_CONTR=0x00;}while(0)
           =3 //#define DATA_mutex_get()      do{EA = 0;}while(0)
           =3 //#define DATA_mutex_release()  do{EA = 1;}while(0)
           =3 //ÂÅáËÆæÊï∞ÊçÆ‰ªÖÂú®T0‰∏≠Êñ≠‰∏≠Ë¢´‰ΩøÁî®ÔºåÂú®Â§öÂ≠óËäÇÊï∞ÊçÆ‰øÆÊîπÂâç‰ªÖÁ¶ÅÊ≠¢T0‰∏≠Êñ≠ËÄå‰∏çÊòØÁ¶ÅÊ≠¢ÊâÄÊ
             -úâ‰∏≠Êñ≠ÔºåÈÅøÂÖç‰ΩøÁî®Âà∞ÈîôËØØÁöÑÊï∞ÊçÆ„ÄÇ
           =3 #define DATA_mutex_get()      do{ET0 = 0;}while(0)
           =3 #define DATA_mutex_release()  do{ET0 = 1;}while(0)
           =3 
           =3 //----------------------------------------------------------------------------//
           =3 // port for stc15w
           =3 #define NSS CSN
           =3 #define SPI_SLAVE_EN()  do{NSS =0;}while(0)
           =3 #define SPI_SLAVE_DIS() do{NSS =1;}while(0)
           =3 #define SPI_SCK_SET()   do{SCK =1;}while(0)
           =3 #define SPI_SCK_CLR()   do{SCK =0;}while(0)
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 35  

           =3 #define SPI_MOSI_SET()  do{MOSI=1;}while(0)
           =3 #define SPI_MOSI_CLR()  do{MOSI=0;}while(0)
           =3 
           =3 #define NRF_CE_SET()    do{CE = 1;}while(0)
           =3 #define NRF_CE_CLR()    do{CE = 0;}while(0)
           =3 
           =3 //----------------------------------------------------------------------------//
           =3 #define INTERRUPT_dis() do{EA = 0;}while(0)
           =3 #define INTERRUPT_en()  do{EA = 1;}while(0)
           =3 
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 #elif STC_8H
 157      =3  /*////////////////////////////////////////////////////////////////////////////*/
 158      =3  
 159      =3  #define noRF()                IRQ
 160      =3  #define SPI_MISO_GET()        MISO
 161      =3  #define PIN_SBUS_SET()        CHx=1
 162      =3  #define PIN_PPM_SET()         CHx=1
 163      =3  #define PIN_PPM_CLR()         CHx=0
 164      =3  // ÂêØÂä®ÂÆöÊó∂Âô®T1
 165      =3  #define hw_tick_en()          do{TR1=1;}while(0)
 166      =3  #define hw_output_en()        do{TR0=1;}while(0)
 167      =3  // stc8h ‰∏é stc15w eeprom‰∏çÂÖºÂÆπÈúÄË¶ÅÊ≥®ÊÑè
 168      =3  #define EEPROM_begin()        do{IAP_TPS=((FOSC+500000)/1000000);IAP_CONTR=0x80;}while(0)
 169      =3  #define EEPROM_end()          do{IAP_CONTR=0x00;}while(0)
 170      =3  #define DATA_mutex_get()      do{ET0 = 0;}while(0)
 171      =3  #define DATA_mutex_release()  do{ET0 = 1;}while(0)
 172      =3  #define NSS                   CSN
 173      =3  #define SPI_SLAVE_EN()        do{NSS =0;}while(0)
 174      =3  #define SPI_SLAVE_DIS()       do{NSS =1;}while(0)
 175      =3  #define SPI_SCK_SET()         do{SCK =1;}while(0)
 176      =3  #define SPI_SCK_CLR()         do{SCK =0;}while(0)
 177      =3  #define SPI_MOSI_SET()        do{MOSI=1;}while(0)
 178      =3  #define SPI_MOSI_CLR()        do{MOSI=0;}while(0)
 179      =3  #define NRF_CE_SET()          do{CE = 1;}while(0)
 180      =3  #define NRF_CE_CLR()          do{CE = 0;}while(0)
 181      =3  #define INTERRUPT_dis()       do{EA = 0;}while(0)
 182      =3  #define INTERRUPT_en()        do{EA = 1;}while(0)
 183      =3  
 184      =3  /*////////////////////////////////////////////////////////////////////////////*/
 185      =3  #elif ARDUINO_ATMEAG328P
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 
           =3 #define noRF()          digitalRead(IRQ)
           =3 //LED
           =3 #define LED_ON()        digitalWrite(LED, HIGH)
           =3 #define LED_OFF()       digitalWrite(LED, LOW)
           =3 
           =3 // port for arduino
           =3 //NRF24L01
           =3 #define SPI_SLAVE_EN()  digitalWrite(CSN, LOW)
           =3 #define SPI_SLAVE_DIS() digitalWrite(CSN, HIGH)
           =3 #define NRF_CE_SET()    digitalWrite(CE, HIGH)
           =3 #define NRF_CE_CLR()    digitalWrite(CE, LOW)
           =3 
           =3 #ifdef DEF_SPI_SOFT
           =3 #define SPI_SCK_SET()   digitalWrite(SCK, HIGH)
           =3 #define SPI_SCK_CLR()   digitalWrite(SCK, LOW)
           =3 #define SPI_MOSI_SET()  digitalWrite(MOSI, HIGH)
           =3 #define SPI_MOSI_CLR()  digitalWrite(MOSI, LOW)
           =3 #define SPI_MISO_GET()  digitalRead(MISO)
           =3 #endif
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 36  

           =3 
           =3 
           =3 #define EEPROM_begin()
           =3 #define EEPROM_end()
           =3 #define DATA_mutex_get()
           =3 #define DATA_mutex_release()
           =3 
           =3 #define SIZE_STC_EEPROM_PAGE  512
           =3 #define SIZE_EEPROM_PAGE      SIZE_STC_EEPROM_PAGE
           =3 
           =3 #define INTERRUPT_dis()
           =3 #define INTERRUPT_en()
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 #endif
 221      =3  /******************************************************************************/
 222      =3  /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
 223      =3  
 224      =3  #endif
  19      =2  #include "loli3_pact.h"
   1      =3  /*
   2      =3  ********************************************************************************
   3      =3  *                             ---ofme---
   4      =3  *           Copyleft (c) 2008-2023, ÂæÆÈ£éÂ±±Ë∞∑/ofourme@163.com
   5      =3  *           License: LGPL
   6      =3  *
   7      =3  *   LOLI3_PACT.H-V1.1.0 (2023.Sep.18th)
   8      =3  *
   9      =3  ********************************************************************************
  10      =3  */
  11      =3  
  12      =3  #ifndef __LOLI3_PACT_H__
           =3 #define __LOLI3_PACT_H__
           =3 
           =3 /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
           =3 /******************************************************************************/
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 
           =3 //‰ΩøÁî®‚ÄúLOVE‚Äù‰Ωú‰∏∫ÈªòËÆ§Âú∞ÂùÄ
           =3 #define LOLI3_ADDRESS_STARTUP           'L','O','V','E','!'
           =3 #define LOLI3_NRF_DATA_LENGTH           11
           =3 
           =3 //‰ΩøÁî®33È¢ëÈÅì‰Ωú‰∏∫Êé•Êî∂Êú∫ÈáçËøûCHANNEL
           =3 #define LOLI3_CHANNEL_STARTUP           33
           =3 //‰ΩøÁî®66È¢ëÈÅì‰Ωú‰∏∫Êé•Êî∂Êú∫ÂêØÂä®CHANNEL
           =3 #define LOLI3_CHANNEL_CONNECT           66
           =3 //Ë∑≥È¢ëCHANNELÊï∞Èáè
           =3 #define LOLI3_NUM_HOPPING               5
           =3 //ÈªòËÆ§Áî®‰∫éË∑≥È¢ëÁöÑ5‰∏™CHANNEL
           =3 #define LOLI3_HOPPING_STARTUP           10,35,60,85,110
           =3 
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 // update(20230918):
           =3 // ËàµÊú∫ËæìÂÖ•ËÑâÂÆΩ0.5~2.5msÔºåÂë®Êúü20msÔºõËà™Ê®°ËàµÊú∫‰∏ÄËà¨‰ΩøÁî®ËÑâÂÆΩ1~2ms„ÄÇ
           =3 // loli3Êé•Êî∂Êú∫ÂØπÊé•Êî∂Âà∞ÁöÑÈÄöÈÅìÊï∞ÊçÆ‰Ωú*27/20=1.35ËøêÁÆóÔºåÂç≥ËÑâÂÆΩ=0.811+CH*27/20
           =3 // ‰∏∫‰øùÊåÅÂÖºÂÆπÔºåÂêåÊó∂ÊèêÂçáÊïàÁéáÔºå‰øÆÊîπ‰∏∫*43(*43ÂèØ‰øùËØÅ10‰ΩçCHÂÄº‰∏çÊ∫¢Âá∫16‰Ωç)ÂêåÊó∂Âè≥Áßª5‰
             -Ωç=*43/32=1.34375~=1.35Ôºå
           =3 //     --> ÂêåÊó∂‰øÆÊîπÊúÄ‰ΩéËÑâÂÆΩ‰∏∫0.813‰ª•‰øùÊåÅ‰∏≠‰ΩçÂÄº1.5ms‰∏çÂèòÔºåÂç≥ËÑâÂÆΩ=0.813+CH*43>>5
           =3 #define LOLI3_RECV_SERVO_RANGE_MUL      43
           =3 #define LOLI3_RECV_SERVO_RANGE_R_SHIFT  5
           =3 // ÂàÜÊûêloli3Êé•Êî∂Êú∫Ê∫êÁ†ÅÔºåÂΩìpwmÊï∞ÂÄºÂ∞è‰∫é‰∏ÄÂÆöÂÄºÔºåÁõ¥Êé•ËæìÂá∫0„ÄÇÊ≠§ÂèÇÊï∞ÊåâÊúÄÈ´ò1023ËÆæÁΩÆ
             -„ÄÇ
           =3 #define LOLI3_RECV_PWM_MINNUM_DEFAULT   100
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 37  

           =3 
           =3 /******************************************************************************/
           =3 /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
           =3 
           =3 #endif
  20      =2  
  21      =2  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  22      =2  
  23      =2  typedef struct
  24      =2  {
  25      =2    u8  isRuning;
  26      =2    u8  isTimeout;
  27      =2    u16 count;
  28      =2    u16 reload;
  29      =2    void (*callback)(void);
  30      =2  
  31      =2  } STimer;
  32      =2  
  33      =2  /*////////////////////////////////////////////////////////////////////////////*/
  34      =2  u8    EEPROM_test (void);
  35      =2  void  LED_flash(u8 t);
  36      =2  char* Int16ToStr(u16 i);
  37      =2  /*----------------------------------------------------------------------------*/
  38      =2  //NRF24L01Âü∫Á°ÄÂáΩÊï∞
  39      =2  
  40      =2  void NRF_init(void);
  41      =2  
  42      =2  u8   NRF_REG_read(u8 address);
  43      =2  void NRF_REG_write(u8 address,u8 command);
  44      =2  void NRF_FIFO_write(u8 DATA_OUT[],u8 lengh);
  45      =2  void NRF_FIFO_read(u8 DATA_IN[],u8 lengh);
  46      =2  void NRF_addr_tx(u8 DATA_IN[]);
  47      =2  void NRF_addr_rx(u8 DATA_IN[]);
  48      =2  void NRF_mode_rx();
  49      =2  void NRF_mode_tx();
  50      =2  void NRF_power(u8 P);
  51      =2  void NRF_channel(u8 c);
  52      =2  void NRF_irq_clean(void);
  53      =2  void NRF_reset();
  54      =2  
  55      =2  #define NRF_BAD_CSNCLK  0x01
  56      =2  #define NRF_BAD_MOSI    0x02
  57      =2  #define NRF_BAD_CE      0x04
  58      =2  #define NRF_BAD_IRQ     0x08
  59      =2  #define NRF_BAD_MISO    0x10
  60      =2  #define NRF_BAD_RESET   0x80
  61      =2  u8      NRF_test();
  62      =2  
  63      =2  /*----------------------------------------------------------------------------*/
  64      =2  void timer_init(STimer* pTimers, u8 numTimers);
  65      =2  void timer_cbRegist(u8 index, void (*callback)(void));
  66      =2  void timer_startOnce(u8 index, u16 ms);
  67      =2  void timer_startTimes(u8 index, u16 ms, u8 times);
  68      =2  void timer_startCycle(u8 index, u16 ms);
  69      =2  void timer_tick();  // called by ISR
  70      =2  void timer_process();
  71      =2  
  72      =2  /******************************************************************************/
  73      =2  /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  74      =2  
  75      =2  #endif
  22      =1  
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 38  

  23      =1  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  24      =1  
  25      =1  typedef struct
  26      =1  {
  27      =1    u8 isValid;
  28      =1    u8 hopping[LOLI3_NUM_HOPPING];    // È¢ëÈÅì/channelÊï∞ÁªÑÔºåÂæ™ÁéØ‰ΩøÁî®
  29      =1    u8 address[5];    // Êé•Êî∂Êú∫Âú∞ÂùÄ
  30      =1    u8 SBUS;          // ÊòØÂê¶SBUSËæìÂá∫
  31      =1    u8 PPM;           // ÊòØÂê¶PPMËæìÂá∫
  32      =1    u8 CH1_PWM,CH2_PWM,CH7_PWM; // ÊòØÂê¶PMWËæìÂá∫ÔºàCH7ËæìÂá∫Êó†ÊïàÔºåÊ≠§Â§Ñ‰ªÖ‰∏∫ÂÖºÂÆπLoli3ÂèëÈÄÅÊú∫ÔºåÂêå
             -Êó∂‰øùËØÅout_control_dataÂ≠óËäÇÂØπÈΩêÔºâ
  33      =1    u8 CH1_SW,CH2_SW,CH3_SW,CH4_SW,CH5_SW,CH6_SW,CH7_SW,CH8_SW; // ÊòØÂê¶ÂºÄÂÖ≥ÈáèËæìÂá∫
  34      =1    u16 out_control_data[8];
  35      =1  #if STC_8H
  36      =1    u8 CH6_PWM; // STC8HÊñ∞Â¢ûCH6/CH7ËæìÂá∫PWMÔºåÂÖ∂‰∏≠CH6ËæìÂá∫ÈúÄË¶Å‰øÆÊîπÂèëÂ∞ÑÊú∫Á®ãÂ∫èÂ¢ûÂä†Áõ∏ÂÖ≥„ÄÇ
  37      =1  #endif
  38      =1    
  39      =1  } Loli3RecvSet;   // Êé•Êî∂Êú∫ËÆæÁΩÆÔºå‰øùÂ≠òÂú®EEPROMÈáå
  40      =1  
  41      =1  typedef struct
  42      =1  {
  43      =1    u16 CH_data[8];   // ÈÄöÈÅìÊï∞ÂÄº[0:1023]
  44      =1    u16 voltage_ic, voltage_batt; // ËäØÁâáÁîµÂéã,ÁîµÊ±†ÁîµÂéãÔºöÊï∞ÂÄºÊâ©Â§ß100ÂÄçÔºåÂ¶Ç125Ë°®Á§∫1.25V
  45      =1    u16 adc_ic, adc_batt;         // ÁîµÂéãadcËΩ¨Êç¢Êª§Ê≥¢Êï∞ÊçÆÊöÇÂ≠ò
  46      =1    u8  rx_num;       // ÊØèÁßíÊé•Êî∂Âà∞ÂèëÈÄÅÊú∫Êï∞ÊçÆÊ¨°Êï∞
  47      =1    u8  SBUS_tx[25];  // ÈÄöÈÅìÊï∞ÂÄºËΩ¨Êç¢‰∏∫SBUSÊï∞ÁªÑ
  48      =1    u8  stateLED;     // LEDÁä∂ÊÄÅ
  49      =1    u8  stateNRF;
  50      =1    u8  stateOUTPUT;
  51      =1    u8  isOutputChanged;
  52      =1  
  53      =1  } Loli3RecvData;  // Êé•Êî∂Êú∫Âä®ÊÄÅÊï∞ÊçÆ
  54      =1  
  55      =1  typedef struct
  56      =1  {
  57      =1    u8 rx[LOLI3_NRF_DATA_LENGTH];
  58      =1    u8 tx[LOLI3_NRF_DATA_LENGTH];
  59      =1    u8 rx_cnt;        // ÂèëÈÄÅÊú∫‰ø°Âè∑ËÆ°Êï∞Âô®
  60      =1    u8 hopping_cnt;   // ‰ø°Âè∑‰∏¢Â§±Ë∑≥È¢ëËÆ°Êï∞Âô®
  61      =1    u8 channel_index; // È¢ëÈÅìÁ¥¢Âºï
  62      =1  
  63      =1  } Loli3RecvNrf;     // Êó†Á∫øÊ®°ÂùóÊï∞ÊçÆ
  64      =1  
  65      =1  typedef enum {STATE_LED_OFF=0, STATE_LED_FLASH, STATE_LED_ON, STATE_LED_IDLE} E_STATE_LED;
  66      =1  typedef enum {STATE_NRF_INIT=0, STATE_NRF_RX, STATE_NRF_TX, STATE_NRF_TX_WAIT, STATE_NRF_DATA_PROC} E_STAT
             -E_NRF;
  67      =1  typedef enum {STATE_OUTPUT_SERVO=0, STATE_OUTPUT_PPM, STATE_OUTPUT_SBUS} E_STATE_OUTPUT;
  68      =1  typedef enum {TIMER_LED_FLASH=0, TIMER_SIGNAL_COUNT, TIMER_SIGNAL_LOST, TIMER_DATA_SAVE,  TIMER_LED_OFF, T
             -IMER_CHANNEL_LOST, TIMER_ADC, NUM_TIMERS} E_TIMER;
  69      =1  
  70      =1  /*////////////////////////////////////////////////////////////////////////////*/
  71      =1  #ifdef __LOLI3_RECV_C__
           =1 /*----------------------------------------------------------------------------*/
           =1 
           =1 // ‰º™ÈöèÊú∫Ë∑≥È¢ëÁ¥¢Âºï
           =1 const u8 code _random_hopping_index[100]={
           =1           4,1,3,2,2,1,0,0,2,2,2,3,4,1,2,1,4,3,3,4,//ÈöèÊú∫Ë∑≥È¢ëÂ∫èÂàó
           =1           2,0,2,2,3,1,2,3,2,2,2,4,2,4,0,3,4,2,3,1,
           =1           0,3,1,3,3,0,2,0,4,3,3,3,3,3,4,1,1,4,3,0,
           =1           1,0,3,2,3,2,3,3,4,4,1,3,0,0,3,1,3,3,3,0,
           =1           3,3,4,1,2,4,1,3,0,1,3,4,4,3,2,3,1,2,3,3};
           =1 
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 39  

           =1 // ÂºÄÊú∫Âú∞ÂùÄ
           =1 const u8 code recv_address_startup[5]={LOLI3_ADDRESS_STARTUP};
           =1 
           =1 //ÁªìÊûÑ‰ΩìÊú™ËµãÂÄºÊàêÂëòÈªòËÆ§‰∏∫0
           =1 Loli3RecvSet xdata  recvSet = {0,LOLI3_HOPPING_STARTUP,LOLI3_ADDRESS_STARTUP,0,0,0,0,0,511,511,0,511,511,5
             -11,511,511};
           =1 Loli3RecvData       recv    = {0,1023,0,1023,0,1023,0,0};
           =1 Loli3RecvNrf  xdata nrf     = {0};
           =1 
           =1 STimer idata timer[NUM_TIMERS];
           =1 
           =1 // ËäØÁâáÁîµÂéã„ÄÅÂä®ÂäõÁîµÊ±†ÁîµÂéã ADC ÁºìÂ≠ò
           =1 u16 _adc_ic,_adc_batt;
           =1 
           =1 /*----------------------------------------------------------------------------*/
           =1 #else
  97      =1  /*----------------------------------------------------------------------------*/
  98      =1  
  99      =1  extern Loli3RecvSet  xdata recvSet;
 100      =1  extern Loli3RecvData recv;
 101      =1  extern Loli3RecvNrf  xdata nrf;
 102      =1  extern u16 _adc_ic;
 103      =1  extern u16 _adc_batt;
 104      =1  
 105      =1  /*----------------------------------------------------------------------------*/
 106      =1  #endif
 107      =1  /*////////////////////////////////////////////////////////////////////////////*//*////////////////////////
             -////////////////////////////////////////////////////*/
 108      =1  
 109      =1  void DATA_read();
 110      =1  void DATA_save();
 111      =1  
 112      =1  void callback_timer_signal_count(void);
 113      =1  void callback_timer_signal_lost(void);
 114      =1  void callback_timer_data_save(void);
 115      =1  void callback_timer_led_off(void);
 116      =1  void callback_timer_channel_lost(void);
 117      =1  void callback_timer_adc(void);
 118      =1  void timers_init();
 119      =1  
 120      =1  /*////////////////////////////////////////////////////////////////////////////*/
 121      =1  
 122      =1  void SBUS_data_push();
 123      =1  
 124      =1  void recv_connect();
 125      =1  void recv_reconnect();
 126      =1  void recv_init();
 127      =1  void recv_begin(void);
 128      =1  #if 0
           =1 void recv_nrf_read(void);
           =1 void recv_nrf_write(void);
           =1 #endif
 132      =1  /*////////////////////////////////////////////////////////////////////////////*/
 133      =1  
 134      =1  
 135      =1  
 136      =1  /******************************************************************************/
 137      =1  /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
 138      =1  
 139      =1  #endif
  19          
  20          /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 40  

  21          // ‰ª•‰∏ãÂèòÈáèÂú®loli3_recv_sys‰∏≠ÂÆö‰πâÔºå‰ªÖÂú®loli3_recv_sys‰∏éloli3_recv_isr‰∏≠‰ΩøÁî®„ÄÇ
  22          // Â£∞ÊòéÁ±ªÂûãÂä°ÂøÖÊ≥®ÊÑè‰∏éloli3_recv_sys‰øùÊåÅ‰∏ÄËá¥„ÄÇ
  23          
  24          extern idata volatile u32 _sys_ms;        // ÂΩìÂâçmsÂÄº
  25          extern idata volatile u16 _sys_us_target; // ‰∏≠Êñ≠ÂèëÁîüÁõÆÊ†áusÂÄº
  26          
  27          /*////////////////////////////////////////////////////////////////////////////*/
  28          // ‰∏≠Êñ≠ÂáΩÊï∞
  29          // Ê≥®ÊÑè‰∫ãÈ°π1Ôºö‰∏≠Êñ≠ÂáΩÊï∞‰∏≠Ë∞ÉÁî®ÂáΩÊï∞ÁöÑÂèØÈáçÂÖ•ÈóÆÈ¢òÈúÄÂÖ≥Ê≥®„ÄÇ
  30          // Ê≥®ÊÑè‰∫ãÈ°π2ÔºöÂ¶ÇÊûú‰ΩøÁî®‚Äúusing 1‚Äù‚Äúusing 2‚ÄùÁ≠âÔºåËÉΩÂ§üÂú®‰∏çÂêå‰∏≠Êñ≠‰∏≠‰ΩøÁî®‰∏çÂêåÂØÑÂ≠òÂ
             -ô®ÁªÑÔºåÊèêÂçáÂìçÂ∫îÈÄüÂ∫¶‚Ä¶‚Ä¶
  31          //            ‰ΩÜË¶ÅÊ≥®ÊÑè‰∏≠Êñ≠‰∏≠Ë∞ÉÁî®ÂáΩÊï∞ÁöÑÊâÄ‰ΩøÁî®ÁöÑÂØÑÂ≠òÂô®Âú∞ÂùÄÁöÑÊ≠£Á°ÆÊÄß„ÄÇÊé®Ëçê‰ΩøÁî®#pragma 
             -NOAREGS/#pragma AREGSÔºå‰ΩøÁî®Áõ∏ÂØπÂØÑÂ≠òÂô®ÂØªÂùÄ„ÄÇ
  32          //            ÊàñËÄÖÔºåÊòØÂê¶ÂèØ‰ª•‰ΩøÁî®ÂÜÖËÅîÂáΩÊï∞Êù•ÈÅøÂÖçËøô‰∏™ÈóÆÈ¢òÔºü
  33          /*////////////////////////////////////////////////////////////////////////////*/
  34          
  35          #if STC_15W408AS
              // sys tick per ms  // PCAÊ®°Âùó0ÊØè1ms‰∏≠Êñ≠‰∏ÄÊ¨°
              void isr_tick_PCA() interrupt 7
              {
                CCF0 = 0; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
                _sys_us_target += 1000;
                _sys_ms ++;
                CCAP0L = _sys_us_target;
                CCAP0H = _sys_us_target >> 8;
              
                timer_tick();
              }
              
              #elif STC_8H
  49          
  50          void isr_tick_T1() interrupt 3
  51          {
  52   1        _sys_ms ++;
  53   1        _sys_us_target += 1000; // Âú®STC8HÁöÑÂÆûÁé∞‰∏≠ÔºåÁî®‰∫éÁºìÂ≠òusËÆ°Êï∞
  54   1      
  55   1        timer_tick();
  56   1      }
  57          
  58          #endif
  59          
  60          /*////////////////////////////////////////////////////////////////////////////*/
  61          // ‰ª•‰∏ãÊó∂Èó¥ÊåâÂÆöÊó∂Âô®Â∑•‰Ωú‰∫é12TÊ®°Âºè@12MHzÈ¢ëÁéáËÆ°ÁÆó
  62          #define TIMER_DELAY_11MS    (0x10000-FOSC/12/1000000*11000)
  63          #define TIMER_DELAY_10MS    (0x10000-FOSC/12/1000000*10000)
  64          #define TIMER_DELAY_120US   (0x10000-FOSC/12/1000000*120)
  65          #define TIMER_DELAY_400US   (0x10000-FOSC/12/1000000*400)
  66          
  67          void isr_output_T0()interrupt 1 //using 1
  68          {
  69   1      /*
  70   1        ÈÄöÈÅìCHnËæìÂá∫‰∏≠Êñ≠ÂáΩÊï∞Ôºå‰ΩøÁî®ÂÆöÊó∂Âô®0‰∏≠Êñ≠Áî®‰∫éÈ©±Âä®‰ø°Âè∑ËæìÂá∫ÔºåËÆæÁΩÆÈ´ò‰ºòÂÖàÁ∫ß‰∏≠Êñ≠Âè
             -ØÊèêÂçáËæìÂá∫Ê≥¢ÂΩ¢Êó∂Â∫èÂáÜÁ°ÆÊÄß
  71   1        C51‰∏≠Êñ≠ÂáΩÊï∞Ê≥®ÊÑè‰∫ãÈ°πÔºöÊ≥®ÊÑèhw_pwm_set()ÂíåUART_pushByte()ÁöÑÈáçÂÖ•ÈóÆÈ¢òÂíåusingË∞ÉÁî®ÂáΩÊï∞ÈóÆÈ
             -¢òÔºÅÔºÅÔºÅ
  72   1      */
  73   1      /*
  74   1        STCÂÆöÊó∂Âô®Ê®°Âºè0(16‰ΩçËá™Âä®ÈáçË£ÖËΩΩÊ®°Âºè): 
  75   1          ÂΩìÂÆöÊó∂Âô®ËøêË°åÊó∂ÔºåÂØπTHn,TLnÂÜôÂÖ•ÂÜÖÂÆπÂÆûÈôÖ‰∏äÊòØÂÜôÂÖ•ÈöêËóèÁöÑÂØÑÂ≠òÂô®RL_THnÔºåRL_TLn‰∏≠„ÄÇ
  76   1          ÂÆöÊó∂Âô®Ê∫¢Âá∫Êó∂‰ºöËá™Âä®Â∞Ü[RL_THn,RL_TLn]ÁöÑÂÜÖÂÆπÈáçÊñ∞Ë£ÖÂÖ•[THn,TLn]„ÄÇ
  77   1          Êó¢ÂΩìÂâç‰∏≠Êñ≠ÂìçÂ∫î‰∏≠ËÆæÁΩÆÁöÑÂÆöÊó∂Êó∂Èó¥ÔºåÊòØ‰∏ã‰∏Ä‰∏≠Êñ≠ÂìçÂ∫îÁõ∏ÂÖ≥Êìç‰ΩúÁöÑÊåÅÁª≠Êó∂Èó¥„ÄÇ
  78   1      */
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 41  

  79   1      /*
  80   1        ÂéüÁ®ãÂ∫èÂ≠òÂú®ÁöÑÈóÆÈ¢òÔºö
  81   1          ‰∏≠Êñ≠Á®ãÂ∫èÂØπËæìÂá∫Ê®°ÂºèÂàáÊç¢Ê≤°ÊúâËøõË°åÂ§ÑÁêÜÔºå‰∏çÂèØÈÅøÂÖçÁöÑ‰ºöËæìÂá∫‰∏ÄÂ∞èÊÆµÈîôËØØÊï∞ÊçÆ„ÄÇ
  82   1          ÂÖ∑‰ΩìÊù•ËØ¥Â∞±ÊòØ: ÂàáÊç¢Âà∞‰∏çÂêåËæìÂá∫Ê®°ÂºèÔºàSBUS/PPM/ËàµÈáèÔºâÊó∂ÔºåÂÖ∑‰ΩìÈò∂ÊÆµÊòØ‰∏çÁ°ÆÂÆöÁöÑÔºå
             -ËØ•Èò∂ÊÆµÁöÑÊåÅÁª≠Êó∂Èó¥‰πüÊòØ‰∏çÁ°ÆÂÆöÁöÑ„ÄÇ
  83   1      */
  84   1        
  85   1        static u8 step = 0; // ËæìÂá∫Áä∂ÊÄÅ // ÂΩìSBUSÔºåÂàùÂßãsetp==25
  86   1        static u8 T_h=0,T_l=0;// ÂÆöÊó∂Âô®Ë£ÖËΩΩÂÄºÊöÇÂ≠ò
  87   1      
  88   1        u16 temp=0;
  89   1        static u16 temp0=0;
  90   1        
  91   1      //----------------------------------------------------------------------------//
  92   1      /*
  93   1        SBUSÊ≥¢ÁâπÁéá100KÔºåÊØè‰Ωç10us*ÊØèÂ≠óËäÇÊï∞ÊçÆ12‰ΩçÔºà1Ëµ∑Âßã+8Êï∞ÊçÆ+1ÂÅ∂Ê†°Ê†∏+2ÂÅúÊ≠¢Ôºâ=120us/Â≠óËäÇ
  94   1        SBUSÊØèÂ∏ßÊï∞ÊçÆ25Â≠óËäÇÔºå‰ΩéÈÄüÊ®°ÂºèÊØèÂ∏ßÈó¥Èöî14msÔºà120us*25+11msÔºâÔºåÈ´òÈÄüÊ®°ÂºèÊØèÂ∏ßÈó¥Èöî7msÔ
             -ºà120us*25+4msÔºâ
  95   1      */
  96   1      /*
  97   1        ÂéüÁ®ãÂ∫èSBUSËøô‰∏ÄÊÆµÂÜôÁöÑÂæàÁÆÄÊ¥ÅÁ≤æÂáÜÔºåÂ∞±ÊòØ‰∏çÊòìÁêÜËß£„ÄÇ‰º™‰ª£Á†ÅËß£ËØªÂ¶Ç‰∏ãÔºö
  98   1          PIN_SBUS=1;
  99   1          if(t_sbus>24) { t_sbus=0; }
 100   1          else          { PUTCH(sbus_data[t_sbus]); t_sbus++; }
 101   1          if(t_sbus==25){ TIMER_DELAY_10MS  } // ÈÅµÁÖßSBUS‰ΩéÈÄüÊ®°ÂºèÂçèËÆÆÔºåÊ≠§Â§ÑÂÆûÈôÖÂ∫î‰∏∫TIMER_DELAY_11MS
 102   1          else          { TIMER_DELAY_120US }
 103   1      
 104   1          t_sbusËåÉÂõ¥[0-25]ÂØπÂ∫î26‰∏™Èò∂ÊÆµÔºåÂÖ∂‰∏≠[0-24]ÂêåÊó∂ÂØπÂ∫î sbusËæìÂá∫ÁöÑ25Â≠óËäÇÔºå[25]ÂØπÂ∫îÂ∏ßÈó¥Ê
             -ó∂Èó¥Èó¥Èöî(11MS);
 105   1          [0-25]Èò∂ÊÆµËÆæÁΩÆÁöÑT0Ê®°Âºè0Êó∂Èó¥ÔºåÂØπÂ∫î‰∏ã‰∏ÄÈò∂ÊÆµ[1-25,0]ÁöÑÂª∂Êó∂Ôºõ
 106   1          ‰ΩÜÁä∂ÊÄÅÂ∑≤ÁªèÊèêÂâçËΩ¨ÁßªÔºàt_sbus++Êàñt_sbus=0ÔºâÔºåÊïÖÊ≠§Êó∂Êï∞ÊçÆt_sbusÂÆûÈôÖÊåáÁ§∫ÁöÑÊòØ‰∏ã‰∏ÄÈò∂Ê
             -ÆµÔºõ
 107   1          Êó¢Âú®t_sbus==25Èò∂ÊÆµËÆæÁΩÆÁöÑÈó¥ÈöîÊó∂Èó¥ÔºåÂÆûÈôÖÊòØÂú®Á¨¨24Èò∂ÊÆµÂ∑≤ÁªèËÆæÁΩÆÂ•ΩÔºå‰∏îÂ∞ÜÂú®Á¨¨25Èò∂
             -ÊÆµÁîüÊïà„ÄÇ
 108   1      */
 109   1        if(recv.stateOUTPUT==STATE_OUTPUT_SBUS) // SBUS
 110   1        {
 111   2          //if(reset) { reset=0;  step=25;  } // Ë∑≥ËΩ¨Âà∞ËæìÂá∫SBUS[0]ÁöÑÂâç‰∏ÄÈò∂ÊÆµ‰ª•ËÆæÁΩÆSBUS[0]ÊåÅÁª≠Êó∂Èó¥
 112   2          PIN_SBUS_SET();             // Âº∫Âà∂Â∞Ü‰∏≤Âè£ËæìÂá∫Âè£ËÆæÁΩÆ‰∏∫Á©∫Èó≤Áä∂ÊÄÅÔºåÊ∏ÖÈô§ËΩØ‰ª∂Êìç‰ΩúÁ´ØÂè£ÂØºËá¥Á
             -öÑÈîôËØØ„ÄÇ
 113   2          if(step>=25)  { step=0; } // Ê≠§Áä∂ÊÄÅÊó†Êìç‰ΩúÔºå‰ΩéÈÄüÊ®°ÂºèÊó∂Âª∂Êó∂11ms
 114   2          else                        // Ê≠§Áä∂ÊÄÅËæìÂá∫1Â≠óËäÇÊï∞ÊçÆÔºåÊåÅÁª≠Êó∂Èó¥120us
 115   2          {
 116   3      #ifndef SBUS_DEBUG
 117   3      #if 0
                    UART_pushByte(recv.SBUS_tx[step]);  // ÊòØÂê¶Â≠òÂú®ÈáçÂÖ•/ÂØÑÂ≠òÂô®ÁªÑ‰∏ç‰∏ÄËá¥ÈóÆÈ¢òÔºü
              #else
 120   3            if(TI)TI=0;
 121   3            ACC=recv.SBUS_tx[step];
 122   3            TB8=P;
 123   3            SBUF=ACC;
 124   3      #endif
 125   3            step++;
 126   3      #endif
 127   3          }
 128   2      
 129   2          if(step>=25)  { TL0=TIMER_DELAY_11MS; TH0=TIMER_DELAY_11MS>>8;  }
 130   2          else          { TL0=TIMER_DELAY_120US;TH0=TIMER_DELAY_120US>>8; }
 131   2      
 132   2          if(recv.isOutputChanged && step==0)
 133   2          {
 134   3            recv.isOutputChanged = 0;
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 42  

 135   3            if(recvSet.PPM)           { recv.stateOUTPUT=STATE_OUTPUT_PPM;   step=0;}
 136   3            else if(recvSet.SBUS==0)  { recv.stateOUTPUT=STATE_OUTPUT_SERVO; step=0;}
 137   3          }
 138   2        }
 139   1      //----------------------------------------------------------------------------//
 140   1        else if(recv.stateOUTPUT==STATE_OUTPUT_PPM) // PPM
 141   1        {
 142   2          //‰ªéPPMÁ´ØÂè£ËæìÂá∫8ÈÄöÈÅìÊï∞ÊçÆÔºåPPM‰ø°Âè∑ÊÄªÂë®Êúü20ms
 143   2          //ÊØèÈÄöÈÅìÂõ∫ÂÆö0.4ms‰ΩéÁîµÂπ≥ÂºÄÂßãÔºå0.6Âà∞1.6msÔºàÂÆûÈôÖ1.623msÔºâÈ´òÁîµÂπ≥ÁªìÊùü
 144   2          //PPM_CH_PULSE()ÂèÇÊï∞xÊó†ÂÆûÈôÖ‰ΩúÁî®ÔºåÁî®‰∫éÊ†áËÆ∞ÂØπÂ∫î0-7ÈÄöÈÅìËæìÂá∫
 145   2          #define PPM_CH_PULSE(x)   do{PIN_PPM_CLR();TL0=T_l;TH0=T_h;}while(0)
 146   2          //PPM_CH_WIDTH()ÂèÇÊï∞xÊó†ÂÆûÈôÖ‰ΩúÁî®ÔºåÁî®‰∫éÊ†áËÆ∞ÂØπÂ∫î0-7ÈÄöÈÅìËæìÂá∫
 147   2          #define PPM_CH_WIDTH(x) do{PIN_PPM_SET();TL0=TIMER_DELAY_400US; TH0=TIMER_DELAY_400US>>8;}while(0)
 148   2          //PPMÂ∞æÈÉ®Áõ¥Êé•Âª∂Êó∂10ms‰ª•ËäÇÁ∫¶ËÆ°ÁÆóÊó∂Èó¥ÔºåÂë®Êúü‰∏ç‰øùËØÅ50Hz    
 149   2          #define PPM_CH_END()    do{PIN_PPM_CLR();TL0=TIMER_DELAY_10MS;  TH0=TIMER_DELAY_10MS>>8;}while(0)
 150   2          #define PPM_CH_IDLE()   PPM_CH_WIDTH(8)
 151   2          #define PPM_CH_WIDTH_TIME_GET(ch) do{temp=0x10000-600-recv.CH_data[ch]; T_l=temp;T_h=temp>>8;}while(0)
 152   2      
 153   2          switch(step)
 154   2          {
 155   3            case 0: PPM_CH_IDLE();
 156   3                    PPM_CH_WIDTH_TIME_GET(0);
 157   3                    break;
 158   3            case 1: PPM_CH_PULSE(0);break;
 159   3            case 2: PPM_CH_WIDTH(0);
 160   3                    PPM_CH_WIDTH_TIME_GET(1);
 161   3                    break;
 162   3            case 3: PPM_CH_PULSE(1);break;
 163   3            case 4: PPM_CH_WIDTH(1);
 164   3                    PPM_CH_WIDTH_TIME_GET(2);
 165   3                    break;
 166   3            case 5: PPM_CH_PULSE(2);break;
 167   3            case 6: PPM_CH_WIDTH(2);
 168   3                    PPM_CH_WIDTH_TIME_GET(3);
 169   3                    break;
 170   3            case 7: PPM_CH_PULSE(3);break;
 171   3            case 8: PPM_CH_WIDTH(3);
 172   3                    PPM_CH_WIDTH_TIME_GET(4);
 173   3                    break;
 174   3            case  9:PPM_CH_PULSE(4);break;
 175   3            case 10:PPM_CH_WIDTH(4);
 176   3                    PPM_CH_WIDTH_TIME_GET(5);
 177   3                    break;
 178   3            case 11:PPM_CH_PULSE(5);break;
 179   3            case 12:PPM_CH_WIDTH(5);
 180   3                    PPM_CH_WIDTH_TIME_GET(6);
 181   3                    break;
 182   3            case 13:PPM_CH_PULSE(6);break;
 183   3            case 14:PPM_CH_WIDTH(6);
 184   3                    PPM_CH_WIDTH_TIME_GET(7);
 185   3                    break;
 186   3            case 15:PPM_CH_PULSE(7);break;
 187   3            case 16:PPM_CH_WIDTH(7);
 188   3                    break;
 189   3            case 17:PPM_CH_END();  break;
 190   3            default:break;
 191   3          }
 192   2      
 193   2          if(recv.isOutputChanged && step==0)
 194   2          {
 195   3            recv.isOutputChanged = 0;
 196   3            if(recvSet.SBUS)        { recv.stateOUTPUT=STATE_OUTPUT_SBUS;  step=25;}
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 43  

 197   3            else if(recvSet.PPM==0) { recv.stateOUTPUT=STATE_OUTPUT_SERVO; step=0;}
 198   3          }
 199   2      
 200   2          step++; if(step>17) step=0;
 201   2        }
 202   1      //----------------------------------------------------------------------------//
 203   1        else
 204   1        { // ËàµÈáèËæìÂá∫Âë®Êúü20msÔºå8ÈÄöÈÅìÂπ≥ÂàÜÂàôÊØèÈÄöÈÅìËÄóÊó∂2.5ms
 205   2          // PULSE_TIME+INTERVER_TIME==2.5msÔºåPULSE_TIME=0x10000-temp0, INTERVER_TIME=0x10000-temp
 206   2          // -> temp=0x10000-INTERVER_TIME=0x10000+PULSE_TIME-2500=0x10000-2500+0x10000-temp0=0x20000-2500-temp0
 207   2          // ÁªèËÆ°ÁÆóÔºåtemp=128572-temp0Ôºåloli3ÂéüÁ®ãÂ∫ètemp=128600-temp0‰ºº‰πéÊúâÈîôÔºüÔºÅ
 208   2          #define SERVO_CH_PULSE_TIME_SET(ch) \
 209   2              do{ temp0=0x10000-813-((recv.CH_data[ch]*LOLI3_RECV_SERVO_RANGE_MUL)>>LOLI3_RECV_SERVO_RANGE_R_SHIFT) 
             -;\
 210   2                  TL0=temp0,TH0=temp0>>8;}\
 211   2              while(0)
 212   2          //SERVO_CH_INTERVER_TIME_SET()ÂèÇÊï∞xÊó†ÂÆûÈôÖ‰ΩúÁî®ÔºåÁî®‰∫éÊ†áËÆ∞ÂØπÂ∫î0-7ÈÄöÈÅìËæìÂá∫
 213   2          #define SERVO_CH_INTERVER_TIME_SET(x) \
 214   2              do{ temp=0x20000-2500-temp0; TL0=temp,TH0=temp>>8;}\
 215   2              while(0)
 216   2              
 217   2          switch(step)
 218   2          {
 219   3            case 0:
 220   3              if(recvSet.CH8_SW==0) CH8=0;
 221   3              SERVO_CH_PULSE_TIME_SET(0);
 222   3              break;
 223   3      
 224   3            case 1:
 225   3              if(recvSet.CH1_PWM)     hw_pwm_set(0,recv.CH_data[0]/4);
 226   3              else if(recvSet.CH1_SW){if(recv.CH_data[0]<500) CH1=0; else CH1=1;}
 227   3              else                    CH1=1;
 228   3              SERVO_CH_INTERVER_TIME_SET(0);
 229   3              break;
 230   3            case 2:
 231   3              if(recvSet.CH1_PWM==0 && recvSet.CH1_SW==0) CH1=0;
 232   3              SERVO_CH_PULSE_TIME_SET(1);
 233   3              break;
 234   3      
 235   3            case 3:
 236   3              if(recvSet.CH2_PWM)     hw_pwm_set(1,recv.CH_data[1]/4);
 237   3              else if(recvSet.CH2_SW){if(recv.CH_data[1]<500) CH2=0; else CH2=1;}
 238   3              else                    CH2=1;
 239   3              SERVO_CH_INTERVER_TIME_SET(1);
 240   3              break;
 241   3            case 4:
 242   3              if(recvSet.CH2_PWM==0 && recvSet.CH2_SW==0) CH2=0;
 243   3              SERVO_CH_PULSE_TIME_SET(2);
 244   3              break;
 245   3      
 246   3            case 5:
 247   3              if(recvSet.CH3_SW) {if(recv.CH_data[2]<500) CH3=0; else CH3=1;}
 248   3              else                CH3=1;
 249   3              SERVO_CH_INTERVER_TIME_SET(2);
 250   3              break;
 251   3            case 6:
 252   3              if(recvSet.CH3_SW==0) CH3=0;
 253   3              SERVO_CH_PULSE_TIME_SET(3);
 254   3              break;
 255   3      
 256   3            case 7:
 257   3              if(recvSet.CH4_SW) {if(recv.CH_data[3]<500) CH4=0; else CH4=1;}
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 44  

 258   3              else                CH4=1;
 259   3              SERVO_CH_INTERVER_TIME_SET(3);
 260   3              break;
 261   3            case 8:
 262   3              if(recvSet.CH4_SW==0) CH4=0;
 263   3              SERVO_CH_PULSE_TIME_SET(4);
 264   3              break;
 265   3      
 266   3            case 9:
 267   3              if(recvSet.CH5_SW) {if(recv.CH_data[4]<500) CH5=0; else CH5=1;}
 268   3              else                CH5=1;
 269   3              SERVO_CH_INTERVER_TIME_SET(4);
 270   3              break;
 271   3            case 10:
 272   3              if(recvSet.CH5_SW==0) CH5=0;
 273   3              SERVO_CH_PULSE_TIME_SET(5);
 274   3              break;
 275   3            // #if defined STC_15W408AS // bugfix20240518: STC_15W408AS‰∏∫0‰ΩÜËøô‰∏™ÂÆèÂ∑≤defineÊïÖÊÅíÊàêÁ´ãÔºåÂØºË
             -á¥ÂêéÈù¢STC8HÁöÑÂÜÖÂÆπÊ≤°ÊúâÁºñËØëËøõÂéªÔºåÂØºËá¥debugÁöÑÊó∂ÂÄôCH7Êó†ËæìÂá∫
 276   3      #if STC_15W408AS
                    case 11:
                      if(recvSet.CH6_SW) {if(recv.CH_data[5]<500) CH6=0; else CH6=1;}
                      else                CH6=1;
                      SERVO_CH_INTERVER_TIME_SET(5);
                      break;
                    case 12:
                      if(recvSet.CH6_SW==0) CH6=0;
                      SERVO_CH_PULSE_TIME_SET(6);
                      break;
              #elif STC_8H
 287   3      //STC_8H_TSSOP20Â¢ûÂä†CH6ÈÄöÈÅìpwm ËæìÂá∫ÂäüËÉΩ
 288   3            case 11:
 289   3              if(recvSet.CH6_PWM)     hw_pwm_set(5,recv.CH_data[5]/4);
 290   3              else if(recvSet.CH6_SW){if(recv.CH_data[5]<500) CH6=0; else CH6=1;}
 291   3              else                    CH6=1;
 292   3              SERVO_CH_INTERVER_TIME_SET(5);
 293   3              break;
 294   3            case 12:
 295   3              if(recvSet.CH6_PWM==0 && recvSet.CH6_SW==0) CH6=0;
 296   3              SERVO_CH_PULSE_TIME_SET(6);
 297   3              break;      
 298   3      #endif
 299   3      
 300   3      #if STC_15W408AS
                    case 13:
                      // Á°¨‰ª∂‰∏≤Âè£Áî®‰∫éË∞ÉËØïÔºöSTC_15W408AS SBUSÂç†Áî®ÈÄöÈÅìCH7
                      #if (!defined SBUS_DEBUG)
                      if(recvSet.CH7_SW) {if(recv.CH_data[6]<500) CH7=0; else CH7=1;}
                      else                CH7=1;
                      #endif
                      SERVO_CH_INTERVER_TIME_SET(6);
                      break;
                    case 14:
                      #ifndef SBUS_DEBUG
                      if(recvSet.CH7_SW==0) CH7=0;
                      #endif
                      SERVO_CH_PULSE_TIME_SET(7);
                      break;
              #elif STC_8H
 316   3            //STC_8H_TSSOP20Â¢ûÂä†CH6ÈÄöÈÅìpwm ËæìÂá∫ÂäüËÉΩÔºå‰∏îSBUS/PPMÈÄöÈÅìÁã¨Á´ãÔºåÁ°¨‰ª∂‰∏≤Âè£Ë∞ÉËØïÊó∂Êó†ÈúÄ
             -Â±èËîΩCH7ÈÄöÈÅìËæìÂá∫
 317   3            case 13:
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 45  

 318   3              if(recvSet.CH7_PWM)     hw_pwm_set(6,recv.CH_data[6]/4);
 319   3              else if(recvSet.CH7_SW){if(recv.CH_data[6]<500) CH7=0; else CH7=1;}
 320   3              else                    CH7=1;
 321   3              SERVO_CH_INTERVER_TIME_SET(6);
 322   3              break;
 323   3            case 14:
 324   3              if(recvSet.CH7_PWM==0 && recvSet.CH7_SW==0) CH7=0;
 325   3              SERVO_CH_PULSE_TIME_SET(7);
 326   3              break;      
 327   3      #endif
 328   3            case 15:
 329   3              if(recvSet.CH8_SW) {if(recv.CH_data[7]<500) CH8=0; else CH8=1;}
 330   3              else                CH8=1;
 331   3              SERVO_CH_INTERVER_TIME_SET(7);
 332   3              break;
 333   3            default:break;
 334   3          }
 335   2          if(recv.isOutputChanged && step==0)
 336   2          {
 337   3            recv.isOutputChanged = 0;
 338   3            if(recvSet.SBUS)      { recv.stateOUTPUT=STATE_OUTPUT_SBUS; step=25;}
 339   3            else if(recvSet.PPM)  { recv.stateOUTPUT=STATE_OUTPUT_PPM; step=0;}
 340   3          }
 341   2      
 342   2          step++; if(step>15) step=0;
 343   2        }
 344   1      }
 345          
 346          /******************************************************************************/
 347          /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 46  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION isr_tick_T1 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 52
001D 7800        E     MOV     R0,#LOW _sys_ms
001F 120000      E     LCALL   ?C?LLDIDATA
0022 EF                MOV     A,R7
0023 2401              ADD     A,#01H
0025 FF                MOV     R7,A
0026 E4                CLR     A
0027 3E                ADDC    A,R6
0028 FE                MOV     R6,A
0029 E4                CLR     A
002A 3D                ADDC    A,R5
002B FD                MOV     R5,A
002C E4                CLR     A
002D 3C                ADDC    A,R4
002E FC                MOV     R4,A
002F 7800        E     MOV     R0,#LOW _sys_ms
0031 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 53
0034 7800        E     MOV     R0,#LOW _sys_us_target+01H
0036 74E8              MOV     A,#0E8H
0038 26                ADD     A,@R0
0039 F6                MOV     @R0,A
003A 18                DEC     R0
003B 7403              MOV     A,#03H
003D 36                ADDC    A,@R0
003E F6                MOV     @R0,A
                                           ; SOURCE LINE # 55
003F 120000      E     LCALL   timer_tick
                                           ; SOURCE LINE # 56
0042 D007              POP     AR7
0044 D006              POP     AR6
0046 D005              POP     AR5
0048 D004              POP     AR4
004A D003              POP     AR3
004C D002              POP     AR2
004E D001              POP     AR1
0050 D000              POP     AR0
0052 D0D0              POP     PSW
0054 D082              POP     DPL
0056 D083              POP     DPH
0058 D0F0              POP     B
005A D0E0              POP     ACC
005C 32                RETI    
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 47  

             ; FUNCTION isr_tick_T1 (END)

             ; FUNCTION isr_output_T0 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 67
                                           ; SOURCE LINE # 88
001D 750000      R     MOV     temp,#00H
0020 750000      R     MOV     temp+01H,#00H
                                           ; SOURCE LINE # 109
0023 AF00        E     MOV     R7,recv+034H
0025 7E00              MOV     R6,#00H
0027 EF                MOV     A,R7
0028 6402              XRL     A,#02H
002A 706D              JNZ     ?C0002
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 112
002C D2B1              SETB    CHx
                                           ; SOURCE LINE # 113
002E C3                CLR     C
002F E500        R     MOV     A,step
0031 9419              SUBB    A,#019H
0033 7480              MOV     A,#080H
0035 9480              SUBB    A,#080H
0037 4005              JC      ?C0003
0039 750000      R     MOV     step,#00H
003C 8013              SJMP    ?C0004
003E         ?C0003:
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 120
003E 309902            JNB     TI,?C0005
0041 C299              CLR     TI
0043         ?C0005:
                                           ; SOURCE LINE # 121
0043 7400        E     MOV     A,#LOW recv+019H
0045 2500        R     ADD     A,step
0047 F8                MOV     R0,A
0048 E6                MOV     A,@R0
                                           ; SOURCE LINE # 122
0049 A2D0              MOV     C,P
004B 929B              MOV     TB8,C
                                           ; SOURCE LINE # 123
004D F599              MOV     SBUF,A
                                           ; SOURCE LINE # 125
004F 0500        R     INC     step
                                           ; SOURCE LINE # 127
0051         ?C0004:
                                           ; SOURCE LINE # 129
0051 AD00        R     MOV     R5,step
0053 7C00              MOV     R4,#00H
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 48  

0055 C3                CLR     C
0056 ED                MOV     A,R5
0057 9419              SUBB    A,#019H
0059 7480              MOV     A,#080H
005B 9480              SUBB    A,#080H
005D 4008              JC      ?C0006
005F 758A08            MOV     TL0,#08H
0062 758CD5            MOV     TH0,#0D5H
0065 8006              SJMP    ?C0007
0067         ?C0006:
                                           ; SOURCE LINE # 130
0067 758A88            MOV     TL0,#088H
006A 758CFF            MOV     TH0,#0FFH
006D         ?C0007:
                                           ; SOURCE LINE # 132
006D E500        E     MOV     A,recv+035H
006F 7003              JNZ     $ + 5H
0071 020000      R     LJMP    ?C0237
0074 ED                MOV     A,R5
0075 4C                ORL     A,R4
0076 6003              JZ      $ + 5H
0078 020000      R     LJMP    ?C0237
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
007B F500        E     MOV     recv+035H,A
                                           ; SOURCE LINE # 135
007D 900000      E     MOV     DPTR,#recvSet+0CH
0080 E0                MOVX    A,@DPTR
0081 6006              JZ      ?C0009
0083 750001      E     MOV     recv+034H,#01H
0086 020000      R     LJMP    ?C0269
0089         ?C0009:
                                           ; SOURCE LINE # 136
0089 900000      E     MOV     DPTR,#recvSet+0BH
008C E0                MOVX    A,@DPTR
008D 6003              JZ      $ + 5H
008F 020000      R     LJMP    ?C0237
0092 F500        E     MOV     recv+034H,A
0094 F500        R     MOV     step,A
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
0096 020000      R     LJMP    ?C0237
0099         ?C0002:
                                           ; SOURCE LINE # 140
0099 EF                MOV     A,R7
009A 6401              XRL     A,#01H
009C 4E                ORL     A,R6
009D 6003              JZ      $ + 5H
009F 020000      R     LJMP    ?C0013
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 153
00A2 E500        R     MOV     A,step
00A4 B41200            CJNE    A,#012H,?C0238
00A7         ?C0238:
00A7 4003              JC      $ + 5H
00A9 020000      R     LJMP    ?C0014
00AC 900000      R     MOV     DPTR,#?C0239
00AF F8                MOV     R0,A
00B0 28                ADD     A,R0
00B1 28                ADD     A,R0
00B2 73                JMP     @A+DPTR
00B3         ?C0239:
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 49  

00B3 020000      R     LJMP    ?C0018
00B6 020000      R     LJMP    ?C0091
00B9 020000      R     LJMP    ?C0029
00BC 020000      R     LJMP    ?C0091
00BF 020000      R     LJMP    ?C0040
00C2 020000      R     LJMP    ?C0091
00C5 020000      R     LJMP    ?C0051
00C8 020000      R     LJMP    ?C0091
00CB 020000      R     LJMP    ?C0062
00CE 020000      R     LJMP    ?C0091
00D1 020000      R     LJMP    ?C0073
00D4 020000      R     LJMP    ?C0091
00D7 020000      R     LJMP    ?C0084
00DA 020000      R     LJMP    ?C0091
00DD 020000      R     LJMP    ?C0095
00E0 020000      R     LJMP    ?C0091
00E3 020000      R     LJMP    ?C0106
00E6 020000      R     LJMP    ?C0110
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
00E9         ?C0018:
00E9 D2B1              SETB    CHx
00EB 758A70            MOV     TL0,#070H
00EE 758CFE            MOV     TH0,#0FEH
                                           ; SOURCE LINE # 156
00F1 C3                CLR     C
00F2 74A8              MOV     A,#0A8H
00F4 9500        E     SUBB    A,recv+01H
00F6 F500        R     MOV     temp+01H,A
00F8 74FD              MOV     A,#0FDH
00FA 9500        E     SUBB    A,recv
                                           ; SOURCE LINE # 157
00FC 020000      R     LJMP    ?C0267
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
00FF         ?C0029:
00FF D2B1              SETB    CHx
0101 758A70            MOV     TL0,#070H
0104 758CFE            MOV     TH0,#0FEH
                                           ; SOURCE LINE # 160
0107 C3                CLR     C
0108 74A8              MOV     A,#0A8H
010A 9500        E     SUBB    A,recv+03H
010C F500        R     MOV     temp+01H,A
010E 74FD              MOV     A,#0FDH
0110 9500        E     SUBB    A,recv+02H
0112         ?C0255:
                                           ; SOURCE LINE # 161
0112 807E              SJMP    ?C0267
                                           ; SOURCE LINE # 162
0114         ?C0036:
                                           ; SOURCE LINE # 163
0114         ?C0040:
0114 D2B1              SETB    CHx
0116 758A70            MOV     TL0,#070H
0119 758CFE            MOV     TH0,#0FEH
                                           ; SOURCE LINE # 164
011C C3                CLR     C
011D 74A8              MOV     A,#0A8H
011F 9500        E     SUBB    A,recv+05H
0121 F500        R     MOV     temp+01H,A
0123 74FD              MOV     A,#0FDH
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 50  

0125 9500        E     SUBB    A,recv+04H
0127         ?C0257:
                                           ; SOURCE LINE # 165
0127 8069              SJMP    ?C0267
                                           ; SOURCE LINE # 166
0129         ?C0047:
                                           ; SOURCE LINE # 167
0129         ?C0051:
0129 D2B1              SETB    CHx
012B 758A70            MOV     TL0,#070H
012E 758CFE            MOV     TH0,#0FEH
                                           ; SOURCE LINE # 168
0131 C3                CLR     C
0132 74A8              MOV     A,#0A8H
0134 9500        E     SUBB    A,recv+07H
0136 F500        R     MOV     temp+01H,A
0138 74FD              MOV     A,#0FDH
013A 9500        E     SUBB    A,recv+06H
013C         ?C0259:
                                           ; SOURCE LINE # 169
013C 8054              SJMP    ?C0267
                                           ; SOURCE LINE # 170
013E         ?C0058:
                                           ; SOURCE LINE # 171
013E         ?C0062:
013E D2B1              SETB    CHx
0140 758A70            MOV     TL0,#070H
0143 758CFE            MOV     TH0,#0FEH
                                           ; SOURCE LINE # 172
0146 C3                CLR     C
0147 74A8              MOV     A,#0A8H
0149 9500        E     SUBB    A,recv+09H
014B F500        R     MOV     temp+01H,A
014D 74FD              MOV     A,#0FDH
014F 9500        E     SUBB    A,recv+08H
0151         ?C0261:
                                           ; SOURCE LINE # 173
0151 803F              SJMP    ?C0267
                                           ; SOURCE LINE # 174
0153         ?C0069:
                                           ; SOURCE LINE # 175
0153         ?C0073:
0153 D2B1              SETB    CHx
0155 758A70            MOV     TL0,#070H
0158 758CFE            MOV     TH0,#0FEH
                                           ; SOURCE LINE # 176
015B C3                CLR     C
015C 74A8              MOV     A,#0A8H
015E 9500        E     SUBB    A,recv+0BH
0160 F500        R     MOV     temp+01H,A
0162 74FD              MOV     A,#0FDH
0164 9500        E     SUBB    A,recv+0AH
0166         ?C0263:
                                           ; SOURCE LINE # 177
0166 802A              SJMP    ?C0267
                                           ; SOURCE LINE # 178
0168         ?C0080:
                                           ; SOURCE LINE # 179
0168         ?C0084:
0168 D2B1              SETB    CHx
016A 758A70            MOV     TL0,#070H
016D 758CFE            MOV     TH0,#0FEH
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 51  

                                           ; SOURCE LINE # 180
0170 C3                CLR     C
0171 74A8              MOV     A,#0A8H
0173 9500        E     SUBB    A,recv+0DH
0175 F500        R     MOV     temp+01H,A
0177 74FD              MOV     A,#0FDH
0179 9500        E     SUBB    A,recv+0CH
017B         ?C0265:
                                           ; SOURCE LINE # 181
017B 8015              SJMP    ?C0267
                                           ; SOURCE LINE # 182
017D         ?C0091:
017D         ?C0266:
017D 801C              SJMP    ?C0268
                                           ; SOURCE LINE # 183
017F         ?C0095:
017F D2B1              SETB    CHx
0181 758A70            MOV     TL0,#070H
0184 758CFE            MOV     TH0,#0FEH
                                           ; SOURCE LINE # 184
0187 C3                CLR     C
0188 74A8              MOV     A,#0A8H
018A 9500        E     SUBB    A,recv+0FH
018C F500        R     MOV     temp+01H,A
018E 74FD              MOV     A,#0FDH
0190 9500        E     SUBB    A,recv+0EH
0192         ?C0267:
0192 F500        R     MOV     temp,A
0194 850000      R     MOV     T_l,temp+01H
0197 F500        R     MOV     T_h,A
                                           ; SOURCE LINE # 185
0199 801C              SJMP    ?C0014
                                           ; SOURCE LINE # 186
019B         ?C0102:
019B         ?C0268:
019B C2B1              CLR     CHx
019D 85008A      R     MOV     TL0,T_l
01A0 85008C      R     MOV     TH0,T_h
01A3 8012              SJMP    ?C0014
                                           ; SOURCE LINE # 187
01A5         ?C0106:
01A5 D2B1              SETB    CHx
01A7 758A70            MOV     TL0,#070H
01AA 758CFE            MOV     TH0,#0FEH
                                           ; SOURCE LINE # 188
01AD 8008              SJMP    ?C0014
                                           ; SOURCE LINE # 189
01AF         ?C0110:
01AF C2B1              CLR     CHx
01B1 758AF0            MOV     TL0,#0F0H
01B4 758CD8            MOV     TH0,#0D8H
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
01B7         ?C0014:
                                           ; SOURCE LINE # 193
01B7 E500        E     MOV     A,recv+035H
01B9 601E              JZ      ?C0112
01BB E500        R     MOV     A,step
01BD 701A              JNZ     ?C0112
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
01BF F500        E     MOV     recv+035H,A
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 52  

                                           ; SOURCE LINE # 196
01C1 900000      E     MOV     DPTR,#recvSet+0BH
01C4 E0                MOVX    A,@DPTR
01C5 6008              JZ      ?C0113
01C7 750002      E     MOV     recv+034H,#02H
01CA 750019      R     MOV     step,#019H
01CD 800A              SJMP    ?C0112
01CF         ?C0113:
                                           ; SOURCE LINE # 197
01CF 900000      E     MOV     DPTR,#recvSet+0CH
01D2 E0                MOVX    A,@DPTR
01D3 7004              JNZ     ?C0112
01D5 F500        E     MOV     recv+034H,A
01D7 F500        R     MOV     step,A
                                           ; SOURCE LINE # 198
01D9         ?C0112:
                                           ; SOURCE LINE # 200
01D9 0500        R     INC     step
01DB D3                SETB    C
01DC E500        R     MOV     A,step
01DE 9411              SUBB    A,#011H
01E0 7480              MOV     A,#080H
01E2 9480              SUBB    A,#080H
01E4 5003              JNC     $ + 5H
01E6 020000      R     LJMP    ?C0237
01E9         ?C0254:
                                           ; SOURCE LINE # 201
01E9 020000      R     LJMP    ?C0269
01EC         ?C0013:
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 217
01EC E500        R     MOV     A,step
01EE B41000            CJNE    A,#010H,?C0240
01F1         ?C0240:
01F1 4003              JC      $ + 5H
01F3 020000      R     LJMP    ?C0118
01F6 900000      R     MOV     DPTR,#?C0241
01F9 F8                MOV     R0,A
01FA 28                ADD     A,R0
01FB 28                ADD     A,R0
01FC 73                JMP     @A+DPTR
01FD         ?C0241:
01FD 020000      R     LJMP    ?C0119
0200 020000      R     LJMP    ?C0124
0203 020000      R     LJMP    ?C0134
0206 020000      R     LJMP    ?C0139
0209 020000      R     LJMP    ?C0149
020C 020000      R     LJMP    ?C0154
020F 020000      R     LJMP    ?C0162
0212 020000      R     LJMP    ?C0167
0215 020000      R     LJMP    ?C0175
0218 020000      R     LJMP    ?C0180
021B 020000      R     LJMP    ?C0188
021E 020000      R     LJMP    ?C0193
0221 020000      R     LJMP    ?C0203
0224 020000      R     LJMP    ?C0208
0227 020000      R     LJMP    ?C0218
022A 020000      R     LJMP    ?C0223
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
022D         ?C0119:
                                           ; SOURCE LINE # 220
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 53  

022D 900000      E     MOV     DPTR,#recvSet+017H
0230 E0                MOVX    A,@DPTR
0231 7002              JNZ     ?C0123
0233 C2B0              CLR     CH8
0235         ?C0123:
                                           ; SOURCE LINE # 221
0235 AE00        E     MOV     R6,recv
0237 AF00        E     MOV     R7,recv+01H
0239 7C00              MOV     R4,#00H
023B 7D2B              MOV     R5,#02BH
023D 120000      E     LCALL   ?C?IMUL
0240 EF                MOV     A,R7
0241 7805              MOV     R0,#05H
0243         ?C0242:
0243 CE                XCH     A,R6
0244 C3                CLR     C
0245 13                RRC     A
0246 CE                XCH     A,R6
0247 13                RRC     A
0248 D8F9              DJNZ    R0,?C0242
                                           ; SOURCE LINE # 222
024A 020000      R     LJMP    ?C0282
                                           ; SOURCE LINE # 224
024D         ?C0124:
                                           ; SOURCE LINE # 225
024D 900000      E     MOV     DPTR,#recvSet+0DH
0250 E0                MOVX    A,@DPTR
0251 6016              JZ      ?C0125
0253 AE00        E     MOV     R6,recv
0255 E500        E     MOV     A,recv+01H
0257 7802              MOV     R0,#02H
0259         ?C0243:
0259 CE                XCH     A,R6
025A C3                CLR     C
025B 13                RRC     A
025C CE                XCH     A,R6
025D 13                RRC     A
025E D8F9              DJNZ    R0,?C0243
0260 FD                MOV     R5,A
0261 E4                CLR     A
0262 FF                MOV     R7,A
0263 120000      E     LCALL   _hw_pwm_set
0266 020000      R     LJMP    ?C0283
0269         ?C0125:
                                           ; SOURCE LINE # 226
0269 900000      E     MOV     DPTR,#recvSet+010H
026C E0                MOVX    A,@DPTR
026D 6015              JZ      ?C0127
026F C3                CLR     C
0270 E500        E     MOV     A,recv+01H
0272 94F4              SUBB    A,#0F4H
0274 E500        E     MOV     A,recv
0276 9401              SUBB    A,#01H
0278 5005              JNC     ?C0128
027A C2CC              CLR     CH1
027C 020000      R     LJMP    ?C0283
027F         ?C0128:
027F D2CC              SETB    CH1
0281 020000      R     LJMP    ?C0283
0284         ?C0127:
                                           ; SOURCE LINE # 227
0284 D2CC              SETB    CH1
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 54  

0286         ?C0133:
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
0286 020000      R     LJMP    ?C0283
                                           ; SOURCE LINE # 230
0289         ?C0134:
                                           ; SOURCE LINE # 231
0289 900000      E     MOV     DPTR,#recvSet+0DH
028C E0                MOVX    A,@DPTR
028D 7008              JNZ     ?C0138
028F 900000      E     MOV     DPTR,#recvSet+010H
0292 E0                MOVX    A,@DPTR
0293 7002              JNZ     ?C0138
0295 C2CC              CLR     CH1
0297         ?C0138:
                                           ; SOURCE LINE # 232
0297 AE00        E     MOV     R6,recv+02H
0299 AF00        E     MOV     R7,recv+03H
029B 7C00              MOV     R4,#00H
029D 7D2B              MOV     R5,#02BH
029F 120000      E     LCALL   ?C?IMUL
02A2 EF                MOV     A,R7
02A3 7805              MOV     R0,#05H
02A5         ?C0244:
02A5 CE                XCH     A,R6
02A6 C3                CLR     C
02A7 13                RRC     A
02A8 CE                XCH     A,R6
02A9 13                RRC     A
02AA D8F9              DJNZ    R0,?C0244
02AC         ?C0270:
                                           ; SOURCE LINE # 233
02AC 020000      R     LJMP    ?C0282
                                           ; SOURCE LINE # 235
02AF         ?C0139:
                                           ; SOURCE LINE # 236
02AF 900000      E     MOV     DPTR,#recvSet+0EH
02B2 E0                MOVX    A,@DPTR
02B3 6015              JZ      ?C0140
02B5 AE00        E     MOV     R6,recv+02H
02B7 E500        E     MOV     A,recv+03H
02B9 7802              MOV     R0,#02H
02BB         ?C0245:
02BB CE                XCH     A,R6
02BC C3                CLR     C
02BD 13                RRC     A
02BE CE                XCH     A,R6
02BF 13                RRC     A
02C0 D8F9              DJNZ    R0,?C0245
02C2 FD                MOV     R5,A
02C3 7F01              MOV     R7,#01H
02C5 120000      E     LCALL   _hw_pwm_set
02C8 801B              SJMP    ?C0148
02CA         ?C0140:
                                           ; SOURCE LINE # 237
02CA 900000      E     MOV     DPTR,#recvSet+011H
02CD E0                MOVX    A,@DPTR
02CE 6013              JZ      ?C0142
02D0 C3                CLR     C
02D1 E500        E     MOV     A,recv+03H
02D3 94F4              SUBB    A,#0F4H
02D5 E500        E     MOV     A,recv+02H
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 55  

02D7 9401              SUBB    A,#01H
02D9 5004              JNC     ?C0143
02DB C297              CLR     CH2
02DD 8006              SJMP    ?C0148
02DF         ?C0143:
02DF D297              SETB    CH2
02E1 8002              SJMP    ?C0148
02E3         ?C0142:
                                           ; SOURCE LINE # 238
02E3 D297              SETB    CH2
02E5         ?C0148:
                                           ; SOURCE LINE # 239
02E5         ?C0271:
                                           ; SOURCE LINE # 240
02E5 020000      R     LJMP    ?C0283
                                           ; SOURCE LINE # 241
02E8         ?C0149:
                                           ; SOURCE LINE # 242
02E8 900000      E     MOV     DPTR,#recvSet+0EH
02EB E0                MOVX    A,@DPTR
02EC 7008              JNZ     ?C0153
02EE 900000      E     MOV     DPTR,#recvSet+011H
02F1 E0                MOVX    A,@DPTR
02F2 7002              JNZ     ?C0153
02F4 C297              CLR     CH2
02F6         ?C0153:
                                           ; SOURCE LINE # 243
02F6 AE00        E     MOV     R6,recv+04H
02F8 AF00        E     MOV     R7,recv+05H
02FA 7C00              MOV     R4,#00H
02FC 7D2B              MOV     R5,#02BH
02FE 120000      E     LCALL   ?C?IMUL
0301 EF                MOV     A,R7
0302 7805              MOV     R0,#05H
0304         ?C0246:
0304 CE                XCH     A,R6
0305 C3                CLR     C
0306 13                RRC     A
0307 CE                XCH     A,R6
0308 13                RRC     A
0309 D8F9              DJNZ    R0,?C0246
030B         ?C0272:
                                           ; SOURCE LINE # 244
030B 020000      R     LJMP    ?C0282
                                           ; SOURCE LINE # 246
030E         ?C0154:
                                           ; SOURCE LINE # 247
030E 900000      E     MOV     DPTR,#recvSet+012H
0311 E0                MOVX    A,@DPTR
0312 6013              JZ      ?C0155
0314 C3                CLR     C
0315 E500        E     MOV     A,recv+05H
0317 94F4              SUBB    A,#0F4H
0319 E500        E     MOV     A,recv+04H
031B 9401              SUBB    A,#01H
031D 5004              JNC     ?C0156
031F C290              CLR     CH3
0321 8006              SJMP    ?C0161
0323         ?C0156:
0323 D290              SETB    CH3
0325 8002              SJMP    ?C0161
0327         ?C0155:
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 56  

                                           ; SOURCE LINE # 248
0327 D290              SETB    CH3
0329         ?C0161:
                                           ; SOURCE LINE # 249
0329         ?C0273:
                                           ; SOURCE LINE # 250
0329 020000      R     LJMP    ?C0283
                                           ; SOURCE LINE # 251
032C         ?C0162:
                                           ; SOURCE LINE # 252
032C 900000      E     MOV     DPTR,#recvSet+012H
032F E0                MOVX    A,@DPTR
0330 7002              JNZ     ?C0166
0332 C290              CLR     CH3
0334         ?C0166:
                                           ; SOURCE LINE # 253
0334 AE00        E     MOV     R6,recv+06H
0336 AF00        E     MOV     R7,recv+07H
0338 7C00              MOV     R4,#00H
033A 7D2B              MOV     R5,#02BH
033C 120000      E     LCALL   ?C?IMUL
033F EF                MOV     A,R7
0340 7805              MOV     R0,#05H
0342         ?C0247:
0342 CE                XCH     A,R6
0343 C3                CLR     C
0344 13                RRC     A
0345 CE                XCH     A,R6
0346 13                RRC     A
0347 D8F9              DJNZ    R0,?C0247
0349         ?C0274:
                                           ; SOURCE LINE # 254
0349 020000      R     LJMP    ?C0282
                                           ; SOURCE LINE # 256
034C         ?C0167:
                                           ; SOURCE LINE # 257
034C 900000      E     MOV     DPTR,#recvSet+013H
034F E0                MOVX    A,@DPTR
0350 6013              JZ      ?C0168
0352 C3                CLR     C
0353 E500        E     MOV     A,recv+07H
0355 94F4              SUBB    A,#0F4H
0357 E500        E     MOV     A,recv+06H
0359 9401              SUBB    A,#01H
035B 5004              JNC     ?C0169
035D C2B7              CLR     CH4
035F 8006              SJMP    ?C0174
0361         ?C0169:
0361 D2B7              SETB    CH4
0363 8002              SJMP    ?C0174
0365         ?C0168:
                                           ; SOURCE LINE # 258
0365 D2B7              SETB    CH4
0367         ?C0174:
                                           ; SOURCE LINE # 259
0367         ?C0275:
                                           ; SOURCE LINE # 260
0367 020000      R     LJMP    ?C0283
                                           ; SOURCE LINE # 261
036A         ?C0175:
                                           ; SOURCE LINE # 262
036A 900000      E     MOV     DPTR,#recvSet+013H
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 57  

036D E0                MOVX    A,@DPTR
036E 7002              JNZ     ?C0179
0370 C2B7              CLR     CH4
0372         ?C0179:
                                           ; SOURCE LINE # 263
0372 AE00        E     MOV     R6,recv+08H
0374 AF00        E     MOV     R7,recv+09H
0376 7C00              MOV     R4,#00H
0378 7D2B              MOV     R5,#02BH
037A 120000      E     LCALL   ?C?IMUL
037D EF                MOV     A,R7
037E 7805              MOV     R0,#05H
0380         ?C0248:
0380 CE                XCH     A,R6
0381 C3                CLR     C
0382 13                RRC     A
0383 CE                XCH     A,R6
0384 13                RRC     A
0385 D8F9              DJNZ    R0,?C0248
0387         ?C0276:
                                           ; SOURCE LINE # 264
0387 020000      R     LJMP    ?C0282
                                           ; SOURCE LINE # 266
038A         ?C0180:
                                           ; SOURCE LINE # 267
038A 900000      E     MOV     DPTR,#recvSet+014H
038D E0                MOVX    A,@DPTR
038E 6013              JZ      ?C0181
0390 C3                CLR     C
0391 E500        E     MOV     A,recv+09H
0393 94F4              SUBB    A,#0F4H
0395 E500        E     MOV     A,recv+08H
0397 9401              SUBB    A,#01H
0399 5004              JNC     ?C0182
039B C2B6              CLR     CH5
039D 8006              SJMP    ?C0187
039F         ?C0182:
039F D2B6              SETB    CH5
03A1 8002              SJMP    ?C0187
03A3         ?C0181:
                                           ; SOURCE LINE # 268
03A3 D2B6              SETB    CH5
03A5         ?C0187:
                                           ; SOURCE LINE # 269
03A5         ?C0277:
                                           ; SOURCE LINE # 270
03A5 020000      R     LJMP    ?C0283
                                           ; SOURCE LINE # 271
03A8         ?C0188:
                                           ; SOURCE LINE # 272
03A8 900000      E     MOV     DPTR,#recvSet+014H
03AB E0                MOVX    A,@DPTR
03AC 7002              JNZ     ?C0192
03AE C2B6              CLR     CH5
03B0         ?C0192:
                                           ; SOURCE LINE # 273
03B0 AE00        E     MOV     R6,recv+0AH
03B2 AF00        E     MOV     R7,recv+0BH
03B4 7C00              MOV     R4,#00H
03B6 7D2B              MOV     R5,#02BH
03B8 120000      E     LCALL   ?C?IMUL
03BB EF                MOV     A,R7
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 58  

03BC 7805              MOV     R0,#05H
03BE         ?C0249:
03BE CE                XCH     A,R6
03BF C3                CLR     C
03C0 13                RRC     A
03C1 CE                XCH     A,R6
03C2 13                RRC     A
03C3 D8F9              DJNZ    R0,?C0249
03C5         ?C0278:
                                           ; SOURCE LINE # 274
03C5 020000      R     LJMP    ?C0282
                                           ; SOURCE LINE # 288
03C8         ?C0193:
                                           ; SOURCE LINE # 289
03C8 900000      E     MOV     DPTR,#recvSet+028H
03CB E0                MOVX    A,@DPTR
03CC 6015              JZ      ?C0194
03CE AE00        E     MOV     R6,recv+0AH
03D0 E500        E     MOV     A,recv+0BH
03D2 7802              MOV     R0,#02H
03D4         ?C0250:
03D4 CE                XCH     A,R6
03D5 C3                CLR     C
03D6 13                RRC     A
03D7 CE                XCH     A,R6
03D8 13                RRC     A
03D9 D8F9              DJNZ    R0,?C0250
03DB FD                MOV     R5,A
03DC 7F05              MOV     R7,#05H
03DE 120000      E     LCALL   _hw_pwm_set
03E1 801B              SJMP    ?C0202
03E3         ?C0194:
                                           ; SOURCE LINE # 290
03E3 900000      E     MOV     DPTR,#recvSet+015H
03E6 E0                MOVX    A,@DPTR
03E7 6013              JZ      ?C0196
03E9 C3                CLR     C
03EA E500        E     MOV     A,recv+0BH
03EC 94F4              SUBB    A,#0F4H
03EE E500        E     MOV     A,recv+0AH
03F0 9401              SUBB    A,#01H
03F2 5004              JNC     ?C0197
03F4 C2B4              CLR     CH6
03F6 8006              SJMP    ?C0202
03F8         ?C0197:
03F8 D2B4              SETB    CH6
03FA 8002              SJMP    ?C0202
03FC         ?C0196:
                                           ; SOURCE LINE # 291
03FC D2B4              SETB    CH6
03FE         ?C0202:
                                           ; SOURCE LINE # 292
03FE         ?C0279:
                                           ; SOURCE LINE # 293
03FE 020000      R     LJMP    ?C0283
                                           ; SOURCE LINE # 294
0401         ?C0203:
                                           ; SOURCE LINE # 295
0401 900000      E     MOV     DPTR,#recvSet+028H
0404 E0                MOVX    A,@DPTR
0405 7008              JNZ     ?C0207
0407 900000      E     MOV     DPTR,#recvSet+015H
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 59  

040A E0                MOVX    A,@DPTR
040B 7002              JNZ     ?C0207
040D C2B4              CLR     CH6
040F         ?C0207:
                                           ; SOURCE LINE # 296
040F AE00        E     MOV     R6,recv+0CH
0411 AF00        E     MOV     R7,recv+0DH
0413 7C00              MOV     R4,#00H
0415 7D2B              MOV     R5,#02BH
0417 120000      E     LCALL   ?C?IMUL
041A EF                MOV     A,R7
041B 7805              MOV     R0,#05H
041D         ?C0251:
041D CE                XCH     A,R6
041E C3                CLR     C
041F 13                RRC     A
0420 CE                XCH     A,R6
0421 13                RRC     A
0422 D8F9              DJNZ    R0,?C0251
0424         ?C0280:
                                           ; SOURCE LINE # 297
0424 805B              SJMP    ?C0282
                                           ; SOURCE LINE # 317
0426         ?C0208:
                                           ; SOURCE LINE # 318
0426 900000      E     MOV     DPTR,#recvSet+0FH
0429 E0                MOVX    A,@DPTR
042A 6015              JZ      ?C0209
042C AE00        E     MOV     R6,recv+0CH
042E E500        E     MOV     A,recv+0DH
0430 7802              MOV     R0,#02H
0432         ?C0252:
0432 CE                XCH     A,R6
0433 C3                CLR     C
0434 13                RRC     A
0435 CE                XCH     A,R6
0436 13                RRC     A
0437 D8F9              DJNZ    R0,?C0252
0439 FD                MOV     R5,A
043A 7F06              MOV     R7,#06H
043C 120000      E     LCALL   _hw_pwm_set
043F 801B              SJMP    ?C0217
0441         ?C0209:
                                           ; SOURCE LINE # 319
0441 900000      E     MOV     DPTR,#recvSet+016H
0444 E0                MOVX    A,@DPTR
0445 6013              JZ      ?C0211
0447 C3                CLR     C
0448 E500        E     MOV     A,recv+0DH
044A 94F4              SUBB    A,#0F4H
044C E500        E     MOV     A,recv+0CH
044E 9401              SUBB    A,#01H
0450 5004              JNC     ?C0212
0452 C2B3              CLR     CH7
0454 8006              SJMP    ?C0217
0456         ?C0212:
0456 D2B3              SETB    CH7
0458 8002              SJMP    ?C0217
045A         ?C0211:
                                           ; SOURCE LINE # 320
045A D2B3              SETB    CH7
045C         ?C0217:
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 60  

                                           ; SOURCE LINE # 321
045C         ?C0281:
                                           ; SOURCE LINE # 322
045C 8053              SJMP    ?C0283
                                           ; SOURCE LINE # 323
045E         ?C0218:
                                           ; SOURCE LINE # 324
045E 900000      E     MOV     DPTR,#recvSet+0FH
0461 E0                MOVX    A,@DPTR
0462 7008              JNZ     ?C0222
0464 900000      E     MOV     DPTR,#recvSet+016H
0467 E0                MOVX    A,@DPTR
0468 7002              JNZ     ?C0222
046A C2B3              CLR     CH7
046C         ?C0222:
                                           ; SOURCE LINE # 325
046C AE00        E     MOV     R6,recv+0EH
046E AF00        E     MOV     R7,recv+0FH
0470 7C00              MOV     R4,#00H
0472 7D2B              MOV     R5,#02BH
0474 120000      E     LCALL   ?C?IMUL
0477 EF                MOV     A,R7
0478 7805              MOV     R0,#05H
047A         ?C0253:
047A CE                XCH     A,R6
047B C3                CLR     C
047C 13                RRC     A
047D CE                XCH     A,R6
047E 13                RRC     A
047F D8F9              DJNZ    R0,?C0253
0481         ?C0282:
0481 FF                MOV     R7,A
0482 C3                CLR     C
0483 74D3              MOV     A,#0D3H
0485 9F                SUBB    A,R7
0486 F500        R     MOV     temp0+01H,A
0488 74FC              MOV     A,#0FCH
048A 9E                SUBB    A,R6
048B F500        R     MOV     temp0,A
048D 85008A      R     MOV     TL0,temp0+01H
0490 E500        R     MOV     A,temp0
0492 F58C              MOV     TH0,A
                                           ; SOURCE LINE # 326
0494 802F              SJMP    ?C0118
                                           ; SOURCE LINE # 328
0496         ?C0223:
                                           ; SOURCE LINE # 329
0496 900000      E     MOV     DPTR,#recvSet+017H
0499 E0                MOVX    A,@DPTR
049A 6013              JZ      ?C0224
049C C3                CLR     C
049D E500        E     MOV     A,recv+0FH
049F 94F4              SUBB    A,#0F4H
04A1 E500        E     MOV     A,recv+0EH
04A3 9401              SUBB    A,#01H
04A5 5004              JNC     ?C0225
04A7 C2B0              CLR     CH8
04A9 8006              SJMP    ?C0230
04AB         ?C0225:
04AB D2B0              SETB    CH8
04AD 8002              SJMP    ?C0230
04AF         ?C0224:
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 61  

                                           ; SOURCE LINE # 330
04AF D2B0              SETB    CH8
04B1         ?C0230:
                                           ; SOURCE LINE # 331
04B1         ?C0283:
04B1 C3                CLR     C
04B2 743C              MOV     A,#03CH
04B4 9500        R     SUBB    A,temp0+01H
04B6 F500        R     MOV     temp+01H,A
04B8 74F6              MOV     A,#0F6H
04BA 9500        R     SUBB    A,temp0
04BC F500        R     MOV     temp,A
04BE 85008A      R     MOV     TL0,temp+01H
04C1 E500        R     MOV     A,temp
04C3 F58C              MOV     TH0,A
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
04C5         ?C0118:
                                           ; SOURCE LINE # 335
04C5 E500        E     MOV     A,recv+035H
04C7 6020              JZ      ?C0232
04C9 E500        R     MOV     A,step
04CB 701C              JNZ     ?C0232
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
04CD F500        E     MOV     recv+035H,A
                                           ; SOURCE LINE # 338
04CF 900000      E     MOV     DPTR,#recvSet+0BH
04D2 E0                MOVX    A,@DPTR
04D3 6008              JZ      ?C0233
04D5 750002      E     MOV     recv+034H,#02H
04D8 750019      R     MOV     step,#019H
04DB 800C              SJMP    ?C0232
04DD         ?C0233:
                                           ; SOURCE LINE # 339
04DD 900000      E     MOV     DPTR,#recvSet+0CH
04E0 E0                MOVX    A,@DPTR
04E1 6006              JZ      ?C0232
04E3 750001      E     MOV     recv+034H,#01H
04E6 750000      R     MOV     step,#00H
                                           ; SOURCE LINE # 340
04E9         ?C0232:
                                           ; SOURCE LINE # 342
04E9 0500        R     INC     step
04EB D3                SETB    C
04EC E500        R     MOV     A,step
04EE 940F              SUBB    A,#0FH
04F0 7480              MOV     A,#080H
04F2 9480              SUBB    A,#080H
04F4 4003              JC      ?C0237
04F6         ?C0269:
04F6 750000      R     MOV     step,#00H
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
04F9         ?C0237:
04F9 D007              POP     AR7
04FB D006              POP     AR6
04FD D005              POP     AR5
04FF D004              POP     AR4
0501 D003              POP     AR3
0503 D002              POP     AR2
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 62  

0505 D001              POP     AR1
0507 D000              POP     AR0
0509 D0D0              POP     PSW
050B D082              POP     DPL
050D D083              POP     DPH
050F D0F0              POP     B
0511 D0E0              POP     ACC
0513 32                RETI    
             ; FUNCTION isr_output_T0 (END)

C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 63  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
Loli3RecvNrf . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  25
  rx . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  11
  tx . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000BH  11
  rx_cnt . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0016H  1
  hopping_cnt. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0017H  1
  channel_index. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0018H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
_sys_ms. . . . . . . . . . . . . . . .  EXTERN   IDATA  U_LONG   -----  4
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
TIMER_CHANNEL_LOST . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CHx. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
P5 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
P6 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
Loli3RecvSet . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  41
  isValid. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  hopping. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  5
  address. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0006H  5
  SBUS . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  PPM. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  CH1_PWM. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  CH2_PWM. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  CH7_PWM. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  CH1_SW . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  CH2_SW . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0011H  1
  CH3_SW . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0012H  1
  CH4_SW . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
  CH5_SW . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  CH6_SW . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  CH7_SW . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0016H  1
  CH8_SW . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0017H  1
  out_control_data . . . . . . . . . .  MEMBER   -----  ARRAY    0018H  16
  CH6_PWM. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0028H  1
P7 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
TIMER_LED_FLASH. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATE_LED_FLASH. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
TIMER_DATA_SAVE. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TIMER_SIGNAL_COUNT . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
STATE_OUTPUT_PPM . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E_TIMER. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
NUM_TIMERS . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TIMER_ADC. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SBUF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
recv . . . . . . . . . . . . . . . . .  EXTERN   DATA   STRUCT   -----  54
timer_tick . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
STATE_LED_ON . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATE_LED_IDLE . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CH1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
CH2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
CH3. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 64  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CH4. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
CH5. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
CH6. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
CH7. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
isr_tick_T1. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CH8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
_hw_pwm_set. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ACC. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
TIMER_SIGNAL_LOST. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATE_OUTPUT_SERVO . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
isr_output_T0. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  step . . . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0000H  1
  T_h. . . . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0001H  1
  T_l. . . . . . . . . . . . . . . . .  STATIC   DATA   U_CHAR   0002H  1
  temp . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  temp0. . . . . . . . . . . . . . . .  STATIC   DATA   U_INT    0003H  2
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
STATE_NRF_RX . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Loli3RecvData. . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  54
  CH_data. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  16
  voltage_ic . . . . . . . . . . . . .  MEMBER   -----  U_INT    0010H  2
  voltage_batt . . . . . . . . . . . .  MEMBER   -----  U_INT    0012H  2
  adc_ic . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0014H  2
  adc_batt . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  rx_num . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0018H  1
  SBUS_tx. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0019H  25
  stateLED . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0032H  1
  stateNRF . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0033H  1
  stateOUTPUT. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0034H  1
  isOutputChanged. . . . . . . . . . .  MEMBER   -----  U_CHAR   0035H  1
STATE_NRF_TX . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STimer . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  isRuning . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  isTimeout. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  count. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  reload . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  callback . . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
STATE_NRF_DATA_PROC. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E_STATE_LED. . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
recvSet. . . . . . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  41
STATE_NRF_INIT . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATE_NRF_TX_WAIT. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E_STATE_NRF. . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_sys_us_target . . . . . . . . . . . .  EXTERN   IDATA  U_INT    -----  2
TIMER_LED_OFF. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATE_LED_OFF. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATE_OUTPUT_SBUS. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
E_STATE_OUTPUT . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1393    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   LOLI3_RECV_ISR_STC                                                05/21/2024 12:45:55 PAGE 65  

   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
