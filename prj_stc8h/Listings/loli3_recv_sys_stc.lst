C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE LOLI3_RECV_SYS_STC
OBJECT MODULE PLACED IN .\Objects\loli3_recv_sys_stc.obj
COMPILER INVOKED BY: C:\bin\Keil_v5\C51\BIN\C51.EXE ..\port\loli3_recv_sys_stc.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\port
                    -;..\src) DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PRINT(.\Listings\loli3_recv_sys_stc.lst) TABS(2) OBJECT(.\Objects\l
                    -oli3_recv_sys_stc.obj)

line level    source

   1          /*
   2          ********************************************************************************
   3          *                             ---ofme---
   4          *           Copyleft (c) 2021-2023, ÂæÆÈ£éÂ±±Ë∞∑ / ofourme@163.com
   5          *           License: LGPL
   6          *
   7          *   LOLI3_RECV_SYS_STC.C-V1.0.0 (2023.Oct.25th)
   8          *   Á®ãÂ∫èÂåπÈÖçÁ°¨‰ª∂ÔºöSTC15W / STC8H
   9          *   Á°¨‰ª∂Âõ∫ÂÆöËøêË°åÈ¢ëÁéáÔºö12MHz
  10          *
  11          ********************************************************************************
  12          */
  13          
  14          #define __LOLI3_RECV_SYS_STC_C__
  15          
  16          /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  17          /******************************************************************************/
  18          
  19          #include "loli3_recv_port.h"
   1      =1  /*
   2      =1  ********************************************************************************
   3      =1  *                             ---ofme---
   4      =1  *           Copyleft (c) 2023, ÂæÆÈ£éÂ±±Ë∞∑ / ofourme@163.com
   5      =1  *           License: LGPL
   6      =1  *
   7      =1  *   LOLI3_RECV_PORT.H-V1.1.0 (2023.Oct.30th)
   8      =1  *
   9      =1  ********************************************************************************
  10      =1  */
  11      =1  
  12      =1  #ifndef __LOLI3_RECV_PORT_H__
  13      =1  #define __LOLI3_RECV_PORT_H__
  14      =1  
  15      =1  /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  16      =1  /******************************************************************************/
  17      =1  
  18      =1  #include "hw.h"
   1      =2  /*
   2      =2  ********************************************************************************
   3      =2  *                             ---ofme---
   4      =2  *           Copyleft (c) 2021-2023, ÂæÆÈ£éÂ±±Ë∞∑ / ofourme@163.com
   5      =2  *           License: LGPL
   6      =2  *
   7      =2  *   HW.H-V1.0.0 (2023.Oct.25th)
   8      =2  *
   9      =2  ********************************************************************************
  10      =2  */
  11      =2  
  12      =2  #ifndef __HW_H__
  13      =2  #define __HW_H__
  14      =2  
  15      =2  /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  16      =2  /******************************************************************************/
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 2   

  17      =2  
  18      =2  #define STC_15W408AS    0
  19      =2  #define STC_15W408AS_SOP20  0
  20      =2  #define ARDUINO_ATMEAG328P  0
  21      =2  #define STC_8H        1
  22      =2  #define STC_8H_TSSOP20    1
  23      =2  
  24      =2  #define FOSC  12000000UL
  25      =2  
  26      =2  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  27      =2  
  28      =2  /*////////////////////////////////////////////////////////////////////////////*/
  29      =2  #if STC_15W408AS
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 
           =2 #include "stc15w.h"
           =2 #include<intrins.h>
           =2 
           =2 #define u8 unsigned char
           =2 #define u16 unsigned int
           =2 #define s16 signed int
           =2 #define u32 unsigned long
           =2 #define word_t u8
           =2 #define uint8_t u8
           =2 #define bool bit
           =2   
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 #elif STC_8H
  45      =2  /*////////////////////////////////////////////////////////////////////////////*/
  46      =2  
  47      =2  #include "STC8H.h"
   1      =3  #ifndef     __STC8H_H__
   2      =3  #define     __STC8H_H__
   3      =3  
   4      =3  /////////////////////////////////////////////////
   5      =3  
   6      =3  //∞¸∫¨±æÕ∑Œƒº˛∫Û,≤ª”√¡ÌÕ‚‘Ÿ∞¸∫¨"REG51.H"
   7      =3  
   8      =3  sfr         P0          =           0x80;
   9      =3  sbit        P00         =           P0^0;
  10      =3  sbit        P01         =           P0^1;
  11      =3  sbit        P02         =           P0^2;
  12      =3  sbit        P03         =           P0^3;
  13      =3  sbit        P04         =           P0^4;
  14      =3  sbit        P05         =           P0^5;
  15      =3  sbit        P06         =           P0^6;
  16      =3  sbit        P07         =           P0^7;
  17      =3  sfr         SP          =           0x81;
  18      =3  sfr         DPL         =           0x82;
  19      =3  sfr         DPH         =           0x83;
  20      =3  sfr         S4CON       =           0x84;
  21      =3  sfr         S4BUF       =           0x85;
  22      =3  sfr         PCON        =           0x87;
  23      =3  sfr         TCON        =           0x88;
  24      =3  sbit        TF1         =           TCON^7;
  25      =3  sbit        TR1         =           TCON^6;
  26      =3  sbit        TF0         =           TCON^5;
  27      =3  sbit        TR0         =           TCON^4;
  28      =3  sbit        IE1         =           TCON^3;
  29      =3  sbit        IT1         =           TCON^2;
  30      =3  sbit        IE0         =           TCON^1;
  31      =3  sbit        IT0         =           TCON^0;
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 3   

  32      =3  sfr         TMOD        =           0x89;
  33      =3  sfr         TL0         =           0x8a;
  34      =3  sfr         TL1         =           0x8b;
  35      =3  sfr         TH0         =           0x8c;
  36      =3  sfr         TH1         =           0x8d;
  37      =3  sfr         AUXR        =           0x8e;
  38      =3  sfr         INTCLKO     =           0x8f;
  39      =3  sfr         P1          =           0x90;
  40      =3  sbit        P10         =           P1^0;
  41      =3  sbit        P11         =           P1^1;
  42      =3  sbit        P12         =           P1^2;
  43      =3  sbit        P13         =           P1^3;
  44      =3  sbit        P14         =           P1^4;
  45      =3  sbit        P15         =           P1^5;
  46      =3  sbit        P16         =           P1^6;
  47      =3  sbit        P17         =           P1^7;
  48      =3  sfr         P1M1        =           0x91;
  49      =3  sfr         P1M0        =           0x92;
  50      =3  sfr         P0M1        =           0x93;
  51      =3  sfr         P0M0        =           0x94;
  52      =3  sfr         P2M1        =           0x95;
  53      =3  sfr         P2M0        =           0x96;
  54      =3  sfr         SCON        =           0x98;
  55      =3  sbit        SM0         =           SCON^7;
  56      =3  sbit        SM1         =           SCON^6;
  57      =3  sbit        SM2         =           SCON^5;
  58      =3  sbit        REN         =           SCON^4;
  59      =3  sbit        TB8         =           SCON^3;
  60      =3  sbit        RB8         =           SCON^2;
  61      =3  sbit        TI          =           SCON^1;
  62      =3  sbit        RI          =           SCON^0;
  63      =3  sfr         SBUF        =           0x99;
  64      =3  sfr         S2CON       =           0x9a;
  65      =3  sfr         S2BUF       =           0x9b;
  66      =3  sfr         IRCBAND     =           0x9d;
  67      =3  sfr         LIRTRIM     =           0x9e;
  68      =3  sfr         IRTRIM      =           0x9f;
  69      =3  sfr         P2          =           0xa0;
  70      =3  sbit        P20         =           P2^0;
  71      =3  sbit        P21         =           P2^1;
  72      =3  sbit        P22         =           P2^2;
  73      =3  sbit        P23         =           P2^3;
  74      =3  sbit        P24         =           P2^4;
  75      =3  sbit        P25         =           P2^5;
  76      =3  sbit        P26         =           P2^6;
  77      =3  sbit        P27         =           P2^7;
  78      =3  sfr         P_SW1       =           0xa2;
  79      =3  sfr         IE          =           0xa8;
  80      =3  sbit        EA          =           IE^7;
  81      =3  sbit        ELVD        =           IE^6;
  82      =3  sbit        EADC        =           IE^5;
  83      =3  sbit        ES          =           IE^4;
  84      =3  sbit        ET1         =           IE^3;
  85      =3  sbit        EX1         =           IE^2;
  86      =3  sbit        ET0         =           IE^1;
  87      =3  sbit        EX0         =           IE^0;
  88      =3  sfr         SADDR       =           0xa9;
  89      =3  sfr         WKTCL       =           0xaa;
  90      =3  sfr         WKTCH       =           0xab;
  91      =3  sfr         S3CON       =           0xac;
  92      =3  sfr         S3BUF       =           0xad;
  93      =3  sfr         TA          =           0xae;
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 4   

  94      =3  sfr         IE2         =           0xaf;
  95      =3  sfr         P3          =           0xb0;
  96      =3  sbit        P30         =           P3^0;
  97      =3  sbit        P31         =           P3^1;
  98      =3  sbit        P32         =           P3^2;
  99      =3  sbit        P33         =           P3^3;
 100      =3  sbit        P34         =           P3^4;
 101      =3  sbit        P35         =           P3^5;
 102      =3  sbit        P36         =           P3^6;
 103      =3  sbit        P37         =           P3^7;
 104      =3  sfr         P3M1        =           0xb1;
 105      =3  sfr         P3M0        =           0xb2;
 106      =3  sfr         P4M1        =           0xb3;
 107      =3  sfr         P4M0        =           0xb4;
 108      =3  sfr         IP2         =           0xb5;
 109      =3  sfr         IP2H        =           0xb6;
 110      =3  sfr         IPH         =           0xb7;
 111      =3  sfr         IP          =           0xb8;
 112      =3  sbit        PPCA        =           IP^7;
 113      =3  sbit        PLVD        =           IP^6;
 114      =3  sbit        PADC        =           IP^5;
 115      =3  sbit        PS          =           IP^4;
 116      =3  sbit        PT1         =           IP^3;
 117      =3  sbit        PX1         =           IP^2;
 118      =3  sbit        PT0         =           IP^1;
 119      =3  sbit        PX0         =           IP^0;
 120      =3  sfr         SADEN       =           0xb9;
 121      =3  sfr         P_SW2       =           0xba;
 122      =3  sfr         ADC_CONTR   =           0xbc;
 123      =3  sfr         ADC_RES     =           0xbd;
 124      =3  sfr         ADC_RESL    =           0xbe;
 125      =3  sfr         P4          =           0xc0;
 126      =3  sbit        P40         =           P4^0;
 127      =3  sbit        P41         =           P4^1;
 128      =3  sbit        P42         =           P4^2;
 129      =3  sbit        P43         =           P4^3;
 130      =3  sbit        P44         =           P4^4;
 131      =3  sbit        P45         =           P4^5;
 132      =3  sbit        P46         =           P4^6;
 133      =3  sbit        P47         =           P4^7;
 134      =3  sfr         WDT_CONTR   =           0xc1;
 135      =3  sfr         IAP_DATA    =           0xc2;
 136      =3  sfr         IAP_ADDRH   =           0xc3;
 137      =3  sfr         IAP_ADDRL   =           0xc4;
 138      =3  sfr         IAP_CMD     =           0xc5;
 139      =3  sfr         IAP_TRIG    =           0xc6;
 140      =3  sfr         IAP_CONTR   =           0xc7;
 141      =3  sfr         P5          =           0xc8;
 142      =3  sbit        P50         =           P5^0;
 143      =3  sbit        P51         =           P5^1;
 144      =3  sbit        P52         =           P5^2;
 145      =3  sbit        P53         =           P5^3;
 146      =3  sbit        P54         =           P5^4;
 147      =3  sbit        P55         =           P5^5;
 148      =3  sbit        P56         =           P5^6;
 149      =3  sbit        P57         =           P5^7;
 150      =3  sfr         P5M1        =           0xc9;
 151      =3  sfr         P5M0        =           0xca;
 152      =3  sfr         P6M1        =           0xcb;
 153      =3  sfr         P6M0        =           0xcc;
 154      =3  sfr         SPSTAT      =           0xcd;
 155      =3  sfr         SPCTL       =           0xce;
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 5   

 156      =3  sfr         SPDAT       =           0xcf;
 157      =3  sfr         PSW         =           0xd0;
 158      =3  sbit        CY          =           PSW^7;
 159      =3  sbit        AC          =           PSW^6;
 160      =3  sbit        F0          =           PSW^5;
 161      =3  sbit        RS1         =           PSW^4;
 162      =3  sbit        RS0         =           PSW^3;
 163      =3  sbit        OV          =           PSW^2;
 164      =3  sbit        F1          =           PSW^1;
 165      =3  sbit        P           =           PSW^0;
 166      =3  sfr         T4T3M       =           0xd1;
 167      =3  sfr         T4H         =           0xd2;
 168      =3  sfr         T4L         =           0xd3;
 169      =3  sfr         T3H         =           0xd4;
 170      =3  sfr         T3L         =           0xd5;
 171      =3  sfr         T2H         =           0xd6;
 172      =3  sfr         T2L         =           0xd7;
 173      =3  sfr         USBCLK      =           0xdc;
 174      =3  sfr         ADCCFG      =           0xde;
 175      =3  sfr         IP3         =           0xdf;
 176      =3  sfr         ACC         =           0xe0;
 177      =3  sfr         P7M1        =           0xe1;
 178      =3  sfr         P7M0        =           0xe2;
 179      =3  sfr         DPS         =           0xe3;
 180      =3  sfr         DPL1        =           0xe4;
 181      =3  sfr         DPH1        =           0xe5;
 182      =3  sfr         CMPCR1      =           0xe6;
 183      =3  sfr         CMPCR2      =           0xe7;
 184      =3  sfr         P6          =           0xe8;
 185      =3  sbit        P60         =           P6^0;
 186      =3  sbit        P61         =           P6^1;
 187      =3  sbit        P62         =           P6^2;
 188      =3  sbit        P63         =           P6^3;
 189      =3  sbit        P64         =           P6^4;
 190      =3  sbit        P65         =           P6^5;
 191      =3  sbit        P66         =           P6^6;
 192      =3  sbit        P67         =           P6^7;
 193      =3  sfr         USBDAT      =           0xec;
 194      =3  sfr         IP3H        =           0xee;
 195      =3  sfr         AUXINTIF    =           0xef;
 196      =3  sfr         B           =           0xf0;
 197      =3  sfr         USBCON      =           0xf4;
 198      =3  sfr         IAP_TPS     =           0xf5;
 199      =3  sfr         P7          =           0xf8;
 200      =3  sbit        P70         =           P7^0;
 201      =3  sbit        P71         =           P7^1;
 202      =3  sbit        P72         =           P7^2;
 203      =3  sbit        P73         =           P7^3;
 204      =3  sbit        P74         =           P7^4;
 205      =3  sbit        P75         =           P7^5;
 206      =3  sbit        P76         =           P7^6;
 207      =3  sbit        P77         =           P7^7;
 208      =3  sfr         USBADR      =           0xfc;
 209      =3  sfr         RSTCFG      =           0xff;
 210      =3  
 211      =3  //»Áœ¬Ãÿ ‚π¶ƒ‹ºƒ¥Ê∆˜Œª”⁄¿©’πRAM«¯”Ú
 212      =3  //∑√Œ ’‚–©ºƒ¥Ê∆˜,–Ëœ»Ω´P_SW2µƒBIT7…Ë÷√Œ™1,≤≈ø…’˝≥£∂¡–¥
 213      =3  
 214      =3  /////////////////////////////////////////////////
 215      =3  //FF00H-FFFFH
 216      =3  /////////////////////////////////////////////////
 217      =3  
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 6   

 218      =3  
 219      =3  
 220      =3  /////////////////////////////////////////////////
 221      =3  //FE00H-FEFFH
 222      =3  /////////////////////////////////////////////////
 223      =3  
 224      =3  #define     CLKSEL                  (*(unsigned char volatile xdata *)0xfe00)
 225      =3  #define     CLKDIV                  (*(unsigned char volatile xdata *)0xfe01)
 226      =3  #define     HIRCCR                  (*(unsigned char volatile xdata *)0xfe02)
 227      =3  #define     XOSCCR                  (*(unsigned char volatile xdata *)0xfe03)
 228      =3  #define     IRC32KCR                (*(unsigned char volatile xdata *)0xfe04)
 229      =3  #define     MCLKOCR                 (*(unsigned char volatile xdata *)0xfe05)
 230      =3  #define     IRCDB                   (*(unsigned char volatile xdata *)0xfe06)
 231      =3  #define     X32KCR                  (*(unsigned char volatile xdata *)0xfe08)
 232      =3  
 233      =3  #define     P0PU                    (*(unsigned char volatile xdata *)0xfe10)
 234      =3  #define     P1PU                    (*(unsigned char volatile xdata *)0xfe11)
 235      =3  #define     P2PU                    (*(unsigned char volatile xdata *)0xfe12)
 236      =3  #define     P3PU                    (*(unsigned char volatile xdata *)0xfe13)
 237      =3  #define     P4PU                    (*(unsigned char volatile xdata *)0xfe14)
 238      =3  #define     P5PU                    (*(unsigned char volatile xdata *)0xfe15)
 239      =3  #define     P6PU                    (*(unsigned char volatile xdata *)0xfe16)
 240      =3  #define     P7PU                    (*(unsigned char volatile xdata *)0xfe17)
 241      =3  #define     P0NCS                   (*(unsigned char volatile xdata *)0xfe18)
 242      =3  #define     P1NCS                   (*(unsigned char volatile xdata *)0xfe19)
 243      =3  #define     P2NCS                   (*(unsigned char volatile xdata *)0xfe1a)
 244      =3  #define     P3NCS                   (*(unsigned char volatile xdata *)0xfe1b)
 245      =3  #define     P4NCS                   (*(unsigned char volatile xdata *)0xfe1c)
 246      =3  #define     P5NCS                   (*(unsigned char volatile xdata *)0xfe1d)
 247      =3  #define     P6NCS                   (*(unsigned char volatile xdata *)0xfe1e)
 248      =3  #define     P7NCS                   (*(unsigned char volatile xdata *)0xfe1f)
 249      =3  #define     P0SR                    (*(unsigned char volatile xdata *)0xfe20)
 250      =3  #define     P1SR                    (*(unsigned char volatile xdata *)0xfe21)
 251      =3  #define     P2SR                    (*(unsigned char volatile xdata *)0xfe22)
 252      =3  #define     P3SR                    (*(unsigned char volatile xdata *)0xfe23)
 253      =3  #define     P4SR                    (*(unsigned char volatile xdata *)0xfe24)
 254      =3  #define     P5SR                    (*(unsigned char volatile xdata *)0xfe25)
 255      =3  #define     P6SR                    (*(unsigned char volatile xdata *)0xfe26)
 256      =3  #define     P7SR                    (*(unsigned char volatile xdata *)0xfe27)
 257      =3  #define     P0DR                    (*(unsigned char volatile xdata *)0xfe28)
 258      =3  #define     P1DR                    (*(unsigned char volatile xdata *)0xfe29)
 259      =3  #define     P2DR                    (*(unsigned char volatile xdata *)0xfe2a)
 260      =3  #define     P3DR                    (*(unsigned char volatile xdata *)0xfe2b)
 261      =3  #define     P4DR                    (*(unsigned char volatile xdata *)0xfe2c)
 262      =3  #define     P5DR                    (*(unsigned char volatile xdata *)0xfe2d)
 263      =3  #define     P6DR                    (*(unsigned char volatile xdata *)0xfe2e)
 264      =3  #define     P7DR                    (*(unsigned char volatile xdata *)0xfe2f)
 265      =3  #define     P0IE                    (*(unsigned char volatile xdata *)0xfe30)
 266      =3  #define     P1IE                    (*(unsigned char volatile xdata *)0xfe31)
 267      =3  #define     P2IE                    (*(unsigned char volatile xdata *)0xfe32)
 268      =3  #define     P3IE                    (*(unsigned char volatile xdata *)0xfe33)
 269      =3  #define     P4IE                    (*(unsigned char volatile xdata *)0xfe34)
 270      =3  #define     P5IE                    (*(unsigned char volatile xdata *)0xfe35)
 271      =3  #define     P6IE                    (*(unsigned char volatile xdata *)0xfe36)
 272      =3  #define     P7IE                    (*(unsigned char volatile xdata *)0xfe37)
 273      =3  
 274      =3  #define     LCMIFCFG                (*(unsigned char volatile xdata *)0xfe50)
 275      =3  #define     LCMIFCFG2               (*(unsigned char volatile xdata *)0xfe51)
 276      =3  #define     LCMIFCR                 (*(unsigned char volatile xdata *)0xfe52)
 277      =3  #define     LCMIFSTA                (*(unsigned char volatile xdata *)0xfe53)
 278      =3  #define     LCMIFDATL               (*(unsigned char volatile xdata *)0xfe54)
 279      =3  #define     LCMIFDATH               (*(unsigned char volatile xdata *)0xfe55)
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 7   

 280      =3  
 281      =3  #define     RTCCR                   (*(unsigned char volatile xdata *)0xfe60)
 282      =3  #define     RTCCFG                  (*(unsigned char volatile xdata *)0xfe61)
 283      =3  #define     RTCIEN                  (*(unsigned char volatile xdata *)0xfe62)
 284      =3  #define     RTCIF                   (*(unsigned char volatile xdata *)0xfe63)
 285      =3  #define     ALAHOUR                 (*(unsigned char volatile xdata *)0xfe64)
 286      =3  #define     ALAMIN                  (*(unsigned char volatile xdata *)0xfe65)
 287      =3  #define     ALASEC                  (*(unsigned char volatile xdata *)0xfe66)
 288      =3  #define     ALASSEC                 (*(unsigned char volatile xdata *)0xfe67)
 289      =3  #define     INIYEAR                 (*(unsigned char volatile xdata *)0xfe68)
 290      =3  #define     INIMONTH                (*(unsigned char volatile xdata *)0xfe69)
 291      =3  #define     INIDAY                  (*(unsigned char volatile xdata *)0xfe6a)
 292      =3  #define     INIHOUR                 (*(unsigned char volatile xdata *)0xfe6b)
 293      =3  #define     INIMIN                  (*(unsigned char volatile xdata *)0xfe6c)
 294      =3  #define     INISEC                  (*(unsigned char volatile xdata *)0xfe6d)
 295      =3  #define     INISSEC                 (*(unsigned char volatile xdata *)0xfe6e)
 296      =3  #define     YEAR                    (*(unsigned char volatile xdata *)0xfe70)
 297      =3  #define     MONTH                   (*(unsigned char volatile xdata *)0xfe71)
 298      =3  #define     DAY                     (*(unsigned char volatile xdata *)0xfe72)
 299      =3  #define     HOUR                    (*(unsigned char volatile xdata *)0xfe73)
 300      =3  #define     MIN                     (*(unsigned char volatile xdata *)0xfe74)
 301      =3  #define     SEC                     (*(unsigned char volatile xdata *)0xfe75)
 302      =3  #define     SSEC                    (*(unsigned char volatile xdata *)0xfe76)
 303      =3  
 304      =3  #define     I2CCFG                  (*(unsigned char volatile xdata *)0xfe80)
 305      =3  #define     I2CMSCR                 (*(unsigned char volatile xdata *)0xfe81)
 306      =3  #define     I2CMSST                 (*(unsigned char volatile xdata *)0xfe82)
 307      =3  #define     I2CSLCR                 (*(unsigned char volatile xdata *)0xfe83)
 308      =3  #define     I2CSLST                 (*(unsigned char volatile xdata *)0xfe84)
 309      =3  #define     I2CSLADR                (*(unsigned char volatile xdata *)0xfe85)
 310      =3  #define     I2CTXD                  (*(unsigned char volatile xdata *)0xfe86)
 311      =3  #define     I2CRXD                  (*(unsigned char volatile xdata *)0xfe87)
 312      =3  #define     I2CMSAUX                (*(unsigned char volatile xdata *)0xfe88)
 313      =3  
 314      =3  #define     TM2PS                   (*(unsigned char volatile xdata *)0xfea2)
 315      =3  #define     TM3PS                   (*(unsigned char volatile xdata *)0xfea3)
 316      =3  #define     TM4PS                   (*(unsigned char volatile xdata *)0xfea4)
 317      =3  #define     ADCTIM                  (*(unsigned char volatile xdata *)0xfea8)
 318      =3  #define     T3T4PIN                 (*(unsigned char volatile xdata *)0xfeac)
 319      =3  #define     ADCEXCFG                (*(unsigned char volatile xdata *)0xfead)
 320      =3  #define     CMPEXCFG                (*(unsigned char volatile xdata *)0xfeae)
 321      =3  
 322      =3  #define     PWM1_ETRPS              (*(unsigned char volatile xdata *)0xfeb0)
 323      =3  #define     PWM1_ENO                (*(unsigned char volatile xdata *)0xfeb1)
 324      =3  #define     PWM1_PS                 (*(unsigned char volatile xdata *)0xfeb2)
 325      =3  #define     PWM1_IOAUX              (*(unsigned char volatile xdata *)0xfeb3)
 326      =3  #define     PWM2_ETRPS              (*(unsigned char volatile xdata *)0xfeb4)
 327      =3  #define     PWM2_ENO                (*(unsigned char volatile xdata *)0xfeb5)
 328      =3  #define     PWM2_PS                 (*(unsigned char volatile xdata *)0xfeb6)
 329      =3  #define     PWM2_IOAUX              (*(unsigned char volatile xdata *)0xfeb7)
 330      =3  #define     PWM1_CR1                (*(unsigned char volatile xdata *)0xfec0)
 331      =3  #define     PWM1_CR2                (*(unsigned char volatile xdata *)0xfec1)
 332      =3  #define     PWM1_SMCR               (*(unsigned char volatile xdata *)0xfec2)
 333      =3  #define     PWM1_ETR                (*(unsigned char volatile xdata *)0xfec3)
 334      =3  #define     PWM1_IER                (*(unsigned char volatile xdata *)0xfec4)
 335      =3  #define     PWM1_SR1                (*(unsigned char volatile xdata *)0xfec5)
 336      =3  #define     PWM1_SR2                (*(unsigned char volatile xdata *)0xfec6)
 337      =3  #define     PWM1_EGR                (*(unsigned char volatile xdata *)0xfec7)
 338      =3  #define     PWM1_CCMR1              (*(unsigned char volatile xdata *)0xfec8)
 339      =3  #define     PWM1_CCMR2              (*(unsigned char volatile xdata *)0xfec9)
 340      =3  #define     PWM1_CCMR3              (*(unsigned char volatile xdata *)0xfeca)
 341      =3  #define     PWM1_CCMR4              (*(unsigned char volatile xdata *)0xfecb)
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 8   

 342      =3  #define     PWM1_CCER1              (*(unsigned char volatile xdata *)0xfecc)
 343      =3  #define     PWM1_CCER2              (*(unsigned char volatile xdata *)0xfecd)
 344      =3  #define     PWM1_CNTR               (*(unsigned  int volatile xdata *)0xfece)
 345      =3  #define     PWM1_CNTRH              (*(unsigned char volatile xdata *)0xfece)
 346      =3  #define     PWM1_CNTRL              (*(unsigned char volatile xdata *)0xfecf)
 347      =3  #define     PWM1_PSCR               (*(unsigned  int volatile xdata *)0xfed0)
 348      =3  #define     PWM1_PSCRH              (*(unsigned char volatile xdata *)0xfed0)
 349      =3  #define     PWM1_PSCRL              (*(unsigned char volatile xdata *)0xfed1)
 350      =3  #define     PWM1_ARR                (*(unsigned  int volatile xdata *)0xfed2)
 351      =3  #define     PWM1_ARRH               (*(unsigned char volatile xdata *)0xfed2)
 352      =3  #define     PWM1_ARRL               (*(unsigned char volatile xdata *)0xfed3)
 353      =3  #define     PWM1_RCR                (*(unsigned char volatile xdata *)0xfed4)
 354      =3  #define     PWM1_CCR1               (*(unsigned  int volatile xdata *)0xfed5)
 355      =3  #define     PWM1_CCR1H              (*(unsigned char volatile xdata *)0xfed5)
 356      =3  #define     PWM1_CCR1L              (*(unsigned char volatile xdata *)0xfed6)
 357      =3  #define     PWM1_CCR2               (*(unsigned  int volatile xdata *)0xfed7)
 358      =3  #define     PWM1_CCR2H              (*(unsigned char volatile xdata *)0xfed7)
 359      =3  #define     PWM1_CCR2L              (*(unsigned char volatile xdata *)0xfed8)
 360      =3  #define     PWM1_CCR3               (*(unsigned  int volatile xdata *)0xfed9)
 361      =3  #define     PWM1_CCR3H              (*(unsigned char volatile xdata *)0xfed9)
 362      =3  #define     PWM1_CCR3L              (*(unsigned char volatile xdata *)0xfeda)
 363      =3  #define     PWM1_CCR4               (*(unsigned  int volatile xdata *)0xfedb)
 364      =3  #define     PWM1_CCR4H              (*(unsigned char volatile xdata *)0xfedb)
 365      =3  #define     PWM1_CCR4L              (*(unsigned char volatile xdata *)0xfedc)
 366      =3  #define     PWM1_BKR                (*(unsigned char volatile xdata *)0xfedd)
 367      =3  #define     PWM1_DTR                (*(unsigned char volatile xdata *)0xfede)
 368      =3  #define     PWM1_OISR               (*(unsigned char volatile xdata *)0xfedf)
 369      =3  #define     PWM2_CR1                (*(unsigned char volatile xdata *)0xfee0)
 370      =3  #define     PWM2_CR2                (*(unsigned char volatile xdata *)0xfee1)
 371      =3  #define     PWM2_SMCR               (*(unsigned char volatile xdata *)0xfee2)
 372      =3  #define     PWM2_ETR                (*(unsigned char volatile xdata *)0xfee3)
 373      =3  #define     PWM2_IER                (*(unsigned char volatile xdata *)0xfee4)
 374      =3  #define     PWM2_SR1                (*(unsigned char volatile xdata *)0xfee5)
 375      =3  #define     PWM2_SR2                (*(unsigned char volatile xdata *)0xfee6)
 376      =3  #define     PWM2_EGR                (*(unsigned char volatile xdata *)0xfee7)
 377      =3  #define     PWM2_CCMR1              (*(unsigned char volatile xdata *)0xfee8)
 378      =3  #define     PWM2_CCMR2              (*(unsigned char volatile xdata *)0xfee9)
 379      =3  #define     PWM2_CCMR3              (*(unsigned char volatile xdata *)0xfeea)
 380      =3  #define     PWM2_CCMR4              (*(unsigned char volatile xdata *)0xfeeb)
 381      =3  #define     PWM2_CCER1              (*(unsigned char volatile xdata *)0xfeec)
 382      =3  #define     PWM2_CCER2              (*(unsigned char volatile xdata *)0xfeed)
 383      =3  #define     PWM2_CNTR               (*(unsigned  int volatile xdata *)0xfeee)
 384      =3  #define     PWM2_CNTRH              (*(unsigned char volatile xdata *)0xfeee)
 385      =3  #define     PWM2_CNTRL              (*(unsigned char volatile xdata *)0xfeef)
 386      =3  #define     PWM2_PSCR               (*(unsigned  int volatile xdata *)0xfef0)
 387      =3  #define     PWM2_PSCRH              (*(unsigned char volatile xdata *)0xfef0)
 388      =3  #define     PWM2_PSCRL              (*(unsigned char volatile xdata *)0xfef1)
 389      =3  #define     PWM2_ARR                (*(unsigned  int volatile xdata *)0xfef2)
 390      =3  #define     PWM2_ARRH               (*(unsigned char volatile xdata *)0xfef2)
 391      =3  #define     PWM2_ARRL               (*(unsigned char volatile xdata *)0xfef3)
 392      =3  #define     PWM2_RCR                (*(unsigned char volatile xdata *)0xfef4)
 393      =3  #define     PWM2_CCR1               (*(unsigned  int volatile xdata *)0xfef5)
 394      =3  #define     PWM2_CCR1H              (*(unsigned char volatile xdata *)0xfef5)
 395      =3  #define     PWM2_CCR1L              (*(unsigned char volatile xdata *)0xfef6)
 396      =3  #define     PWM2_CCR2               (*(unsigned  int volatile xdata *)0xfef7)
 397      =3  #define     PWM2_CCR2H              (*(unsigned char volatile xdata *)0xfef7)
 398      =3  #define     PWM2_CCR2L              (*(unsigned char volatile xdata *)0xfef8)
 399      =3  #define     PWM2_CCR3               (*(unsigned  int volatile xdata *)0xfef9)
 400      =3  #define     PWM2_CCR3H              (*(unsigned char volatile xdata *)0xfef9)
 401      =3  #define     PWM2_CCR3L              (*(unsigned char volatile xdata *)0xfefa)
 402      =3  #define     PWM2_CCR4               (*(unsigned  int volatile xdata *)0xfefb)
 403      =3  #define     PWM2_CCR4H              (*(unsigned char volatile xdata *)0xfefb)
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 9   

 404      =3  #define     PWM2_CCR4L              (*(unsigned char volatile xdata *)0xfefc)
 405      =3  #define     PWM2_BKR                (*(unsigned char volatile xdata *)0xfefd)
 406      =3  #define     PWM2_DTR                (*(unsigned char volatile xdata *)0xfefe)
 407      =3  #define     PWM2_OISR               (*(unsigned char volatile xdata *)0xfeff)
 408      =3  
 409      =3  #define     PWMA_ETRPS              (*(unsigned char volatile xdata *)0xfeb0)
 410      =3  #define     PWMA_ENO                (*(unsigned char volatile xdata *)0xfeb1)
 411      =3  #define     PWMA_PS                 (*(unsigned char volatile xdata *)0xfeb2)
 412      =3  #define     PWMA_IOAUX              (*(unsigned char volatile xdata *)0xfeb3)
 413      =3  #define     PWMB_ETRPS              (*(unsigned char volatile xdata *)0xfeb4)
 414      =3  #define     PWMB_ENO                (*(unsigned char volatile xdata *)0xfeb5)
 415      =3  #define     PWMB_PS                 (*(unsigned char volatile xdata *)0xfeb6)
 416      =3  #define     PWMB_IOAUX              (*(unsigned char volatile xdata *)0xfeb7)
 417      =3  #define     PWMA_CR1                (*(unsigned char volatile xdata *)0xfec0)
 418      =3  #define     PWMA_CR2                (*(unsigned char volatile xdata *)0xfec1)
 419      =3  #define     PWMA_SMCR               (*(unsigned char volatile xdata *)0xfec2)
 420      =3  #define     PWMA_ETR                (*(unsigned char volatile xdata *)0xfec3)
 421      =3  #define     PWMA_IER                (*(unsigned char volatile xdata *)0xfec4)
 422      =3  #define     PWMA_SR1                (*(unsigned char volatile xdata *)0xfec5)
 423      =3  #define     PWMA_SR2                (*(unsigned char volatile xdata *)0xfec6)
 424      =3  #define     PWMA_EGR                (*(unsigned char volatile xdata *)0xfec7)
 425      =3  #define     PWMA_CCMR1              (*(unsigned char volatile xdata *)0xfec8)
 426      =3  #define     PWMA_CCMR2              (*(unsigned char volatile xdata *)0xfec9)
 427      =3  #define     PWMA_CCMR3              (*(unsigned char volatile xdata *)0xfeca)
 428      =3  #define     PWMA_CCMR4              (*(unsigned char volatile xdata *)0xfecb)
 429      =3  #define     PWMA_CCER1              (*(unsigned char volatile xdata *)0xfecc)
 430      =3  #define     PWMA_CCER2              (*(unsigned char volatile xdata *)0xfecd)
 431      =3  #define     PWMA_CNTR               (*(unsigned  int volatile xdata *)0xfece)
 432      =3  #define     PWMA_CNTRH              (*(unsigned char volatile xdata *)0xfece)
 433      =3  #define     PWMA_CNTRL              (*(unsigned char volatile xdata *)0xfecf)
 434      =3  #define     PWMA_PSCR               (*(unsigned  int volatile xdata *)0xfed0)
 435      =3  #define     PWMA_PSCRH              (*(unsigned char volatile xdata *)0xfed0)
 436      =3  #define     PWMA_PSCRL              (*(unsigned char volatile xdata *)0xfed1)
 437      =3  #define     PWMA_ARR                (*(unsigned  int volatile xdata *)0xfed2)
 438      =3  #define     PWMA_ARRH               (*(unsigned char volatile xdata *)0xfed2)
 439      =3  #define     PWMA_ARRL               (*(unsigned char volatile xdata *)0xfed3)
 440      =3  #define     PWMA_RCR                (*(unsigned char volatile xdata *)0xfed4)
 441      =3  #define     PWMA_CCR1               (*(unsigned  int volatile xdata *)0xfed5)
 442      =3  #define     PWMA_CCR1H              (*(unsigned char volatile xdata *)0xfed5)
 443      =3  #define     PWMA_CCR1L              (*(unsigned char volatile xdata *)0xfed6)
 444      =3  #define     PWMA_CCR2               (*(unsigned  int volatile xdata *)0xfed7)
 445      =3  #define     PWMA_CCR2H              (*(unsigned char volatile xdata *)0xfed7)
 446      =3  #define     PWMA_CCR2L              (*(unsigned char volatile xdata *)0xfed8)
 447      =3  #define     PWMA_CCR3               (*(unsigned  int volatile xdata *)0xfed9)
 448      =3  #define     PWMA_CCR3H              (*(unsigned char volatile xdata *)0xfed9)
 449      =3  #define     PWMA_CCR3L              (*(unsigned char volatile xdata *)0xfeda)
 450      =3  #define     PWMA_CCR4               (*(unsigned  int volatile xdata *)0xfedb)
 451      =3  #define     PWMA_CCR4H              (*(unsigned char volatile xdata *)0xfedb)
 452      =3  #define     PWMA_CCR4L              (*(unsigned char volatile xdata *)0xfedc)
 453      =3  #define     PWMA_BKR                (*(unsigned char volatile xdata *)0xfedd)
 454      =3  #define     PWMA_DTR                (*(unsigned char volatile xdata *)0xfede)
 455      =3  #define     PWMA_OISR               (*(unsigned char volatile xdata *)0xfedf)
 456      =3  #define     PWMB_CR1                (*(unsigned char volatile xdata *)0xfee0)
 457      =3  #define     PWMB_CR2                (*(unsigned char volatile xdata *)0xfee1)
 458      =3  #define     PWMB_SMCR               (*(unsigned char volatile xdata *)0xfee2)
 459      =3  #define     PWMB_ETR                (*(unsigned char volatile xdata *)0xfee3)
 460      =3  #define     PWMB_IER                (*(unsigned char volatile xdata *)0xfee4)
 461      =3  #define     PWMB_SR1                (*(unsigned char volatile xdata *)0xfee5)
 462      =3  #define     PWMB_SR2                (*(unsigned char volatile xdata *)0xfee6)
 463      =3  #define     PWMB_EGR                (*(unsigned char volatile xdata *)0xfee7)
 464      =3  #define     PWMB_CCMR1              (*(unsigned char volatile xdata *)0xfee8)
 465      =3  #define     PWMB_CCMR2              (*(unsigned char volatile xdata *)0xfee9)
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 10  

 466      =3  #define     PWMB_CCMR3              (*(unsigned char volatile xdata *)0xfeea)
 467      =3  #define     PWMB_CCMR4              (*(unsigned char volatile xdata *)0xfeeb)
 468      =3  #define     PWMB_CCER1              (*(unsigned char volatile xdata *)0xfeec)
 469      =3  #define     PWMB_CCER2              (*(unsigned char volatile xdata *)0xfeed)
 470      =3  #define     PWMB_CNTR               (*(unsigned  int volatile xdata *)0xfeee)
 471      =3  #define     PWMB_CNTRH              (*(unsigned char volatile xdata *)0xfeee)
 472      =3  #define     PWMB_CNTRL              (*(unsigned char volatile xdata *)0xfeef)
 473      =3  #define     PWMB_PSCR               (*(unsigned  int volatile xdata *)0xfef0)
 474      =3  #define     PWMB_PSCRH              (*(unsigned char volatile xdata *)0xfef0)
 475      =3  #define     PWMB_PSCRL              (*(unsigned char volatile xdata *)0xfef1)
 476      =3  #define     PWMB_ARR                (*(unsigned  int volatile xdata *)0xfef2)
 477      =3  #define     PWMB_ARRH               (*(unsigned char volatile xdata *)0xfef2)
 478      =3  #define     PWMB_ARRL               (*(unsigned char volatile xdata *)0xfef3)
 479      =3  #define     PWMB_RCR                (*(unsigned char volatile xdata *)0xfef4)
 480      =3  #define     PWMB_CCR5               (*(unsigned  int volatile xdata *)0xfef5)
 481      =3  #define     PWMB_CCR5H              (*(unsigned char volatile xdata *)0xfef5)
 482      =3  #define     PWMB_CCR5L              (*(unsigned char volatile xdata *)0xfef6)
 483      =3  #define     PWMB_CCR6               (*(unsigned  int volatile xdata *)0xfef7)
 484      =3  #define     PWMB_CCR6H              (*(unsigned char volatile xdata *)0xfef7)
 485      =3  #define     PWMB_CCR6L              (*(unsigned char volatile xdata *)0xfef8)
 486      =3  #define     PWMB_CCR7               (*(unsigned  int volatile xdata *)0xfef9)
 487      =3  #define     PWMB_CCR7H              (*(unsigned char volatile xdata *)0xfef9)
 488      =3  #define     PWMB_CCR7L              (*(unsigned char volatile xdata *)0xfefa)
 489      =3  #define     PWMB_CCR8               (*(unsigned  int volatile xdata *)0xfefb)
 490      =3  #define     PWMB_CCR8H              (*(unsigned char volatile xdata *)0xfefb)
 491      =3  #define     PWMB_CCR8L              (*(unsigned char volatile xdata *)0xfefc)
 492      =3  #define     PWMB_BKR                (*(unsigned char volatile xdata *)0xfefd)
 493      =3  #define     PWMB_DTR                (*(unsigned char volatile xdata *)0xfefe)
 494      =3  #define     PWMB_OISR               (*(unsigned char volatile xdata *)0xfeff)
 495      =3  
 496      =3  /////////////////////////////////////////////////
 497      =3  //FD00H-FDFFH
 498      =3  /////////////////////////////////////////////////
 499      =3  
 500      =3  #define     P0INTE                  (*(unsigned char volatile xdata *)0xfd00)
 501      =3  #define     P1INTE                  (*(unsigned char volatile xdata *)0xfd01)
 502      =3  #define     P2INTE                  (*(unsigned char volatile xdata *)0xfd02)
 503      =3  #define     P3INTE                  (*(unsigned char volatile xdata *)0xfd03)
 504      =3  #define     P4INTE                  (*(unsigned char volatile xdata *)0xfd04)
 505      =3  #define     P5INTE                  (*(unsigned char volatile xdata *)0xfd05)
 506      =3  #define     P6INTE                  (*(unsigned char volatile xdata *)0xfd06)
 507      =3  #define     P7INTE                  (*(unsigned char volatile xdata *)0xfd07)
 508      =3  #define     P0INTF                  (*(unsigned char volatile xdata *)0xfd10)
 509      =3  #define     P1INTF                  (*(unsigned char volatile xdata *)0xfd11)
 510      =3  #define     P2INTF                  (*(unsigned char volatile xdata *)0xfd12)
 511      =3  #define     P3INTF                  (*(unsigned char volatile xdata *)0xfd13)
 512      =3  #define     P4INTF                  (*(unsigned char volatile xdata *)0xfd14)
 513      =3  #define     P5INTF                  (*(unsigned char volatile xdata *)0xfd15)
 514      =3  #define     P6INTF                  (*(unsigned char volatile xdata *)0xfd16)
 515      =3  #define     P7INTF                  (*(unsigned char volatile xdata *)0xfd17)
 516      =3  #define     P0IM0                   (*(unsigned char volatile xdata *)0xfd20)
 517      =3  #define     P1IM0                   (*(unsigned char volatile xdata *)0xfd21)
 518      =3  #define     P2IM0                   (*(unsigned char volatile xdata *)0xfd22)
 519      =3  #define     P3IM0                   (*(unsigned char volatile xdata *)0xfd23)
 520      =3  #define     P4IM0                   (*(unsigned char volatile xdata *)0xfd24)
 521      =3  #define     P5IM0                   (*(unsigned char volatile xdata *)0xfd25)
 522      =3  #define     P6IM0                   (*(unsigned char volatile xdata *)0xfd26)
 523      =3  #define     P7IM0                   (*(unsigned char volatile xdata *)0xfd27)
 524      =3  #define     P0IM1                   (*(unsigned char volatile xdata *)0xfd30)
 525      =3  #define     P1IM1                   (*(unsigned char volatile xdata *)0xfd31)
 526      =3  #define     P2IM1                   (*(unsigned char volatile xdata *)0xfd32)
 527      =3  #define     P3IM1                   (*(unsigned char volatile xdata *)0xfd33)
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 11  

 528      =3  #define     P4IM1                   (*(unsigned char volatile xdata *)0xfd34)
 529      =3  #define     P5IM1                   (*(unsigned char volatile xdata *)0xfd35)
 530      =3  #define     P6IM1                   (*(unsigned char volatile xdata *)0xfd36)
 531      =3  #define     P7IM1                   (*(unsigned char volatile xdata *)0xfd37)
 532      =3  #define     P0WKUE                  (*(unsigned char volatile xdata *)0xfd40)
 533      =3  #define     P1WKUE                  (*(unsigned char volatile xdata *)0xfd41)
 534      =3  #define     P2WKUE                  (*(unsigned char volatile xdata *)0xfd42)
 535      =3  #define     P3WKUE                  (*(unsigned char volatile xdata *)0xfd43)
 536      =3  #define     P4WKUE                  (*(unsigned char volatile xdata *)0xfd44)
 537      =3  #define     P5WKUE                  (*(unsigned char volatile xdata *)0xfd45)
 538      =3  #define     P6WKUE                  (*(unsigned char volatile xdata *)0xfd46)
 539      =3  #define     P7WKUE                  (*(unsigned char volatile xdata *)0xfd47)
 540      =3  
 541      =3  #define     PIN_IP                  (*(unsigned char volatile xdata *)0xfd60)
 542      =3  #define     PIN_IPH                 (*(unsigned char volatile xdata *)0xfd61)
 543      =3  
 544      =3  #define     CHIPID                  ( (unsigned char volatile xdata *)0xfde0)
 545      =3  
 546      =3  #define     CHIPID0                 (*(unsigned char volatile xdata *)0xfde0)
 547      =3  #define     CHIPID1                 (*(unsigned char volatile xdata *)0xfde1)
 548      =3  #define     CHIPID2                 (*(unsigned char volatile xdata *)0xfde2)
 549      =3  #define     CHIPID3                 (*(unsigned char volatile xdata *)0xfde3)
 550      =3  #define     CHIPID4                 (*(unsigned char volatile xdata *)0xfde4)
 551      =3  #define     CHIPID5                 (*(unsigned char volatile xdata *)0xfde5)
 552      =3  #define     CHIPID6                 (*(unsigned char volatile xdata *)0xfde6)
 553      =3  #define     CHIPID7                 (*(unsigned char volatile xdata *)0xfde7)
 554      =3  #define     CHIPID8                 (*(unsigned char volatile xdata *)0xfde8)
 555      =3  #define     CHIPID9                 (*(unsigned char volatile xdata *)0xfde9)
 556      =3  #define     CHIPID10                (*(unsigned char volatile xdata *)0xfdea)
 557      =3  #define     CHIPID11                (*(unsigned char volatile xdata *)0xfdeb)
 558      =3  #define     CHIPID12                (*(unsigned char volatile xdata *)0xfdec)
 559      =3  #define     CHIPID13                (*(unsigned char volatile xdata *)0xfded)
 560      =3  #define     CHIPID14                (*(unsigned char volatile xdata *)0xfdee)
 561      =3  #define     CHIPID15                (*(unsigned char volatile xdata *)0xfdef)
 562      =3  #define     CHIPID16                (*(unsigned char volatile xdata *)0xfdf0)
 563      =3  #define     CHIPID17                (*(unsigned char volatile xdata *)0xfdf1)
 564      =3  #define     CHIPID18                (*(unsigned char volatile xdata *)0xfdf2)
 565      =3  #define     CHIPID19                (*(unsigned char volatile xdata *)0xfdf3)
 566      =3  #define     CHIPID20                (*(unsigned char volatile xdata *)0xfdf4)
 567      =3  #define     CHIPID21                (*(unsigned char volatile xdata *)0xfdf5)
 568      =3  #define     CHIPID22                (*(unsigned char volatile xdata *)0xfdf6)
 569      =3  #define     CHIPID23                (*(unsigned char volatile xdata *)0xfdf7)
 570      =3  #define     CHIPID24                (*(unsigned char volatile xdata *)0xfdf8)
 571      =3  #define     CHIPID25                (*(unsigned char volatile xdata *)0xfdf9)
 572      =3  #define     CHIPID26                (*(unsigned char volatile xdata *)0xfdfa)
 573      =3  #define     CHIPID27                (*(unsigned char volatile xdata *)0xfdfb)
 574      =3  #define     CHIPID28                (*(unsigned char volatile xdata *)0xfdfc)
 575      =3  #define     CHIPID29                (*(unsigned char volatile xdata *)0xfdfd)
 576      =3  #define     CHIPID30                (*(unsigned char volatile xdata *)0xfdfe)
 577      =3  #define     CHIPID31                (*(unsigned char volatile xdata *)0xfdff)
 578      =3  
 579      =3  /////////////////////////////////////////////////
 580      =3  //FC00H-FCFFH
 581      =3  /////////////////////////////////////////////////
 582      =3  
 583      =3  #define     MD3                     (*(unsigned char volatile xdata *)0xfcf0)
 584      =3  #define     MD2                     (*(unsigned char volatile xdata *)0xfcf1)
 585      =3  #define     MD1                     (*(unsigned char volatile xdata *)0xfcf2)
 586      =3  #define     MD0                     (*(unsigned char volatile xdata *)0xfcf3)
 587      =3  #define     MD5                     (*(unsigned char volatile xdata *)0xfcf4)
 588      =3  #define     MD4                     (*(unsigned char volatile xdata *)0xfcf5)
 589      =3  #define     ARCON                   (*(unsigned char volatile xdata *)0xfcf6)
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 12  

 590      =3  #define     OPCON                   (*(unsigned char volatile xdata *)0xfcf7)
 591      =3  
 592      =3  /////////////////////////////////////////////////
 593      =3  //FB00H-FBFFH
 594      =3  /////////////////////////////////////////////////
 595      =3  
 596      =3  #define     COMEN                   (*(unsigned char volatile xdata *)0xfb00)
 597      =3  #define     SEGENL                  (*(unsigned char volatile xdata *)0xfb01)
 598      =3  #define     SEGENH                  (*(unsigned char volatile xdata *)0xfb02)
 599      =3  #define     LEDCTRL                 (*(unsigned char volatile xdata *)0xfb03)
 600      =3  #define     LEDCKS                  (*(unsigned char volatile xdata *)0xfb04)
 601      =3  #define     COM0_DA_L               (*(unsigned char volatile xdata *)0xfb10)
 602      =3  #define     COM1_DA_L               (*(unsigned char volatile xdata *)0xfb11)
 603      =3  #define     COM2_DA_L               (*(unsigned char volatile xdata *)0xfb12)
 604      =3  #define     COM3_DA_L               (*(unsigned char volatile xdata *)0xfb13)
 605      =3  #define     COM4_DA_L               (*(unsigned char volatile xdata *)0xfb14)
 606      =3  #define     COM5_DA_L               (*(unsigned char volatile xdata *)0xfb15)
 607      =3  #define     COM6_DA_L               (*(unsigned char volatile xdata *)0xfb16)
 608      =3  #define     COM7_DA_L               (*(unsigned char volatile xdata *)0xfb17)
 609      =3  #define     COM0_DA_H               (*(unsigned char volatile xdata *)0xfb18)
 610      =3  #define     COM1_DA_H               (*(unsigned char volatile xdata *)0xfb19)
 611      =3  #define     COM2_DA_H               (*(unsigned char volatile xdata *)0xfb1a)
 612      =3  #define     COM3_DA_H               (*(unsigned char volatile xdata *)0xfb1b)
 613      =3  #define     COM4_DA_H               (*(unsigned char volatile xdata *)0xfb1c)
 614      =3  #define     COM5_DA_H               (*(unsigned char volatile xdata *)0xfb1d)
 615      =3  #define     COM6_DA_H               (*(unsigned char volatile xdata *)0xfb1e)
 616      =3  #define     COM7_DA_H               (*(unsigned char volatile xdata *)0xfb1f)
 617      =3  #define     COM0_DC_L               (*(unsigned char volatile xdata *)0xfb20)
 618      =3  #define     COM1_DC_L               (*(unsigned char volatile xdata *)0xfb21)
 619      =3  #define     COM2_DC_L               (*(unsigned char volatile xdata *)0xfb22)
 620      =3  #define     COM3_DC_L               (*(unsigned char volatile xdata *)0xfb23)
 621      =3  #define     COM4_DC_L               (*(unsigned char volatile xdata *)0xfb24)
 622      =3  #define     COM5_DC_L               (*(unsigned char volatile xdata *)0xfb25)
 623      =3  #define     COM6_DC_L               (*(unsigned char volatile xdata *)0xfb26)
 624      =3  #define     COM7_DC_L               (*(unsigned char volatile xdata *)0xfb27)
 625      =3  #define     COM0_DC_H               (*(unsigned char volatile xdata *)0xfb28)
 626      =3  #define     COM1_DC_H               (*(unsigned char volatile xdata *)0xfb29)
 627      =3  #define     COM2_DC_H               (*(unsigned char volatile xdata *)0xfb2a)
 628      =3  #define     COM3_DC_H               (*(unsigned char volatile xdata *)0xfb2b)
 629      =3  #define     COM4_DC_H               (*(unsigned char volatile xdata *)0xfb2c)
 630      =3  #define     COM5_DC_H               (*(unsigned char volatile xdata *)0xfb2d)
 631      =3  #define     COM6_DC_H               (*(unsigned char volatile xdata *)0xfb2e)
 632      =3  #define     COM7_DC_H               (*(unsigned char volatile xdata *)0xfb2f)
 633      =3  
 634      =3  #define     TSCHEN1                 (*(unsigned char volatile xdata *)0xfb40)
 635      =3  #define     TSCHEN2                 (*(unsigned char volatile xdata *)0xfb41)
 636      =3  #define     TSCFG1                  (*(unsigned char volatile xdata *)0xfb42)
 637      =3  #define     TSCFG2                  (*(unsigned char volatile xdata *)0xfb43)
 638      =3  #define     TSWUTC                  (*(unsigned char volatile xdata *)0xfb44)
 639      =3  #define     TSCTRL                  (*(unsigned char volatile xdata *)0xfb45)
 640      =3  #define     TSSTA1                  (*(unsigned char volatile xdata *)0xfb46)
 641      =3  #define     TSSTA2                  (*(unsigned char volatile xdata *)0xfb47)
 642      =3  #define     TSRT                    (*(unsigned char volatile xdata *)0xfb48)
 643      =3  #define     TSDAT                   (*(unsigned int  volatile xdata *)0xfb49)
 644      =3  #define     TSDATH                  (*(unsigned char volatile xdata *)0xfb49)
 645      =3  #define     TSDATL                  (*(unsigned char volatile xdata *)0xfb4A)
 646      =3  #define     TSTH00                  (*(unsigned int  volatile xdata *)0xfb50)
 647      =3  #define     TSTH00H                 (*(unsigned char volatile xdata *)0xfb50)
 648      =3  #define     TSTH00L                 (*(unsigned char volatile xdata *)0xfb51)
 649      =3  #define     TSTH01                  (*(unsigned int  volatile xdata *)0xfb52)
 650      =3  #define     TSTH01H                 (*(unsigned char volatile xdata *)0xfb52)
 651      =3  #define     TSTH01L                 (*(unsigned char volatile xdata *)0xfb53)
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 13  

 652      =3  #define     TSTH02                  (*(unsigned int  volatile xdata *)0xfb54)
 653      =3  #define     TSTH02H                 (*(unsigned char volatile xdata *)0xfb54)
 654      =3  #define     TSTH02L                 (*(unsigned char volatile xdata *)0xfb55)
 655      =3  #define     TSTH03                  (*(unsigned int  volatile xdata *)0xfb56)
 656      =3  #define     TSTH03H                 (*(unsigned char volatile xdata *)0xfb56)
 657      =3  #define     TSTH03L                 (*(unsigned char volatile xdata *)0xfb57)
 658      =3  #define     TSTH04                  (*(unsigned int  volatile xdata *)0xfb58)
 659      =3  #define     TSTH04H                 (*(unsigned char volatile xdata *)0xfb58)
 660      =3  #define     TSTH04L                 (*(unsigned char volatile xdata *)0xfb59)
 661      =3  #define     TSTH05                  (*(unsigned int  volatile xdata *)0xfb5a)
 662      =3  #define     TSTH05H                 (*(unsigned char volatile xdata *)0xfb5a)
 663      =3  #define     TSTH05L                 (*(unsigned char volatile xdata *)0xfb5b)
 664      =3  #define     TSTH06                  (*(unsigned int  volatile xdata *)0xfb5c)
 665      =3  #define     TSTH06H                 (*(unsigned char volatile xdata *)0xfb5c)
 666      =3  #define     TSTH06L                 (*(unsigned char volatile xdata *)0xfb5d)
 667      =3  #define     TSTH07                  (*(unsigned int  volatile xdata *)0xfb5e)
 668      =3  #define     TSTH07H                 (*(unsigned char volatile xdata *)0xfb5e)
 669      =3  #define     TSTH07L                 (*(unsigned char volatile xdata *)0xfb5f)
 670      =3  #define     TSTH08                  (*(unsigned int  volatile xdata *)0xfb60)
 671      =3  #define     TSTH08H                 (*(unsigned char volatile xdata *)0xfb60)
 672      =3  #define     TSTH08L                 (*(unsigned char volatile xdata *)0xfb61)
 673      =3  #define     TSTH09                  (*(unsigned int  volatile xdata *)0xfb62)
 674      =3  #define     TSTH09H                 (*(unsigned char volatile xdata *)0xfb62)
 675      =3  #define     TSTH09L                 (*(unsigned char volatile xdata *)0xfb63)
 676      =3  #define     TSTH10                  (*(unsigned int  volatile xdata *)0xfb64)
 677      =3  #define     TSTH10H                 (*(unsigned char volatile xdata *)0xfb64)
 678      =3  #define     TSTH10L                 (*(unsigned char volatile xdata *)0xfb65)
 679      =3  #define     TSTH11                  (*(unsigned int  volatile xdata *)0xfb66)
 680      =3  #define     TSTH11H                 (*(unsigned char volatile xdata *)0xfb66)
 681      =3  #define     TSTH11L                 (*(unsigned char volatile xdata *)0xfb67)
 682      =3  #define     TSTH12                  (*(unsigned int  volatile xdata *)0xfb68)
 683      =3  #define     TSTH12H                 (*(unsigned char volatile xdata *)0xfb68)
 684      =3  #define     TSTH12L                 (*(unsigned char volatile xdata *)0xfb69)
 685      =3  #define     TSTH13                  (*(unsigned int  volatile xdata *)0xfb6a)
 686      =3  #define     TSTH13H                 (*(unsigned char volatile xdata *)0xfb6a)
 687      =3  #define     TSTH13L                 (*(unsigned char volatile xdata *)0xfb6b)
 688      =3  #define     TSTH14                  (*(unsigned int  volatile xdata *)0xfb6c)
 689      =3  #define     TSTH14H                 (*(unsigned char volatile xdata *)0xfb6c)
 690      =3  #define     TSTH14L                 (*(unsigned char volatile xdata *)0xfb6d)
 691      =3  #define     TSTH15                  (*(unsigned int  volatile xdata *)0xfb6e)
 692      =3  #define     TSTH15H                 (*(unsigned char volatile xdata *)0xfb6e)
 693      =3  #define     TSTH15L                 (*(unsigned char volatile xdata *)0xfb6f)
 694      =3  
 695      =3  #define     LCDCFG                  (*(unsigned char volatile xdata *)0xfb80)
 696      =3  #define     LCDCFG2                 (*(unsigned char volatile xdata *)0xfb81)
 697      =3  #define     DBLNTH                  (*(unsigned char volatile xdata *)0xfb82)
 698      =3  #define     COMLNTHL                (*(unsigned char volatile xdata *)0xdb83)
 699      =3  #define     COMLNTHM                (*(unsigned char volatile xdata *)0xfb84)
 700      =3  #define     COMLNTHH                (*(unsigned char volatile xdata *)0xfb85)
 701      =3  #define     BLINKFRPS               (*(unsigned char volatile xdata *)0xfb86)
 702      =3  #define     LCDCR                   (*(unsigned char volatile xdata *)0xfb87)
 703      =3  #define     COM_ON_A                (*(unsigned char volatile xdata *)0xfb88)
 704      =3  #define     COM_ON_B                (*(unsigned char volatile xdata *)0xfb89)
 705      =3  #define     SEG_ON_A                (*(unsigned char volatile xdata *)0xfb8a)
 706      =3  #define     SEG_ON_B                (*(unsigned char volatile xdata *)0xfb8b)
 707      =3  #define     SEG_ON_C                (*(unsigned char volatile xdata *)0xfb8c)
 708      =3  #define     SEG_ON_D                (*(unsigned char volatile xdata *)0xfb8d)
 709      =3  #define     SEG_ON_E                (*(unsigned char volatile xdata *)0xfb8e)
 710      =3  #define     C0SEGV0                 (*(unsigned char volatile xdata *)0xfb90)
 711      =3  #define     C0SEGV1                 (*(unsigned char volatile xdata *)0xfb91)
 712      =3  #define     C0SEGV2                 (*(unsigned char volatile xdata *)0xfb92)
 713      =3  #define     C0SEGV3                 (*(unsigned char volatile xdata *)0xfb93)
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 14  

 714      =3  #define     C0SEGV4                 (*(unsigned char volatile xdata *)0xfb94)
 715      =3  #define     C1SEGV0                 (*(unsigned char volatile xdata *)0xfb98)
 716      =3  #define     C1SEGV1                 (*(unsigned char volatile xdata *)0xfb99)
 717      =3  #define     C1SEGV2                 (*(unsigned char volatile xdata *)0xfb9a)
 718      =3  #define     C1SEGV3                 (*(unsigned char volatile xdata *)0xfb9b)
 719      =3  #define     C1SEGV4                 (*(unsigned char volatile xdata *)0xfb9c)
 720      =3  #define     C2SEGV0                 (*(unsigned char volatile xdata *)0xfba0)
 721      =3  #define     C2SEGV1                 (*(unsigned char volatile xdata *)0xfba1)
 722      =3  #define     C2SEGV2                 (*(unsigned char volatile xdata *)0xfba2)
 723      =3  #define     C2SEGV3                 (*(unsigned char volatile xdata *)0xfba3)
 724      =3  #define     C2SEGV4                 (*(unsigned char volatile xdata *)0xfba4)
 725      =3  #define     C3SEGV0                 (*(unsigned char volatile xdata *)0xfba8)
 726      =3  #define     C3SEGV1                 (*(unsigned char volatile xdata *)0xfba9)
 727      =3  #define     C3SEGV2                 (*(unsigned char volatile xdata *)0xfbaa)
 728      =3  #define     C3SEGV3                 (*(unsigned char volatile xdata *)0xfbab)
 729      =3  #define     C3SEGV4                 (*(unsigned char volatile xdata *)0xfbac)
 730      =3  
 731      =3  /////////////////////////////////////////////////
 732      =3  //FA00H-FAFFH
 733      =3  /////////////////////////////////////////////////
 734      =3  
 735      =3  #define     DMA_M2M_CFG             (*(unsigned char volatile xdata *)0xfa00)
 736      =3  #define     DMA_M2M_CR              (*(unsigned char volatile xdata *)0xfa01)
 737      =3  #define     DMA_M2M_STA             (*(unsigned char volatile xdata *)0xfa02)
 738      =3  #define     DMA_M2M_AMT             (*(unsigned char volatile xdata *)0xfa03)
 739      =3  #define     DMA_M2M_DONE            (*(unsigned char volatile xdata *)0xfa04)
 740      =3  #define     DMA_M2M_TXAH            (*(unsigned char volatile xdata *)0xfa05)
 741      =3  #define     DMA_M2M_TXAL            (*(unsigned char volatile xdata *)0xfa06)
 742      =3  #define     DMA_M2M_RXAH            (*(unsigned char volatile xdata *)0xfa07)
 743      =3  #define     DMA_M2M_RXAL            (*(unsigned char volatile xdata *)0xfa08)
 744      =3  
 745      =3  #define     DMA_ADC_CFG             (*(unsigned char volatile xdata *)0xfa10)
 746      =3  #define     DMA_ADC_CR              (*(unsigned char volatile xdata *)0xfa11)
 747      =3  #define     DMA_ADC_STA             (*(unsigned char volatile xdata *)0xfa12)
 748      =3  #define     DMA_ADC_RXA             (*(unsigned  int volatile xdata *)0xfa17)
 749      =3  #define     DMA_ADC_RXAH            (*(unsigned char volatile xdata *)0xfa17)
 750      =3  #define     DMA_ADC_RXAL            (*(unsigned char volatile xdata *)0xfa18)
 751      =3  #define     DMA_ADC_CFG2            (*(unsigned char volatile xdata *)0xfa19)
 752      =3  #define     DMA_ADC_CHSW0           (*(unsigned char volatile xdata *)0xfa1a)
 753      =3  #define     DMA_ADC_CHSW1           (*(unsigned char volatile xdata *)0xfa1b)
 754      =3  
 755      =3  #define     DMA_SPI_CFG             (*(unsigned char volatile xdata *)0xfa20)
 756      =3  #define     DMA_SPI_CR              (*(unsigned char volatile xdata *)0xfa21)
 757      =3  #define     DMA_SPI_STA             (*(unsigned char volatile xdata *)0xfa22)
 758      =3  #define     DMA_SPI_AMT             (*(unsigned char volatile xdata *)0xfa23)
 759      =3  #define     DMA_SPI_DONE            (*(unsigned char volatile xdata *)0xfa24)
 760      =3  #define     DMA_SPI_TXA             (*(unsigned  int volatile xdata *)0xfa25)
 761      =3  #define     DMA_SPI_TXAH            (*(unsigned char volatile xdata *)0xfa25)
 762      =3  #define     DMA_SPI_TXAL            (*(unsigned char volatile xdata *)0xfa26)
 763      =3  #define     DMA_SPI_RXA             (*(unsigned  int volatile xdata *)0xfa27)
 764      =3  #define     DMA_SPI_RXAH            (*(unsigned char volatile xdata *)0xfa27)
 765      =3  #define     DMA_SPI_RXAL            (*(unsigned char volatile xdata *)0xfa28)
 766      =3  #define     DMA_SPI_CFG2            (*(unsigned char volatile xdata *)0xfa29)
 767      =3  
 768      =3  #define     DMA_UR1T_CFG            (*(unsigned char volatile xdata *)0xfa30)
 769      =3  #define     DMA_UR1T_CR             (*(unsigned char volatile xdata *)0xfa31)
 770      =3  #define     DMA_UR1T_STA            (*(unsigned char volatile xdata *)0xfa32)
 771      =3  #define     DMA_UR1T_AMT            (*(unsigned char volatile xdata *)0xfa33)
 772      =3  #define     DMA_UR1T_DONE           (*(unsigned char volatile xdata *)0xfa34)
 773      =3  #define     DMA_UR1T_TXA            (*(unsigned  int volatile xdata *)0xfa35)
 774      =3  #define     DMA_UR1T_TXAH           (*(unsigned char volatile xdata *)0xfa35)
 775      =3  #define     DMA_UR1T_TXAL           (*(unsigned char volatile xdata *)0xfa36)
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 15  

 776      =3  #define     DMA_UR1R_CFG            (*(unsigned char volatile xdata *)0xfa38)
 777      =3  #define     DMA_UR1R_CR             (*(unsigned char volatile xdata *)0xfa39)
 778      =3  #define     DMA_UR1R_STA            (*(unsigned char volatile xdata *)0xfa3a)
 779      =3  #define     DMA_UR1R_AMT            (*(unsigned char volatile xdata *)0xfa3b)
 780      =3  #define     DMA_UR1R_DONE           (*(unsigned char volatile xdata *)0xfa3c)
 781      =3  #define     DMA_UR1R_RXA            (*(unsigned  int volatile xdata *)0xfa3d)
 782      =3  #define     DMA_UR1R_RXAH           (*(unsigned char volatile xdata *)0xfa3d)
 783      =3  #define     DMA_UR1R_RXAL           (*(unsigned char volatile xdata *)0xfa3e)
 784      =3  
 785      =3  #define     DMA_UR2T_CFG            (*(unsigned char volatile xdata *)0xfa40)
 786      =3  #define     DMA_UR2T_CR             (*(unsigned char volatile xdata *)0xfa41)
 787      =3  #define     DMA_UR2T_STA            (*(unsigned char volatile xdata *)0xfa42)
 788      =3  #define     DMA_UR2T_AMT            (*(unsigned char volatile xdata *)0xfa43)
 789      =3  #define     DMA_UR2T_DONE           (*(unsigned char volatile xdata *)0xfa44)
 790      =3  #define     DMA_UR2T_TXA            (*(unsigned  int volatile xdata *)0xfa45)
 791      =3  #define     DMA_UR2T_TXAH           (*(unsigned char volatile xdata *)0xfa45)
 792      =3  #define     DMA_UR2T_TXAL           (*(unsigned char volatile xdata *)0xfa46)
 793      =3  #define     DMA_UR2R_CFG            (*(unsigned char volatile xdata *)0xfa48)
 794      =3  #define     DMA_UR2R_CR             (*(unsigned char volatile xdata *)0xfa49)
 795      =3  #define     DMA_UR2R_STA            (*(unsigned char volatile xdata *)0xfa4a)
 796      =3  #define     DMA_UR2R_AMT            (*(unsigned char volatile xdata *)0xfa4b)
 797      =3  #define     DMA_UR2R_DONE           (*(unsigned char volatile xdata *)0xfa4c)
 798      =3  #define     DMA_UR2R_RXA            (*(unsigned  int volatile xdata *)0xfa4d)
 799      =3  #define     DMA_UR2R_RXAH           (*(unsigned char volatile xdata *)0xfa4d)
 800      =3  #define     DMA_UR2R_RXAL           (*(unsigned char volatile xdata *)0xfa4e)
 801      =3  
 802      =3  #define     DMA_UR3T_CFG            (*(unsigned char volatile xdata *)0xfa50)
 803      =3  #define     DMA_UR3T_CR             (*(unsigned char volatile xdata *)0xfa51)
 804      =3  #define     DMA_UR3T_STA            (*(unsigned char volatile xdata *)0xfa52)
 805      =3  #define     DMA_UR3T_AMT            (*(unsigned char volatile xdata *)0xfa53)
 806      =3  #define     DMA_UR3T_DONE           (*(unsigned char volatile xdata *)0xfa54)
 807      =3  #define     DMA_UR3T_TXA            (*(unsigned  int volatile xdata *)0xfa55)
 808      =3  #define     DMA_UR3T_TXAH           (*(unsigned char volatile xdata *)0xfa55)
 809      =3  #define     DMA_UR3T_TXAL           (*(unsigned char volatile xdata *)0xfa56)
 810      =3  #define     DMA_UR3R_CFG            (*(unsigned char volatile xdata *)0xfa58)
 811      =3  #define     DMA_UR3R_CR             (*(unsigned char volatile xdata *)0xfa59)
 812      =3  #define     DMA_UR3R_STA            (*(unsigned char volatile xdata *)0xfa5a)
 813      =3  #define     DMA_UR3R_AMT            (*(unsigned char volatile xdata *)0xfa5b)
 814      =3  #define     DMA_UR3R_DONE           (*(unsigned char volatile xdata *)0xfa5c)
 815      =3  #define     DMA_UR3R_RXA            (*(unsigned  int volatile xdata *)0xfa5d)
 816      =3  #define     DMA_UR3R_RXAH           (*(unsigned char volatile xdata *)0xfa5d)
 817      =3  #define     DMA_UR3R_RXAL           (*(unsigned char volatile xdata *)0xfa5e)
 818      =3  
 819      =3  #define     DMA_UR4T_CFG            (*(unsigned char volatile xdata *)0xfa60)
 820      =3  #define     DMA_UR4T_CR             (*(unsigned char volatile xdata *)0xfa61)
 821      =3  #define     DMA_UR4T_STA            (*(unsigned char volatile xdata *)0xfa62)
 822      =3  #define     DMA_UR4T_AMT            (*(unsigned char volatile xdata *)0xfa63)
 823      =3  #define     DMA_UR4T_DONE           (*(unsigned char volatile xdata *)0xfa64)
 824      =3  #define     DMA_UR4T_TXA            (*(unsigned  int volatile xdata *)0xfa65)
 825      =3  #define     DMA_UR4T_TXAH           (*(unsigned char volatile xdata *)0xfa65)
 826      =3  #define     DMA_UR4T_TXAL           (*(unsigned char volatile xdata *)0xfa66)
 827      =3  #define     DMA_UR4R_CFG            (*(unsigned char volatile xdata *)0xfa68)
 828      =3  #define     DMA_UR4R_CR             (*(unsigned char volatile xdata *)0xfa69)
 829      =3  #define     DMA_UR4R_STA            (*(unsigned char volatile xdata *)0xfa6a)
 830      =3  #define     DMA_UR4R_AMT            (*(unsigned char volatile xdata *)0xfa6b)
 831      =3  #define     DMA_UR4R_DONE           (*(unsigned char volatile xdata *)0xfa6c)
 832      =3  #define     DMA_UR4R_RXA            (*(unsigned  int volatile xdata *)0xfa6d)
 833      =3  #define     DMA_UR4R_RXAH           (*(unsigned char volatile xdata *)0xfa6d)
 834      =3  #define     DMA_UR4R_RXAL           (*(unsigned char volatile xdata *)0xfa6e)
 835      =3  
 836      =3  #define     DMA_LCM_CFG             (*(unsigned char volatile xdata *)0xfa70)
 837      =3  #define     DMA_LCM_CR              (*(unsigned char volatile xdata *)0xfa71)
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 16  

 838      =3  #define     DMA_LCM_STA             (*(unsigned char volatile xdata *)0xfa72)
 839      =3  #define     DMA_LCM_AMT             (*(unsigned char volatile xdata *)0xfa73)
 840      =3  #define     DMA_LCM_DONE            (*(unsigned char volatile xdata *)0xfa74)
 841      =3  #define     DMA_LCM_TXA             (*(unsigned  int volatile xdata *)0xfa75)
 842      =3  #define     DMA_LCM_TXAH            (*(unsigned char volatile xdata *)0xfa75)
 843      =3  #define     DMA_LCM_TXAL            (*(unsigned char volatile xdata *)0xfa76)
 844      =3  #define     DMA_LCM_RXA             (*(unsigned  int volatile xdata *)0xfa77)
 845      =3  #define     DMA_LCM_RXAH            (*(unsigned char volatile xdata *)0xfa77)
 846      =3  #define     DMA_LCM_RXAL            (*(unsigned char volatile xdata *)0xfa78)
 847      =3  
 848      =3  /////////////////////////////////////////////////
 849      =3  //USB Control Regiter
 850      =3  /////////////////////////////////////////////////
 851      =3  
 852      =3  //sfr       USBCLK      =           0xdc;
 853      =3  //sfr       USBDAT      =           0xec;
 854      =3  //sfr       USBCON      =           0xf4;
 855      =3  //sfr       USBADR      =           0xfc;
 856      =3  
 857      =3  // π”√∑Ω∑®:
 858      =3  //      char dat;
 859      =3  //
 860      =3  //      READ_USB(CSR0, dat);        //∂¡USBºƒ¥Ê∆˜
 861      =3  //      WRITE_USB(FADDR, 0x00);     //–¥USBºƒ¥Ê∆˜
 862      =3  
 863      =3  #define     READ_USB(reg, dat)          \
 864      =3              {                           \
 865      =3                  while (USBADR & 0x80);  \
 866      =3                  USBADR = (reg) | 0x80;  \
 867      =3                  while (USBADR & 0x80);  \
 868      =3                  (dat) = USBDAT;         \
 869      =3              }
 870      =3  
 871      =3  #define     WRITE_USB(reg, dat)         \
 872      =3              {                           \
 873      =3                  while (USBADR & 0x80);  \
 874      =3                  USBADR = (reg) & 0x7f;  \
 875      =3                  USBDAT = (dat);         \
 876      =3              }
 877      =3  
 878      =3  #define     USBBASE                 0
 879      =3  #define     FADDR                   (USBBASE + 0)
 880      =3  #define     UPDATE                  0x80
 881      =3  #define     POWER                   (USBBASE + 1)
 882      =3  #define     ISOUD                   0x80
 883      =3  #define     USBRST                  0x08
 884      =3  #define     USBRSU                  0x04
 885      =3  #define     USBSUS                  0x02
 886      =3  #define     ENSUS                   0x01
 887      =3  #define     INTRIN1                 (USBBASE + 2)
 888      =3  #define     EP5INIF                 0x20
 889      =3  #define     EP4INIF                 0x10
 890      =3  #define     EP3INIF                 0x08
 891      =3  #define     EP2INIF                 0x04
 892      =3  #define     EP1INIF                 0x02
 893      =3  #define     EP0IF                   0x01
 894      =3  #define     INTROUT1                (USBBASE + 4)
 895      =3  #define     EP5OUTIF                0x20
 896      =3  #define     EP4OUTIF                0x10
 897      =3  #define     EP3OUTIF                0x08
 898      =3  #define     EP2OUTIF                0x04
 899      =3  #define     EP1OUTIF                0x02
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 17  

 900      =3  #define     INTRUSB                 (USBBASE + 6)
 901      =3  #define     SOFIF                   0x08
 902      =3  #define     RSTIF                   0x04
 903      =3  #define     RSUIF                   0x02
 904      =3  #define     SUSIF                   0x01
 905      =3  #define     INTRIN1E                (USBBASE + 7)
 906      =3  #define     EP5INIE                 0x20
 907      =3  #define     EP4INIE                 0x10
 908      =3  #define     EP3INIE                 0x08
 909      =3  #define     EP2INIE                 0x04
 910      =3  #define     EP1INIE                 0x02
 911      =3  #define     EP0IE                   0x01
 912      =3  #define     INTROUT1E               (USBBASE + 9)
 913      =3  #define     EP5OUTIE                0x20
 914      =3  #define     EP4OUTIE                0x10
 915      =3  #define     EP3OUTIE                0x08
 916      =3  #define     EP2OUTIE                0x04
 917      =3  #define     EP1OUTIE                0x02
 918      =3  #define     INTRUSBE                (USBBASE + 11)
 919      =3  #define     SOFIE                   0x08
 920      =3  #define     RSTIE                   0x04
 921      =3  #define     RSUIE                   0x02
 922      =3  #define     SUSIE                   0x01
 923      =3  #define     FRAME1                  (USBBASE + 12)
 924      =3  #define     FRAME2                  (USBBASE + 13)
 925      =3  #define     INDEX                   (USBBASE + 14)
 926      =3  #define     INMAXP                  (USBBASE + 16)
 927      =3  #define     CSR0                    (USBBASE + 17)
 928      =3  #define     SSUEND                  0x80
 929      =3  #define     SOPRDY                  0x40
 930      =3  #define     SDSTL                   0x20
 931      =3  #define     SUEND                   0x10
 932      =3  #define     DATEND                  0x08
 933      =3  #define     STSTL                   0x04
 934      =3  #define     IPRDY                   0x02
 935      =3  #define     OPRDY                   0x01
 936      =3  #define     INCSR1                  (USBBASE + 17)
 937      =3  #define     INCLRDT                 0x40
 938      =3  #define     INSTSTL                 0x20
 939      =3  #define     INSDSTL                 0x10
 940      =3  #define     INFLUSH                 0x08
 941      =3  #define     INUNDRUN                0x04
 942      =3  #define     INFIFONE                0x02
 943      =3  #define     INIPRDY                 0x01
 944      =3  #define     INCSR2                  (USBBASE + 18)
 945      =3  #define     INAUTOSET               0x80
 946      =3  #define     INISO                   0x40
 947      =3  #define     INMODEIN                0x20
 948      =3  #define     INMODEOUT               0x00
 949      =3  #define     INENDMA                 0x10
 950      =3  #define     INFCDT                  0x08
 951      =3  #define     OUTMAXP                 (USBBASE + 19)
 952      =3  #define     OUTCSR1                 (USBBASE + 20)
 953      =3  #define     OUTCLRDT                0x80
 954      =3  #define     OUTSTSTL                0x40
 955      =3  #define     OUTSDSTL                0x20
 956      =3  #define     OUTFLUSH                0x10
 957      =3  #define     OUTDATERR               0x08
 958      =3  #define     OUTOVRRUN               0x04
 959      =3  #define     OUTFIFOFUL              0x02
 960      =3  #define     OUTOPRDY                0x01
 961      =3  #define     OUTCSR2                 (USBBASE + 21)
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 18  

 962      =3  #define     OUTAUTOCLR              0x80
 963      =3  #define     OUTISO                  0x40
 964      =3  #define     OUTENDMA                0x20
 965      =3  #define     OUTDMAMD                0x10
 966      =3  #define     COUNT0                  (USBBASE + 22)
 967      =3  #define     OUTCOUNT1               (USBBASE + 22)
 968      =3  #define     OUTCOUNT2               (USBBASE + 23)
 969      =3  #define     FIFO0                   (USBBASE + 32)
 970      =3  #define     FIFO1                   (USBBASE + 33)
 971      =3  #define     FIFO2                   (USBBASE + 34)
 972      =3  #define     FIFO3                   (USBBASE + 35)
 973      =3  #define     FIFO4                   (USBBASE + 36)
 974      =3  #define     FIFO5                   (USBBASE + 37)
 975      =3  #define     UTRKCTL                 (USBBASE + 48)
 976      =3  #define     UTRKSTS                 (USBBASE + 49)
 977      =3  
 978      =3  /////////////////////////////////////////////////
 979      =3  //Interrupt Vector
 980      =3  /////////////////////////////////////////////////
 981      =3  
 982      =3  #define     INT0_VECTOR             0       //0003H
 983      =3  #define     TMR0_VECTOR             1       //000BH
 984      =3  #define     INT1_VECTOR             2       //0013H
 985      =3  #define     TMR1_VECTOR             3       //001BH
 986      =3  #define     UART1_VECTOR            4       //0023H
 987      =3  #define     ADC_VECTOR              5       //002BH
 988      =3  #define     LVD_VECTOR              6       //0033H
 989      =3  #define     UART2_VECTOR            8       //0043H
 990      =3  #define     SPI_VECTOR              9       //004BH
 991      =3  #define     INT2_VECTOR             10      //0053H
 992      =3  #define     INT3_VECTOR             11      //005BH
 993      =3  #define     TMR2_VECTOR             12      //0063H
 994      =3  #define     USER_VECTOR             13      //006BH
 995      =3  #define     INT4_VECTOR             16      //0083H
 996      =3  #define     UART3_VECTOR            17      //008BH
 997      =3  #define     UART4_VECTOR            18      //0093H
 998      =3  #define     TMR3_VECTOR             19      //009BH
 999      =3  #define     TMR4_VECTOR             20      //00A3H
1000      =3  #define     CMP_VECTOR              21      //00ABH
1001      =3  #define     I2C_VECTOR              24      //00C3H
1002      =3  #define     USB_VECTOR              25      //00CBH
1003      =3  #define     PWMA_VECTOR             26      //00D3H
1004      =3  #define     PWMB_VECTOR             27      //00DBH
1005      =3  
1006      =3  #define     TKSU_VECTOR             35      //011BH
1007      =3  #define     RTC_VECTOR              36      //0123H
1008      =3  #define     P0INT_VECTOR            37      //012BH
1009      =3  #define     P1INT_VECTOR            38      //0133H
1010      =3  #define     P2INT_VECTOR            39      //013BH
1011      =3  #define     P3INT_VECTOR            40      //0143H
1012      =3  #define     P4INT_VECTOR            41      //014BH
1013      =3  #define     P5INT_VECTOR            42      //0153H
1014      =3  #define     P6INT_VECTOR            43      //015BH
1015      =3  #define     P7INT_VECTOR            44      //0163H
1016      =3  #define     DMA_M2M_VECTOR          47      //017BH
1017      =3  #define     DMA_ADC_VECTOR          48      //0183H
1018      =3  #define     DMA_SPI_VECTOR          49      //018BH
1019      =3  #define     DMA_UR1T_VECTOR         50      //0193H
1020      =3  #define     DMA_UR1R_VECTOR         51      //019BH
1021      =3  #define     DMA_UR2T_VECTOR         52      //01A3H
1022      =3  #define     DMA_UR2R_VECTOR         53      //01ABH
1023      =3  #define     DMA_UR3T_VECTOR         54      //01B3H
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 19  

1024      =3  #define     DMA_UR3R_VECTOR         55      //01BBH
1025      =3  #define     DMA_UR4T_VECTOR         56      //01C3H
1026      =3  #define     DMA_UR4R_VECTOR         57      //01CBH
1027      =3  #define     DMA_LCM_VECTOR          58      //01D3H
1028      =3  #define     LCM_VECTOR              59      //01DBH
1029      =3  
1030      =3  /////////////////////////////////////////////////
1031      =3  #define EAXSFR()    P_SW2 |= 0x80   /* MOVX A,@DPTR/MOVX @DPTR,A÷∏¡Óµƒ≤Ÿ◊˜∂‘œÛŒ™¿©’πSFR(XSFR) */
1032      =3  #define EAXRAM()    P_SW2 &= ~0x80    /* MOVX A,@DPTR/MOVX @DPTR,A÷∏¡Óµƒ≤Ÿ◊˜∂‘œÛŒ™¿©’πRAM(XRAM) */
1033      =3  
1034      =3  
1035      =3  /////////////////////////////////////////////////
1036      =3  #define NOP1()  _nop_()
1037      =3  #define NOP2()  NOP1(),NOP1()
1038      =3  #define NOP3()  NOP2(),NOP1()
1039      =3  #define NOP4()  NOP3(),NOP1()
1040      =3  #define NOP5()  NOP4(),NOP1()
1041      =3  #define NOP6()  NOP5(),NOP1()
1042      =3  #define NOP7()  NOP6(),NOP1()
1043      =3  #define NOP8()  NOP7(),NOP1()
1044      =3  #define NOP9()  NOP8(),NOP1()
1045      =3  #define NOP10() NOP9(),NOP1()
1046      =3  #define NOP11() NOP10(),NOP1()
1047      =3  #define NOP12() NOP11(),NOP1()
1048      =3  #define NOP13() NOP12(),NOP1()
1049      =3  #define NOP14() NOP13(),NOP1()
1050      =3  #define NOP15() NOP14(),NOP1()
1051      =3  #define NOP16() NOP15(),NOP1()
1052      =3  #define NOP17() NOP16(),NOP1()
1053      =3  #define NOP18() NOP17(),NOP1()
1054      =3  #define NOP19() NOP18(),NOP1()
1055      =3  #define NOP20() NOP19(),NOP1()
1056      =3  #define NOP21() NOP20(),NOP1()
1057      =3  #define NOP22() NOP21(),NOP1()
1058      =3  #define NOP23() NOP22(),NOP1()
1059      =3  #define NOP24() NOP23(),NOP1()
1060      =3  #define NOP25() NOP24(),NOP1()
1061      =3  #define NOP26() NOP25(),NOP1()
1062      =3  #define NOP27() NOP26(),NOP1()
1063      =3  #define NOP28() NOP27(),NOP1()
1064      =3  #define NOP29() NOP28(),NOP1()
1065      =3  #define NOP30() NOP29(),NOP1()
1066      =3  #define NOP31() NOP30(),NOP1()
1067      =3  #define NOP32() NOP31(),NOP1()
1068      =3  #define NOP33() NOP32(),NOP1()
1069      =3  #define NOP34() NOP33(),NOP1()
1070      =3  #define NOP35() NOP34(),NOP1()
1071      =3  #define NOP36() NOP35(),NOP1()
1072      =3  #define NOP37() NOP36(),NOP1()
1073      =3  #define NOP38() NOP37(),NOP1()
1074      =3  #define NOP39() NOP38(),NOP1()
1075      =3  #define NOP40() NOP39(),NOP1()
1076      =3  #define NOP(N)  NOP##N()
1077      =3  
1078      =3  
1079      =3  /////////////////////////////////////////////////
1080      =3  
1081      =3  #endif
1082      =3  
  48      =2  #include<intrins.h>
   1      =3  /*--------------------------------------------------------------------------
   2      =3  INTRINS.H
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 20  

   3      =3  
   4      =3  Intrinsic functions for C51.
   5      =3  Copyright (c) 1988-2010 Keil Elektronik GmbH and ARM Germany GmbH
   6      =3  All rights reserved.
   7      =3  --------------------------------------------------------------------------*/
   8      =3  
   9      =3  #ifndef __INTRINS_H__
  10      =3  #define __INTRINS_H__
  11      =3  
  12      =3  #pragma SAVE
  13      =3  
  14      =3  #if defined (__CX2__)
           =3 #pragma FUNCTIONS(STATIC)
           =3 /* intrinsic functions are reentrant, but need static attribute */
           =3 #endif
  18      =3  
  19      =3  extern void          _nop_     (void);
  20      =3  extern bit           _testbit_ (bit);
  21      =3  extern unsigned char _cror_    (unsigned char, unsigned char);
  22      =3  extern unsigned int  _iror_    (unsigned int,  unsigned char);
  23      =3  extern unsigned long _lror_    (unsigned long, unsigned char);
  24      =3  extern unsigned char _crol_    (unsigned char, unsigned char);
  25      =3  extern unsigned int  _irol_    (unsigned int,  unsigned char);
  26      =3  extern unsigned long _lrol_    (unsigned long, unsigned char);
  27      =3  extern unsigned char _chkfloat_(float);
  28      =3  #if defined (__CX2__)
           =3 extern int           abs       (int);
           =3 extern void          _illop_   (void);
           =3 #endif
  32      =3  #if !defined (__CX2__)
  33      =3  extern void          _push_    (unsigned char _sfr);
  34      =3  extern void          _pop_     (unsigned char _sfr);
  35      =3  #endif
  36      =3  
  37      =3  #pragma RESTORE
  38      =3  
  39      =3  #endif
  40      =3  
  49      =2  
  50      =2  #define u8 unsigned char
  51      =2  #define u16 unsigned int
  52      =2  #define s16 signed int
  53      =2  #define u32 unsigned long
  54      =2  #define s32 signed long
  55      =2  #define word_t u8
  56      =2  #define uint8_t u8
  57      =2  #define bool bit
  58      =2  
  59      =2  /*////////////////////////////////////////////////////////////////////////////*/
  60      =2  #elif ARDUINO_ATMEAG328P
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 
           =2 #include <arduino.h>
           =2 
           =2 #define u8 unsigned char
           =2 #define u16 unsigned int
           =2 #define s16 signed int
           =2 #define u32 unsigned long
           =2 #define word_t u8
           =2 #define uint8_t u8
           =2 #define idata
           =2 #define xdata
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 21  

           =2 #define code
           =2 
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 
           =2 #else
           =2   #error "board not defined!"
           =2 #endif
  80      =2  
  81      =2  /*////////////////////////////////////////////////////////////////////////////*/
  82      =2  
  83      =2  /******************************************************************************/
  84      =2  /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  85      =2  
  86      =2  #endif
  19      =1  #include "config.h"
   1      =2  /*
   2      =2  ********************************************************************************
   3      =2  *                             ---ofme---
   4      =2  *           Copyleft (c) 2021-2023, ÂæÆÈ£éÂ±±Ë∞∑ / ofourme@163.com
   5      =2  *           License: LGPL
   6      =2  *
   7      =2  *   CONFIG.H-V1.1.0 (2023.Oct.25th)
   8      =2  *
   9      =2  ********************************************************************************
  10      =2  */
  11      =2  
  12      =2  #ifndef __CONFIG_H__
  13      =2  #define __CONFIG_H__
  14      =2  
  15      =2  /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  16      =2  /******************************************************************************/
  17      =2  
  18      =2  #include "hw.h"
   1      =3  /*
   2      =3  ********************************************************************************
   3      =3  *                             ---ofme---
   4      =3  *           Copyleft (c) 2021-2023, ÂæÆÈ£éÂ±±Ë∞∑ / ofourme@163.com
   5      =3  *           License: LGPL
   6      =3  *
   7      =3  *   HW.H-V1.0.0 (2023.Oct.25th)
   8      =3  *
   9      =3  ********************************************************************************
  10      =3  */
  11      =3  
  12      =3  #ifndef __HW_H__
           =3 #define __HW_H__
           =3 
           =3 /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
           =3 /******************************************************************************/
           =3 
           =3 #define STC_15W408AS    0
           =3 #define STC_15W408AS_SOP20  0
           =3 #define ARDUINO_ATMEAG328P  0
           =3 #define STC_8H        1
           =3 #define STC_8H_TSSOP20    1
           =3 
           =3 #define FOSC  12000000UL
           =3 
           =3 /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
           =3 
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 #if STC_15W408AS
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 22  

           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 
           =3 #include "stc15w.h"
           =3 #include<intrins.h>
           =3 
           =3 #define u8 unsigned char
           =3 #define u16 unsigned int
           =3 #define s16 signed int
           =3 #define u32 unsigned long
           =3 #define word_t u8
           =3 #define uint8_t u8
           =3 #define bool bit
           =3   
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 #elif STC_8H
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 
           =3 #include "STC8H.h"
           =3 #include<intrins.h>
           =3 
           =3 #define u8 unsigned char
           =3 #define u16 unsigned int
           =3 #define s16 signed int
           =3 #define u32 unsigned long
           =3 #define s32 signed long
           =3 #define word_t u8
           =3 #define uint8_t u8
           =3 #define bool bit
           =3 
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 #elif ARDUINO_ATMEAG328P
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 
           =3 #include <arduino.h>
           =3 
           =3 #define u8 unsigned char
           =3 #define u16 unsigned int
           =3 #define s16 signed int
           =3 #define u32 unsigned long
           =3 #define word_t u8
           =3 #define uint8_t u8
           =3 #define idata
           =3 #define xdata
           =3 #define code
           =3 
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 
           =3 #else
           =3   #error "board not defined!"
           =3 #endif
           =3 
           =3 /*////////////////////////////////////////////////////////////////////////////*/
           =3 
           =3 /******************************************************************************/
           =3 /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
           =3 
           =3 #endif
  19      =2  #include "loli3_pact.h"
   1      =3  /*
   2      =3  ********************************************************************************
   3      =3  *                             ---ofme---
   4      =3  *           Copyleft (c) 2008-2023, ÂæÆÈ£éÂ±±Ë∞∑/ofourme@163.com
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 23  

   5      =3  *           License: LGPL
   6      =3  *
   7      =3  *   LOLI3_PACT.H-V1.1.0 (2023.Sep.18th)
   8      =3  *
   9      =3  ********************************************************************************
  10      =3  */
  11      =3  
  12      =3  #ifndef __LOLI3_PACT_H__
  13      =3  #define __LOLI3_PACT_H__
  14      =3  
  15      =3  /*-DO NOT ADD YOUR CODE BEFORE HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  16      =3  /******************************************************************************/
  17      =3  /*////////////////////////////////////////////////////////////////////////////*/
  18      =3  
  19      =3  //‰ΩøÁî®‚ÄúLOVE‚Äù‰Ωú‰∏∫ÈªòËÆ§Âú∞ÂùÄ
  20      =3  #define LOLI3_ADDRESS_STARTUP           'L','O','V','E','!'
  21      =3  #define LOLI3_NRF_DATA_LENGTH           11
  22      =3  
  23      =3  //‰ΩøÁî®33È¢ëÈÅì‰Ωú‰∏∫Êé•Êî∂Êú∫ÈáçËøûCHANNEL
  24      =3  #define LOLI3_CHANNEL_STARTUP           33
  25      =3  //‰ΩøÁî®66È¢ëÈÅì‰Ωú‰∏∫Êé•Êî∂Êú∫ÂêØÂä®CHANNEL
  26      =3  #define LOLI3_CHANNEL_CONNECT           66
  27      =3  //Ë∑≥È¢ëCHANNELÊï∞Èáè
  28      =3  #define LOLI3_NUM_HOPPING               5
  29      =3  //ÈªòËÆ§Áî®‰∫éË∑≥È¢ëÁöÑ5‰∏™CHANNEL
  30      =3  #define LOLI3_HOPPING_STARTUP           10,35,60,85,110
  31      =3  
  32      =3  /*////////////////////////////////////////////////////////////////////////////*/
  33      =3  // update(20230918):
  34      =3  // ËàµÊú∫ËæìÂÖ•ËÑâÂÆΩ0.5~2.5msÔºåÂë®Êúü20msÔºõËà™Ê®°ËàµÊú∫‰∏ÄËà¨‰ΩøÁî®ËÑâÂÆΩ1~2ms„ÄÇ
  35      =3  // loli3Êé•Êî∂Êú∫ÂØπÊé•Êî∂Âà∞ÁöÑÈÄöÈÅìÊï∞ÊçÆ‰Ωú*27/20=1.35ËøêÁÆóÔºåÂç≥ËÑâÂÆΩ=0.811+CH*27/20
  36      =3  // ‰∏∫‰øùÊåÅÂÖºÂÆπÔºåÂêåÊó∂ÊèêÂçáÊïàÁéáÔºå‰øÆÊîπ‰∏∫*43(*43ÂèØ‰øùËØÅ10‰ΩçCHÂÄº‰∏çÊ∫¢Âá∫16‰Ωç)ÂêåÊó∂Âè≥Áßª5‰
             -Ωç=*43/32=1.34375~=1.35Ôºå
  37      =3  //     --> ÂêåÊó∂‰øÆÊîπÊúÄ‰ΩéËÑâÂÆΩ‰∏∫0.813‰ª•‰øùÊåÅ‰∏≠‰ΩçÂÄº1.5ms‰∏çÂèòÔºåÂç≥ËÑâÂÆΩ=0.813+CH*43>>5
  38      =3  #define LOLI3_RECV_SERVO_RANGE_MUL      43
  39      =3  #define LOLI3_RECV_SERVO_RANGE_R_SHIFT  5
  40      =3  // ÂàÜÊûêloli3Êé•Êî∂Êú∫Ê∫êÁ†ÅÔºåÂΩìpwmÊï∞ÂÄºÂ∞è‰∫é‰∏ÄÂÆöÂÄºÔºåÁõ¥Êé•ËæìÂá∫0„ÄÇÊ≠§ÂèÇÊï∞ÊåâÊúÄÈ´ò1023ËÆæÁΩÆ
             -„ÄÇ
  41      =3  #define LOLI3_RECV_PWM_MINNUM_DEFAULT   100
  42      =3  
  43      =3  /******************************************************************************/
  44      =3  /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
  45      =3  
  46      =3  #endif
  20      =2  
  21      =2  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  22      =2  
  23      =2  // enable SBUS_DEBUG  would disable SBUS pin output
  24      =2  //#define SBUS_DEBUG
  25      =2  //----------------------------------------------------------------------------//
  26      =2  // Set the SBUS baud rate. UART always be SERIAL_8E2(8‰ΩçÊï∞ÊçÆÔºåÂÅ∂Ê†°È™åÔºå2‰ΩçÂÅúÊ≠¢‰Ωç)
  27      =2  // Optional: SBUS_BPS_9600, SBUS_BPS_115200, SBUS_BPS_100K; Default: SBUS_BPS_100K.
  28      =2  //#define SBUS_BPS_115200
  29      =2  #define SBUS_BPS_100K
  30      =2  //----------------------------------------------------------------------------//
  31      =2  // ËΩÆËØ¢‰ªªÂä°ÂÆöÊó∂Âô®Ê≠•ËøõÁ≤æÂ∫¶ÔºåÈªòËÆ§3ms
  32      =2  #define LOLI3_RECV_TIMERS_TICK_SETPS 3
  33      =2  //----------------------------------------------------------------------------//
  34      =2  // LOLI3_RECV_PWM_MINNUM: LOLI3_RECV_PWM_MINNUM_DEFAULT would compatibility with loli3 original.
  35      =2  //                        0 would set the minimum if possible.  ÊëáÊùÜËôö‰ΩçÂ§ßÂèØËÉΩÂØºËá¥Êó†Ê≥ïËæìÂá∫0.
  36      =2  #define LOLI3_RECV_PWM_MINNUM   LOLI3_RECV_PWM_MINNUM_DEFAULT
  37      =2  // #define LOLI3_RECV_PWM_MINNUM 0
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 24  

  38      =2  //----------------------------------------------------------------------------//
  39      =2  // Âä®ÂäõÁîµÊ±†ÁîµÈòªÂàÜÂéãÊîæÂ§ßÂÄçÊï∞ÔºåÊ≠£Â∏∏ÊòØ3„ÄÇ
  40      =2  #define VOLTAGE_BAT_MULTIPLE 3
  41      =2  //----------------------------------------------------------------------------//
  42      =2  // ËäØÁâáÁîµÂéãË∞ÉÊï¥Á≥ªÊï∞ÔºåÂæÆË∞ÉÊ≠§Á≥ªÊï∞‰ª•ÂåπÈÖçÂêÑ‰∏™ËäØÁâá„ÄÇ
  43      =2  /*
  44      =2    BGV: ÂÜÖÈÉ®ÂèÇËÄÉ‰ø°Âè∑Ê∫êÁîµÂéãADCÂÄºÔºõBGV5Ôºö5VÊó∂ADCÂÄºÔºõBGVxÔºöVCCÂèÇËÄÉÁîµÂéãÊó∂ËΩ¨Êç¢ÁöÑADCÂÄº
  45      =2    STC15W: ÂÜÖÈÉ®ÂèÇËÄÉ‰ø°Âè∑Ê∫êÁîµÂéãÂõ∫ÂÆö‰ΩÜ‰∏çÁ°ÆÂÆöÔºåÂõ∫ÂÆöÁîµÂéãVa=BGV5/1024*5=BGVx/1024*VCC
  46      =2            --> VCC=BGV5/1024*5*1024/BGVx=BGV5*5/BGVx
  47      =2    STC8H:  ÂÜÖÈÉ®ÂèÇËÄÉ‰ø°Âè∑Ê∫êÁîµÂéãÂõ∫ÂÆö(1.19v)Ôºå 1.19v=BGV5/1024*5=BGVx/1024*VCC
  48      =2            --> VCC=BGV5/1024*5*1024/BGVx=BGV5*5/BGVx
  49      =2            ÂÖ∂‰∏≠BGV5=1.19*1024/5+0.5~=244
  50      =2  */
  51      =2  #if STC_15W408AS
           =2   #define BGV5  260
           =2 #elif STC_8H
  54      =2    #define BGV5  ((unsigned long)(1.19*1024/5+0.5))
  55      =2  #else
           =2   #err "BGV5 not defined."
           =2 #endif
  58      =2    // Ê≠§Â§Ñ5‰∏é5VÁîµÂéãÂåπÈÖçÔºå‰º†ËæìÁîµÂéãÊï∞ÊçÆÈúÄÊâ©Â§ß100ÂÄç‰ª•‰øùÁïôÂ∞èÊï∞ÁÇπÂêé2‰ΩçÔºåËÄåËæìÂÖ•adcÂÄ
             -ºÊª§Ê≥¢ÂêéÊâ©Â§ß8ÂÄçÔºå‰∏∫Áªü‰∏ÄÂçï‰ΩçÊïÖ*5*100*8
  59      =2  #define VOLTAGE_IC_ADJUST ((5ul*100*8)*BGV5)
  60      =2  //----------------------------------------------------------------------------//
  61      =2  
  62      =2  #ifdef SBUS_DEBUG
           =2   #define DBG(str) hw_uart_puts(str)
           =2 #else
  65      =2    #define DBG(str)
  66      =2  #endif
  67      =2  
  68      =2  /*////////////////////////////////////////////////////////////////////////////*/
  69      =2  #if STC_15W408AS
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 
           =2 #if STC_15W408AS_SOP20
           =2 //ÂÆö‰πâÊåáÁ§∫ÁÅØ
           =2 sbit LED=P1^0;
           =2 //ÂÆö‰πâ8‰∏™ÈÄöÈÅìËæìÂá∫
           =2 sbit CH1=P3^7;
           =2 sbit CH2=P3^6;
           =2 sbit CH3=P3^5;
           =2 sbit CH4=P3^4;
           =2 sbit CH5=P3^3;
           =2 sbit CH6=P3^2;
           =2 sbit CH7=P3^1;
           =2 sbit CH8=P3^0;
           =2 
           =2 sbit CH9=P5^4;
           =2 sbit CH10=P5^5;
           =2 
           =2 //ÂÆö‰πâÊó†Á∫øÊ®°ÂùóÁöÑÁÆ°ËÑö
           =2 sbit CE  =P1^2;
           =2 sbit SCK =P1^4;
           =2 sbit MISO=P1^6;
           =2 sbit IRQ =P1^7;
           =2 sbit MOSI=P1^5;
           =2 sbit CSN =P1^3;
           =2 
           =2 #else
           =2 //ÂÆö‰πâÊåáÁ§∫ÁÅØ
           =2 sbit LED=P1^2;
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 25  

           =2 //ÂÆö‰πâ8‰∏™ÈÄöÈÅìËæìÂá∫
           =2 sbit CH1=P3^7;
           =2 sbit CH2=P3^6;
           =2 sbit CH3=P3^5;
           =2 sbit CH4=P3^4;
           =2 sbit CH5=P3^3;
           =2 sbit CH6=P3^2;
           =2 sbit CH7=P3^1;
           =2 sbit CH8=P3^0;
           =2 //ÂÆö‰πâÊó†Á∫øÊ®°ÂùóÁöÑÁÆ°ËÑö
           =2 sbit CE  =P5^5;
           =2 sbit SCK =P5^4;
           =2 sbit MISO=P1^7;
           =2 sbit IRQ =P1^6;
           =2 sbit MOSI=P1^5;
           =2 sbit CSN =P1^4;
           =2 
           =2 #endif
           =2 
           =2 /*////////////////////////////////////*/
           =2 // Ê†πÊçÆÁ°¨‰ª∂ÂÆûÈôÖÊÉÖÂÜµÊù°‰ª∂ÁºñËØë
           =2 // PIN_CH5/PIN_CH_OUTÁî®‰∫éËæìÂá∫ÔºåPIN_CH6/PIN_CH_INÁî®‰∫éËæìÂÖ•„ÄÇÊé•Êî∂Êú∫ÂêØÂä®Êó∂Â¶ÇÊûúÊ£ÄÊµãÂà∞CH5„Ä
             -ÅCH6Áü≠Êé•ÔºåÂàôÈáçÊñ∞ÈÖçÂØπ„ÄÇ
           =2 #define PIN_CH_OUT_P33
           =2 #define PIN_CH_IN_P32
           =2 // Âä®ÂäõÁîµÊ±†ÁîµÂéãÊ£ÄÊµãÂºïËÑöP1.1
           =2 #define PIN_ADC_P1X 1
           =2 // EEPROMÈ°µÈù¢Â§ßÂ∞è
           =2 #define SIZE_STC_EEPROM_PAGE  512
           =2 #define SIZE_EEPROM_PAGE      SIZE_STC_EEPROM_PAGE
           =2 // Áä∂ÊÄÅÁÅØÈ©±Âä®
           =2 #define LED_ON()  do{LED = 1;}while(0)
           =2 #define LED_OFF() do{LED = 0;}while(0)
           =2 
           =2 /*////////////////////////////////////*/
           =2 #define FUNC_MILLIS_EN  0
           =2 #define FUNC_MICROS_EN  1
           =2 #define FUNC_DELAY_EN   1
           =2 #define FUNC_DELAYMICROSECONDS_EN 0
           =2 
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 #elif STC_8H
 140      =2  /*////////////////////////////////////////////////////////////////////////////*/
 141      =2  
 142      =2  #if STC_8H_TSSOP20
 143      =2  
 144      =2  sbit LED=P1^2;
 145      =2  
 146      =2  sbit CH1=P5^4;
 147      =2  sbit CH2=P1^7;
 148      =2  sbit CH3=P1^0;
 149      =2  sbit CH4=P3^7;
 150      =2  sbit CH5=P3^6;
 151      =2  sbit CH6=P3^4;
 152      =2  sbit CH7=P3^3;
 153      =2  sbit CH8=P3^0;
 154      =2  
 155      =2  sbit CHx=P3^1;
 156      =2  
 157      =2  sbit CE  =P3^2;
 158      =2  sbit SCK =P1^5;
 159      =2  sbit MISO=P1^4;
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 26  

 160      =2  sbit IRQ =P1^6;
 161      =2  sbit MOSI=P1^3;
 162      =2  sbit CSN =P3^5;
 163      =2  
 164      =2  #else
           =2 #endif
 166      =2  
 167      =2  /*////////////////////////////////////*/
 168      =2  // ÂÜçÊ¨°ÂÆö‰πâVOLTAGE_BAT_MULTIPLEÔºåË¶ÜÁõñÊéâÂâçÈù¢ÁöÑÊï∞ÊçÆ
 169      =2  #if defined  VOLTAGE_BAT_MULTIPLE
 170      =2  #define VOLTAGE_BAT_MULTIPLE 4
*** WARNING C317 IN LINE 170 OF ..\port\config.h: attempt to redefine macro 'VOLTAGE_BAT_MULTIPLE'
 171      =2  #endif
 172      =2  #define PIN_CH_OUT_P37
 173      =2  #define PIN_CH_IN_P36
 174      =2  #define PIN_ADC_P1X 1
 175      =2  #define SIZE_STC_EEPROM_PAGE  512
 176      =2  #define SIZE_EEPROM_PAGE      SIZE_STC_EEPROM_PAGE
 177      =2  #define LED_ON()  do{LED = 1;}while(0)
 178      =2  #define LED_OFF() do{LED = 0;}while(0)
 179      =2  
 180      =2  /*////////////////////////////////////*/
 181      =2  #define FUNC_MILLIS_EN  0
 182      =2  #define FUNC_MICROS_EN  1
 183      =2  #define FUNC_DELAY_EN   1
 184      =2  #define FUNC_DELAYMICROSECONDS_EN 0
 185      =2  
 186      =2  /*////////////////////////////////////////////////////////////////////////////*/
 187      =2  #elif ARDUINO_ATMEAG328P
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 
           =2 #define DEF_SPI_SOFT
           =2 //ÂÆö‰πâÊåáÁ§∫ÁÅØ
           =2 #define LED 13
           =2 //ÂÆö‰πâ8‰∏™ÈÄöÈÅìËæìÂá∫
           =2 //ÂÆö‰πâÊó†Á∫øÊ®°ÂùóÁöÑÁÆ°ËÑö
           =2 #define IRQ   2
           =2 #define MISO  3
           =2 #define MOSI  4
           =2 #define SCK   5
           =2 #define CSN   6
           =2 #define CE    7
           =2 
           =2 /*////////////////////////////////////////////////////////////////////////////*/
           =2 #endif
 204      =2  /******************************************************************************/
 205      =2  /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
 206      =2  
 207      =2  #endif
  20      =1  
  21      =1  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  22      =1  
  23      =1  #define UART_BPS_100K 0
  24      =1  #define UART_BPS_9600 1
  25      =1  #define UART_BPS_115200 2
  26      =1  
  27      =1  /*////////////////////////////////////////////////////////////////////////////*/
  28      =1  
  29      =1  // Á≥ªÁªüÂàùÂßãÂåñÂáΩÊï∞
  30      =1  void hw_sys_init();
  31      =1  //----------------------------------------------------------------------------//
  32      =1  // Âü∫Á°ÄÂäüËÉΩÂáΩÊï∞
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 27  

  33      =1  void hw_delay_1ms(void);
  34      =1  void hw_delay_ms(u8 ms);
  35      =1  //----------------------------------------------------------------------------//
  36      =1  // Á´ØÂè£ÂàùÂßãÂåñÂèäËæìÂÖ•ËæìÂá∫ÂáΩÊï∞
  37      =1  void hw_io_chs_init();
  38      =1  // CHÂè£Êé®ÊåΩËæìÂá∫
  39      =1  void hw_io_chs_pushpull();
  40      =1    // ËæìÂá∫Âè£
  41      =1  void hw_io_cho_init();
  42      =1  void hw_io_cho_clr();
  43      =1  void hw_io_cho_set();
  44      =1    // ËæìÂÖ•Âè£
  45      =1  void hw_io_chi_init();
  46      =1  u8   hw_io_chi_get();
  47      =1  //----------------------------------------------------------------------------//
  48      =1  // ‰∏≤Âè£ÂàùÂßãÂåñÂèäËæìÂá∫ÂáΩÊï∞
  49      =1  #define UART_BPS_100K 0
  50      =1  #define UART_BPS_9600 1
  51      =1  #define UART_BPS_115200 2
  52      =1  void hw_uart_init(u8 bps);      // bpsÂèØÈÄâÂÄº[UART_BPS_100K, UART_BPS_9600, UART_BPS_115200]
  53      =1  void UART_pushByte(char c);     // push a byte into UART then return, not waitting for finished
  54      =1  void hw_uart_puts(const char* str);
  55      =1  //----------------------------------------------------------------------------//
  56      =1  // ÁîµÂéãADCÂäüËÉΩÂàùÂßãÂåñÂèäËØªÂèñÂáΩÊï∞
  57      =1  void hw_adc_init();
  58      =1  void hw_adc_open(u8 i); // adcËΩ¨Êç¢È¢ÑÂêØÂä®ÔºåÂáèÂ∞ëadc_readÁ≠âÂæÖÊó∂Èó¥„ÄÇ//0ÔºöÂÜÖÈÉ®ÂèÇËÄÉÁîµÂéãÔºõ1Ô
             -ºöÂ§ñÈÉ®ÁîµÂéã
  59      =1  u16  hw_adc_read();     // Êé•Êî∂Êú∫Á®ãÂ∫èÂØπADCËøîÂõûÊï∞ÊçÆÊåâ10‰ΩçÂ§ÑÁêÜÔºåÁßªÊ§ç‰∏çÂêåÁ°¨‰ª∂ÈúÄÊ≥®ÊÑè‰øùÊ
             -åÅ‰∏ÄËá¥„ÄÇ
  60      =1  //----------------------------------------------------------------------------//
  61      =1  // Á≥ªÁªüÂøÉË∑≥ÂäüËÉΩÂàùÂßãÂåñ
  62      =1  void hw_tick_init();
  63      =1      //ÂêØÂä®Á≥ªÁªüÂë®ÊúüÊÄß‰ªªÂä°ÔºàPCAÊéßÂà∂ÂØÑÂ≠òÂô®ÔºöÂêØÂä®PCAÂÆöÊó∂Âô®ÔºåÊ∏ÖÈô§‰∏≠Êñ≠Ê†áÂøóÔºâ
  64      =1      //void hw_tick_en() // #define hw_tick_en()     do{CCON =0x40;}while(0)
  65      =1  
  66      =1  //ÂÖºÂÆπarduinoÁöÑÊó∂Èó¥ÂáΩÊï∞Ôºå‰æùËµñ‰∫éhw_tick_init()
  67      =1  #if FUNC_MILLIS_EN
           =1 u32  millis(void);
           =1 #endif
  70      =1  #if FUNC_MICROS_EN
  71      =1  u16  micros(void);
  72      =1  #endif
  73      =1  #if FUNC_DELAY_EN
  74      =1  void delay(u16 ms);
  75      =1  #endif
  76      =1  #if FUNC_DELAYMICROSECONDS_EN
           =1 void delayMicroseconds(u16 us);
           =1 #endif
  79      =1  
  80      =1  //----------------------------------------------------------------------------//
  81      =1  // ÈÄöÈÅìËàµÈáèËæìÂá∫/pwmËæìÂá∫ÂäüËÉΩÂàùÂßãÂåñÂèä‰ΩøËÉΩ
  82      =1  void hw_output_init();
  83      =1      //ÂêØÂä®CHÈÄöÈÅìËæìÂá∫ÔºàÂêØÂä®T0ÔºåT0‰∏≠Êñ≠ÂáΩÊï∞ÊéßÂà∂ËæìÂá∫Ôºâ
  84      =1      //void hw_output_en();
  85      =1  //ÈÄöÈÅìchËåÉÂõ¥[0,7]ÂØπÂ∫î[CH1,CH8]; STC15WÂÆûÁé∞CH1&CH2ÔºåSTC8HÂÆûÁé∞CH1&CH2&CH6&CH7
  86      =1  //ÈÄöÈÅìpwmËåÉÂõ¥[0,255]
  87      =1  void hw_pwm_en (u8 ch);
  88      =1  void hw_pwm_dis(u8 ch);
  89      =1  void hw_pwm_set(u8 ch, u8 pwm);
  90      =1  //----------------------------------------------------------------------------//
  91      =1  // Áä∂ÊÄÅÁÅØÊìç‰ΩúÂáΩÊï∞
  92      =1  void LED_on(void);
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 28  

  93      =1  void LED_off(void);
  94      =1  //----------------------------------------------------------------------------//
  95      =1  // Á≥ªÁªüEEPROMÂäüËÉΩÂáΩÊï∞
  96      =1  u8   EEPROM_read (u16 addr);
  97      =1  void EEPROM_write(u16 addr,u8 byte);
  98      =1  void EEPROM_cleanPage(u8 addPage);
  99      =1  #if 0
           =1 void EEPROM_begin();
           =1 void EEPROM_end();
           =1 void DATA_mutex_get();
           =1 void DATA_mutex_release();
           =1 #elif 0
           =1 #define EEPROM_begin()        do{IAP_CONTR=0x83;}while(0)
           =1 #define EEPROM_end()          do{IAP_CONTR=0x00;}while(0)
           =1 #define DATA_mutex_get()      do{EA = 0;}while(0)
           =1 #define DATA_mutex_release()  do{EA = 1;}while(0)
           =1 #endif
 110      =1  //----------------------------------------------------------------------------//
 111      =1  
 112      =1  // NRF24L01 SPIÁ´ØÂè£IOÊ®°ÂºèÂàùÂßãÂåñ
 113      =1  void SPI_init_0(void);
 114      =1  void SPI_init_1(void);
 115      =1  
 116      =1  /*////////////////////////////////////////////////////////////////////////////*/
 117      =1  #if STC_15W408AS
           =1 /*////////////////////////////////////////////////////////////////////////////*/
           =1 
           =1 // 24L01 IRQ ËæìÂá∫1Ë°®Á§∫Ê≤°Êúâ‰∏≠Êñ≠ÂèëÁîü
           =1 #define noRF()          IRQ
           =1 #define SPI_MISO_GET()  MISO
           =1 // stc51 uart Âè£ËæìÂá∫0Â∞ÜÂØºËá¥‰∏≤Âè£Êó†Ê≥ïËæìÂá∫ÔºåÈáçÁΩÆ‰∏∫1‰øùËØÅ‰∏≤Âè£Ê≠£Â∏∏Â∑•‰Ωú
           =1 #define PIN_SBUS_SET()  CH7=1
           =1 #define PIN_PPM_SET()   CH1=1
           =1 #define PIN_PPM_CLR()   CH1=0
           =1 
           =1 #define hw_tick_en()          do{CCON =0x40;}while(0)
           =1 #define hw_output_en()        do{TR0=1;}while(0)
           =1 #define EEPROM_begin()        do{IAP_CONTR=0x83;}while(0)
           =1 #define EEPROM_end()          do{IAP_CONTR=0x00;}while(0)
           =1 //#define DATA_mutex_get()      do{EA = 0;}while(0)
           =1 //#define DATA_mutex_release()  do{EA = 1;}while(0)
           =1 //ÂÅáËÆæÊï∞ÊçÆ‰ªÖÂú®T0‰∏≠Êñ≠‰∏≠Ë¢´‰ΩøÁî®ÔºåÂú®Â§öÂ≠óËäÇÊï∞ÊçÆ‰øÆÊîπÂâç‰ªÖÁ¶ÅÊ≠¢T0‰∏≠Êñ≠ËÄå‰∏çÊòØÁ¶ÅÊ≠¢ÊâÄÊ
             -úâ‰∏≠Êñ≠ÔºåÈÅøÂÖç‰ΩøÁî®Âà∞ÈîôËØØÁöÑÊï∞ÊçÆ„ÄÇ
           =1 #define DATA_mutex_get()      do{ET0 = 0;}while(0)
           =1 #define DATA_mutex_release()  do{ET0 = 1;}while(0)
           =1 
           =1 //----------------------------------------------------------------------------//
           =1 // port for stc15w
           =1 #define NSS CSN
           =1 #define SPI_SLAVE_EN()  do{NSS =0;}while(0)
           =1 #define SPI_SLAVE_DIS() do{NSS =1;}while(0)
           =1 #define SPI_SCK_SET()   do{SCK =1;}while(0)
           =1 #define SPI_SCK_CLR()   do{SCK =0;}while(0)
           =1 #define SPI_MOSI_SET()  do{MOSI=1;}while(0)
           =1 #define SPI_MOSI_CLR()  do{MOSI=0;}while(0)
           =1 
           =1 #define NRF_CE_SET()    do{CE = 1;}while(0)
           =1 #define NRF_CE_CLR()    do{CE = 0;}while(0)
           =1 
           =1 //----------------------------------------------------------------------------//
           =1 #define INTERRUPT_dis() do{EA = 0;}while(0)
           =1 #define INTERRUPT_en()  do{EA = 1;}while(0)
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 29  

           =1 
           =1 /*////////////////////////////////////////////////////////////////////////////*/
           =1 #elif STC_8H
 157      =1  /*////////////////////////////////////////////////////////////////////////////*/
 158      =1  
 159      =1  #define noRF()                IRQ
 160      =1  #define SPI_MISO_GET()        MISO
 161      =1  #define PIN_SBUS_SET()        CHx=1
 162      =1  #define PIN_PPM_SET()         CHx=1
 163      =1  #define PIN_PPM_CLR()         CHx=0
 164      =1  // ÂêØÂä®ÂÆöÊó∂Âô®T1
 165      =1  #define hw_tick_en()          do{TR1=1;}while(0)
 166      =1  #define hw_output_en()        do{TR0=1;}while(0)
 167      =1  // stc8h ‰∏é stc15w eeprom‰∏çÂÖºÂÆπÈúÄË¶ÅÊ≥®ÊÑè
 168      =1  #define EEPROM_begin()        do{IAP_TPS=((FOSC+500000)/1000000);IAP_CONTR=0x80;}while(0)
 169      =1  #define EEPROM_end()          do{IAP_CONTR=0x00;}while(0)
 170      =1  #define DATA_mutex_get()      do{ET0 = 0;}while(0)
 171      =1  #define DATA_mutex_release()  do{ET0 = 1;}while(0)
 172      =1  #define NSS                   CSN
 173      =1  #define SPI_SLAVE_EN()        do{NSS =0;}while(0)
 174      =1  #define SPI_SLAVE_DIS()       do{NSS =1;}while(0)
 175      =1  #define SPI_SCK_SET()         do{SCK =1;}while(0)
 176      =1  #define SPI_SCK_CLR()         do{SCK =0;}while(0)
 177      =1  #define SPI_MOSI_SET()        do{MOSI=1;}while(0)
 178      =1  #define SPI_MOSI_CLR()        do{MOSI=0;}while(0)
 179      =1  #define NRF_CE_SET()          do{CE = 1;}while(0)
 180      =1  #define NRF_CE_CLR()          do{CE = 0;}while(0)
 181      =1  #define INTERRUPT_dis()       do{EA = 0;}while(0)
 182      =1  #define INTERRUPT_en()        do{EA = 1;}while(0)
 183      =1  
 184      =1  /*////////////////////////////////////////////////////////////////////////////*/
 185      =1  #elif ARDUINO_ATMEAG328P
           =1 /*////////////////////////////////////////////////////////////////////////////*/
           =1 
           =1 #define noRF()          digitalRead(IRQ)
           =1 //LED
           =1 #define LED_ON()        digitalWrite(LED, HIGH)
           =1 #define LED_OFF()       digitalWrite(LED, LOW)
           =1 
           =1 // port for arduino
           =1 //NRF24L01
           =1 #define SPI_SLAVE_EN()  digitalWrite(CSN, LOW)
           =1 #define SPI_SLAVE_DIS() digitalWrite(CSN, HIGH)
           =1 #define NRF_CE_SET()    digitalWrite(CE, HIGH)
           =1 #define NRF_CE_CLR()    digitalWrite(CE, LOW)
           =1 
           =1 #ifdef DEF_SPI_SOFT
           =1 #define SPI_SCK_SET()   digitalWrite(SCK, HIGH)
           =1 #define SPI_SCK_CLR()   digitalWrite(SCK, LOW)
           =1 #define SPI_MOSI_SET()  digitalWrite(MOSI, HIGH)
           =1 #define SPI_MOSI_CLR()  digitalWrite(MOSI, LOW)
           =1 #define SPI_MISO_GET()  digitalRead(MISO)
           =1 #endif
           =1 
           =1 
           =1 #define EEPROM_begin()
           =1 #define EEPROM_end()
           =1 #define DATA_mutex_get()
           =1 #define DATA_mutex_release()
           =1 
           =1 #define SIZE_STC_EEPROM_PAGE  512
           =1 #define SIZE_EEPROM_PAGE      SIZE_STC_EEPROM_PAGE
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 30  

           =1 
           =1 #define INTERRUPT_dis()
           =1 #define INTERRUPT_en()
           =1 /*////////////////////////////////////////////////////////////////////////////*/
           =1 #endif
 221      =1  /******************************************************************************/
 222      =1  /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
 223      =1  
 224      =1  #endif
  20          
  21          /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  22          
  23          idata volatile u32 _sys_ms;         // ÂΩìÂâçmsÂÄº
  24          idata volatile u16 _sys_us_target;  // ‰∏≠Êñ≠ÂèëÁîüÁõÆÊ†áusÂÄº
  25          
  26          #if defined( SBUS_BPS_115200 )
                #define UART_BPS  UART_BPS_115200
              #elif defined ( SBUS_BPS_9600 )
                #define UART_BPS  UART_BPS_9600
              #else
  31            #define UART_BPS  UART_BPS_100K
  32          #endif
  33          
  34          /*////////////////////////////////////////////////////////////////////////////*/
  35          //Âª∂Êó∂ÂáΩÊï∞Ôºå‰ªÖ‰æùËµñÁ≥ªÁªüÊó∂ÈíüÔºåÊó†ÈúÄÂÖ∂‰ªñÊ®°ÂùóÂàùÂßãÂåñ
  36          void hw_delay_1ms()   //@12.000MHz
  37          {
  38   1        unsigned char data i, j;
  39   1        i = (unsigned char)(FOSC/1000000UL);
  40   1        j = 169;
  41   1        do
  42   1        {
  43   2          while (--j);
  44   2        } while (--i);
  45   1      }
  46          
  47          void hw_delay_ms(u8 ms)
  48          {
  49   1        while(ms--) hw_delay_1ms();
  50   1      }
  51          
  52          /*////////////////////////////////////////////////////////////////////////////*/
  53          void hw_io_chs_init()
  54          {
  55   1      #if STC_15W408AS
                //stc15w IOÂè£ÈªòËÆ§ÂáÜÂèåÂêëÂè£Ê®°ÂºèÔºåÊó†ÈúÄ‰øÆÊîπPxM0ÂíåPxM1
                CH1=0;
                CH2=0;
                CH3=0;
                CH4=0;
                CH5=0;
                CH6=0;
                CH7=0;
                CH8=0;
              #elif STC_8H
  66   1        // P1+P3+P5.4 Áî±È´òÈòªÊîπ‰∏∫ÂèåÂêëÊ®°Âºè
  67   1        P1M0 = 0x00;
  68   1        P1M1 = 0x00;
  69   1        P3M0 = 0x00;
  70   1        P3M1 = 0x00;
  71   1        P5M0 = 0x00;
  72   1        P5M1 = 0x00;
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 31  

  73   1        // STC8HÊâãÂÜåÈôÑÂΩïT.1Âª∫ËÆÆ‰∏ç‰ΩøÁî®ÁöÑÁ´ØÂè£ÂèåÂêëÊ®°ÂºèÂπ∂ËæìÂá∫1
  74   1        P1 = 0xFF;
  75   1        P3 = 0xFF;
  76   1        P5 = 0xFF;
  77   1        
  78   1        CH1=0;
  79   1        CH2=0;
  80   1        CH3=0;
  81   1        CH4=0;
  82   1        CH5=0;
  83   1        CH6=0;
  84   1        CH7=0;
  85   1        CH8=0;
  86   1        
  87   1      #endif
  88   1      }
  89          
  90          void hw_io_cho_init()
  91          {
  92   1      // CH5 ËÆæ‰∏∫Êé®ÊåΩËæìÂá∫Ê®°Âºè
  93   1      #if defined   PIN_CH_OUT_P31
                P3M0=1<<1;
              #elif defined PIN_CH_OUT_P33
                P3M0=1<<3;
              #elif defined PIN_CH_OUT_P37
  98   1        P3M0=1<<7;
  99   1      #else
                  #err "CH out pin not set OUTPUT."
              #endif
 102   1      }
 103          void hw_io_cho_clr()
 104          {
 105   1      #if defined PIN_CH_OUT_P31
                P31 = 0;
              #elif defined PIN_CH_OUT_P33
                P33 = 0;
              #elif defined PIN_CH_OUT_P37
 110   1        P37 = 0;
 111   1      #else
                #err "PIN_CH_OUT not CLR."
              #endif
 114   1      }
 115          void hw_io_cho_set()
 116          {
 117   1      #if defined PIN_CH_OUT_P31
                P31 = 1;
              #elif defined PIN_CH_OUT_P33
                P33 = 1;
              #elif defined PIN_CH_OUT_P37
 122   1        P37 = 1;
 123   1      #else
                #err "PIN_CH_OUT not SET."
              #endif
 126   1      }
 127          
 128          void hw_io_chi_init()
 129          {
 130   1        // ÈªòËÆ§Â∑≤ÊòØÂáÜÂèåÂêëÂè£Ê®°ÂºèÔºåÂú®Ê≠§ËÆæÁΩÆ1Âº±‰∏äÊãâÔºå‰∏îÂÖÅËÆ∏Â§ñÈÉ®Êãâ‰ΩéÂà∞0„ÄÇ
 131   1      #if defined PIN_CH_IN_P32
                P32 = 1;
              #elif defined PIN_CH_IN_P36
 134   1        P36 = 1;
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 32  

 135   1      #else
                #err "PIN_CH_IN not set INPUT."
              #endif
 138   1      }
 139          
 140          u8 hw_io_chi_get()
 141          {
 142   1      #if defined PIN_CH_IN_P32
                return (u8)(P32);
              #elif defined PIN_CH_IN_P36
 145   1        return (u8)(P36);
 146   1      #else
                #err "PIN_CH_IN not GET."
              #endif
 149   1      }
 150          
 151          void hw_io_chs_pushpull()
 152          {
 153   1        CH1=0;
 154   1        CH2=0;
 155   1        CH3=0;
 156   1        CH4=0;
 157   1        CH5=0;
 158   1        CH6=0;
 159   1      //stc51 uart Âè£ËæìÂá∫0Â∞ÜÂØºËá¥‰∏≤Âè£Êó†Ê≥ïËæìÂá∫//CH7=0;//PIN_SBUS=1;
 160   1        CH8=0;
 161   1      
 162   1        //Êé•‰∏ãÊù•ÂèØÂ∞ÜÈÄöÈÅìËæìÂá∫IOÂè£ÈÖçÁΩÆ‰∏∫Êé®ÊåΩÊ®°ÂºèÔºå‰øùËØÅÊ≠£Â∏∏È©±Âä®ÁîµË∞É‰∏éËàµÊú∫
 163   1        //‰∏çÈÖçÁΩÆÊé®ÊåΩ‰ºº‰πé‰πüÂèØ‰ª•ÔºüÈÖçÁΩÆÊé®ÊåΩ‰ºöÂê¶ÂΩ±Âìç‰∏≤Âè£‰º†ËæìÊï∞ÊçÆÔºü
 164   1      #if STC_15W408AS
                // P3Âè£ÂÖ®ÈÉ®‰Ωú‰∏∫ÈÄöÈÅìËæìÂá∫
                P3M0=0xFF;
              #elif STC_8H
 168   1        CH7=0;
 169   1        // P54-P17-P10-P37.6.4.3.0+P31(CHx)
 170   1        P5M0=0x10;
 171   1        P1M0=0x81;
 172   1        P3M0=0xD9+0x02;
 173   1      #endif
 174   1      }
 175          
 176          /*////////////////////////////////////////////////////////////////////////////*/
 177          // ‰∏≤Âè£ÈÄöËÆØÔºå‰ΩøÁî®ÂÆöÊó∂Âô®2
 178          void hw_uart_init(u8 bps)
 179          {
 180   1        SCON = 0xD0;    //9‰ΩçÊï∞ÊçÆ,ÂèØÂèòÊ≥¢ÁâπÁéá
 181   1        AUXR |= 0x01;   //‰∏≤Âè£1ÈÄâÊã©ÂÆöÊó∂Âô®2‰∏∫Ê≥¢ÁâπÁéáÂèëÁîüÂô®
 182   1        AUXR |= 0x04;   //ÂÆöÊó∂Âô®2Êó∂Èíü‰∏∫Fosc,Âç≥1T
 183   1      
 184   1        if(bps==UART_BPS_9600)  //9600bps@12.000MHz
 185   1        {
 186   2      //    T2L = 0xC7;
 187   2      //    T2H = 0xFE;
 188   2          T2L = (65536-FOSC/4/9600);
 189   2          T2H = (65536-FOSC/4/9600)>>8;
 190   2        }
 191   1        else if(bps==UART_BPS_115200) //115200bps@12.000MHz
 192   1        {
 193   2      //    T2L = 0xE6;   //ËÆæÁΩÆÂÆöÊó∂ÂàùÂßãÂÄº@12.000MHz
 194   2      //    T2H = 0xFF;   //ËÆæÁΩÆÂÆöÊó∂ÂàùÂßãÂÄº@12.000MHz
 195   2          T2L = (65536-FOSC/4/115200);
 196   2          T2H = (65536-FOSC/4/115200)>>8;
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 33  

 197   2        }
 198   1        else      //100000bps@12.000MHz
 199   1        {
 200   2      //    T2L = 0xE2;   //ËÆæÂÆöÂÆöÊó∂ÂàùÂÄº@12.000MHz
 201   2      //    T2H = 0xFF;   //ËÆæÂÆöÂÆöÊó∂ÂàùÂÄº@12.000MHz
 202   2          T2L = (65536-FOSC/4/100000);
 203   2          T2H = (65536-FOSC/4/100000)>>8;
 204   2        }
 205   1      
 206   1        PIN_SBUS_SET();
 207   1        AUXR |= 0x10;   //ÂÆöÊó∂Âô®2ÂºÄÂßãËÆ°Êó∂
 208   1      }
 209          
 210          void UART_pushByte(char c)
 211          {
 212   1          if(TI)TI=0;
 213   1          ACC=c;
 214   1          TB8=P;
 215   1          SBUF=ACC;
 216   1      }
 217          
 218          void hw_uart_puts(const char* str)
 219          {
 220   1        while(*str)
 221   1        {
 222   2          UART_pushByte(*str++);
 223   2          while(!TI); // bugfix(20211220): Â∞ÜÊ≠§Âè•ÁßªÂà∞UART_pushByte()ÂêéÈù¢ÔºåÈò≤Ê≠¢Ê≠ªÂæ™ÁéØ„ÄÇÂâØ‰ΩúÁî®ÊòØÂá
             -ΩÊï∞Â§ñÈÉ®‰πãÂâç‰ΩøÁî®UART_pushByte()ÂèØËÉΩÊú™ÂèëÈÄÅÂÆåÊàêÂ∞±Ë¢´ÁªàÊ≠¢„ÄÇ
 224   2        }
 225   1        UART_pushByte('\r');
 226   1        while(!TI);
 227   1        UART_pushByte('\n');
 228   1        while(!TI);
 229   1      }
 230          
 231          /*////////////////////////////////////////////////////////////////////////////*/
 232          //ÁîµÂéãÊµãÈáèÊ®°ÂùóÔºöÊé•Êî∂Êú∫Á®ãÂ∫èÂØπADCËøîÂõûÊï∞ÊçÆÊåâ10‰ΩçÂ§ÑÁêÜÔºåÁßªÊ§ç‰∏çÂêåÁ°¨‰ª∂ÈúÄÊ≥®ÊÑè‰øùÊåÅ
             -‰∏ÄËá¥
 233          //ÁîµÂéãÊµãÈáèÂäüËÉΩÂàùÂßãÂåñ
 234          void hw_adc_init()
 235          {
 236   1        //Â∞ÜADËæìÂÖ•Âè£ËÆæÁΩÆ‰∏∫È´òÈòªËæìÂÖ•ÔºåËØ¶ËßÅSTC15ÊâãÂÜåP400Ë¶ÅÊ±Ç
 237   1      #if defined   PIN_ADC_P1X
 238   1        P1M1 |=  1<<PIN_ADC_P1X;  //8ÈÄöÈÅìÊé•Êî∂Êú∫‰ΩøÁî®P1.xÂè£ÂÅöADCËæìÂÖ•Âè£
 239   1      #else
                  #err "ADC pin not inited."
              #endif
 242   1      
 243   1      #if STC_15W408AS
                ADC_CONTR=0x80;   //ADC‰∏äÁîµ
                hw_delay_ms(2);   //Âª∂Êó∂Á≠âÂæÖADCÊ®°ÂùóÁ®≥ÂÆö
              
                P1ASF=0x00;       //‰∏çËØªÂèñP1Âè£ÔºåËÄåÊòØ‰∏ãÊ¨°ËØªÂèñÂÜÖÈÉ®ÂèÇËÄÉÁîµÂéã‰øùÂ≠òÂú®_adc_icÈáå
                ADC_CONTR=0x88;   //ÂêØÂä®ËΩ¨Êç¢
                while(ADC_CONTR&0x10==0);//Á≠âÂæÖËΩ¨Êç¢ÂÆåÊàê
              #elif STC_8H
 251   1        // ADCÊéßÂà∂ÂØÑÂ≠òÂô®ADC_CONTRÈÖçÁΩÆ‰ΩçÔºöÊâìÂºÄADËΩ¨Êç¢Âô®ÁîµÊ∫ê/ÂêØÂä®ADËΩ¨Êç¢/ËΩ¨Êç¢ÁªìÊùüÊ†áÂøó‰Ωç
 252   1        #define ADC_POWER 7
 253   1        #define ADC_START 6
 254   1        #define ADC_FLAG  5
 255   1        ADCTIM = 0x3F;
 256   1        ADC_CONTR = (1<<ADC_POWER | 0<<ADC_START | 0<<ADC_FLAG);
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 34  

 257   1        hw_delay_ms(2);   //Âª∂Êó∂Á≠âÂæÖADCÊ®°ÂùóÁ®≥ÂÆö
 258   1      
 259   1        ADC_CONTR = (1<<ADC_POWER | 1<<ADC_START | 0<<ADC_FLAG)|15; // ËØªÂèñÂÜÖÈÉ®ÂèÇËÄÉÁîµÂéã‰øùÂ≠òÂú®_adc_icÈá
             -å
 260   1        while (!(ADC_CONTR & (1<<ADC_FLAG))); ////Á≠âÂæÖËΩ¨Êç¢ÂÆåÊàê
 261   1      #endif
 262   1      }
 263          //ADËΩ¨Êç¢È¢ÑÂêØÂä®
 264          void hw_adc_open(u8 i)  //0ÔºöÂÜÖÈÉ®ÂèÇËÄÉÁîµÂéãÔºõ1ÔºöÂ§ñÈÉ®ÁîµÂéã
 265          {
 266   1      #if STC_15W408AS
                if(i&0x01)
                {
              #if defined   PIN_ADC_P1X
                  P1ASF=0x01<<PIN_ADC_P1X;    //P1Âè£Ê®°ÊãüÂäüËÉΩÊéßÂà∂ÂØÑÂ≠òÂô®Ôºöp1.x‰Ωú‰∏∫Ê®°ÊãüÂäüËÉΩA/D‰ΩøÁî®Ôºå‰∏ãÊ¨°Ë
             -ØªÂèñÁîµÊ±†ÁîµÂéã‰øùÂ≠òÂú®_adc_battÈáå
                  ADC_CONTR= 1<<7 | 0<<4 | 1<<3 | PIN_ADC_P1X<<0;   //ADCÊéßÂà∂ÂØÑÂ≠òÂô®ÔºöÊâìÂºÄADËΩ¨Êç¢Âô®ÁîµÊ∫ê/Ê∏ÖÈô§ËΩ
             -¨Êç¢ÁªìÊùüÊ†áÂøó‰Ωç/ÂêØÂä®ADËΩ¨Êç¢/p1.x‰ΩúADËæìÂÖ•
              #else
                  #err "ADC pin not P1.x"
              #endif
                }
                else
                {
                  P1ASF=0x00;       //‰∏çËØªÂèñP1Âè£ÔºåËÄåÊòØ‰∏ãÊ¨°ËØªÂèñÂÜÖÈÉ®ÂèÇËÄÉÁîµÂéã‰øùÂ≠òÂú®_adc_icÈáå
                  ADC_CONTR=0x88;   //ÂêØÂä®ËΩ¨Êç¢
                }
              #elif STC_8H
 282   1        if(i&0x01)
 283   1        {
 284   2      #if defined   PIN_ADC_P1X
 285   2          ADC_CONTR = (1<<ADC_POWER | 1<<ADC_START | 0<<ADC_FLAG) | PIN_ADC_P1X ;
 286   2      #else
                  #err "ADC pin not P1.x"
              #endif
 289   2        }
 290   1        else
 291   1        {
 292   2          ADC_CONTR = (1<<ADC_POWER | 1<<ADC_START | 0<<ADC_FLAG) | 15 ;
 293   2        }
 294   1      #endif
 295   1      }
 296          
 297          //ËØªÂèñ‰∏ä‰∏ÄÊ¨°ÂêØÂä®ADËΩ¨Êç¢Ëé∑ÂæóÁöÑÂÄº„ÄÇ
 298          //Êú¨ÂáΩÊï∞ÂÆûÁé∞Ê≤°ÊúâÂà§Êñ≠ËΩ¨Êç¢ÊòØÂê¶ÂÆåÊàêÔºå‰ΩøÁî®Êó∂ÈúÄÊ≥®ÊÑèÊó∂Èó¥Èó¥Èöî„ÄÇ
 299          u16 hw_adc_read()
 300          {
 301   1        u16 adc;
 302   1      
 303   1      #if STC_15W408AS
                // ADC_RES[7:0] & ADC_RESL[1:0] ÁªÑÊàê10‰ΩçÁªìÊûú // 20230813
                adc=ADC_RES;
                adc<<=2,adc|=ADC_RESL;
              #elif STC_8H
 308   1        adc = ((u16)ADC_RES<<2)|(ADC_RESL>>6);
 309   1      #endif  
 310   1        return adc;
 311   1      }
 312          
 313          /*////////////////////////////////////////////////////////////////////////////*/
 314          
 315          void hw_tick_init()
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 35  

 316          {
 317   1      #if STC_15W408AS
                //‰ªªÂä°ÂÆöÊó∂Âô®‰∏≠Êñ≠ÂàùÂßãÂåñÔºà‰ΩøÁî®PCAÂÆöÊó∂Âô®Ê®°Âùó0‰∏≠Êñ≠Ôºâ
                _sys_ms = 0;
                CCON =0x00;     //PCAÊéßÂà∂ÂØÑÂ≠òÂô®ÔºöÂÅúÊ≠¢PCAÂÆöÊó∂Âô®ÔºåÊ∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
                CL=0;CH=0;      //Â§ç‰ΩçPCAËÆ°Êï∞Âô®
                CMOD=0x00;      //PCAÂ∑•‰ΩúÊ®°ÂºèÂØÑÂ≠òÂô®ÔºöÁ©∫Èó≤Ê®°Âºè‰∏ãÁªßÁª≠Â∑•‰ΩúÔºåÁ≥ªÁªüÊó∂Èíü/12ÔºåËÆ°Êï∞Ê∫¢Âá∫‰∏≠
             -Êñ≠Á¶ÅÊ≠¢
                _sys_us_target = 1000;  //1 ms
                CCAP0L = _sys_us_target;
                CCAP0H = _sys_us_target >> 8;
                CCAPM0 = 0x49;  //PCAÊ®°Âùó0ÁöÑÊØîËæÉ/ÊçïËé∑ÂØÑÂ≠òÂô®ÔºöÂÖÅËÆ∏ÊØîËæÉÂô®ÂäüËÉΩÔºåÂåπÈÖçÁΩÆ‰ΩçCCONÊ†áÂøó‰ΩçC
             -CF0Ôºå‰ΩøËÉΩCCF0‰∏≠Êñ≠
              
              #elif STC_8H
 329   1        //‰ªªÂä°ÂÆöÊó∂Âô®‰∏≠Êñ≠ÂàùÂßãÂåñÔºà‰ΩøÁî®ÂÆöÊó∂Âô®1‰∏≠Êñ≠Ôºâ
 330   1        // Á≥ªÁªüËÆ°Êó∂ÂèòÈáèÂàùÂßãÂåñ
 331   1        _sys_ms = 0;
 332   1        _sys_us_target = 0; // Âú®STC8HÁöÑÂÆûÁé∞‰∏≠ÔºåÁî®‰∫éÁºìÂ≠òusËÆ°Êï∞
 333   1        //T1ËÆæÁΩÆ‰∏∫Ê®°Âºè0Ôºö16‰ΩçËá™Âä®ÈáçË£ÖÂÆöÊó∂Âô®ÔºåÂΩìÊ∫¢Âá∫Êó∂Â∞ÜRL_TH1ÂíåRL_TL1Â≠òÊîæÁöÑÂÄºËá™Âä®ÈáçË£
             -ÖÂÖ•TH1ÂíåTL1‰∏≠
 334   1        TMOD &= 0x0F; // È´ò4‰ΩçÊ∏ÖÈõ∂
 335   1        TMOD |= 0x00; // ËôöÊãüËµãÂÄºÔºåÈ´ò4‰ΩçËµãÂÄº0
 336   1        AUXR &= ~(0x40);//ÈªòËÆ§12TÊ®°Âºè
 337   1        IE=0x08; //ÂÖÅËÆ∏T1‰∏≠Êñ≠
 338   1        TH1 = (0x10000-FOSC/12/1000000*1000)>>8;
 339   1        TL1 = (0x10000-FOSC/12/1000000*1000);
 340   1      
 341   1      #endif
 342   1      }
 343          
 344          #if FUNC_MILLIS_EN
              u32 millis(void)
              {
                u32 temp;
              
              #if STC_15W408AS
                CCAPM0 = 0x48;  // bugfix(20230902): disable CCF0 interrupt, not disable T0 interrupt
                temp = _sys_ms;
                CCAPM0 = 0x49;  //enable PCA interrupt.
              #elif STC_8H
                ET1 = 0;
                temp = _sys_ms;
                ET1 = 1;
              #endif
                return temp;
              }
              #endif
 361          
 362          #if FUNC_MICROS_EN
 363          u16 micros(void)
 364          {
 365   1      #if STC_15W408AS
              
                u8 H0,H1,L;
              
                H0 = CH;  // read PCA clock time.
                L  = CL;
                H1 = CH;
                if(H1!=H0) L=0;
              
                return ((u16)H1<<8) | L;
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 36  

              
              #elif STC_8H
 377   1      
 378   1        u8 H0,H1,L;
 379   1        u16 T16, Tus;
 380   1      
 381   1        ET1 = 0;
 382   1        Tus = _sys_us_target;
 383   1        H0 = TH1; // read T1 clock time.
 384   1        L  = TL1;
 385   1        H1 = TH1;
 386   1        ET1 = 1;
 387   1      
 388   1        if(H1!=H0) L=0;
 389   1        T16 = (((u16)H1<<8)|L) - (0x10000-FOSC/12/1000000*1000);
 390   1      
 391   1        return (Tus+T16);
 392   1        
 393   1      #endif
 394   1      }
 395          #endif
 396          
 397          #if FUNC_DELAY_EN
 398          void delay(u16 i)
 399          {
 400   1        #if 1
 401   1        while(i--)
 402   1        hw_delay_1ms();
 403   1        #else
                
                #endif
 406   1      }
 407          #endif
 408          
 409          #if FUNC_DELAYMICROSECONDS_EN
              void delayMicroseconds(u16 us)
              {
                //v20220107: cur-start<us <<-->> (cur+0x10000)-start<us
                u16 start = micros();
                while(micros()-start<us);
              }
              #endif
 417          
 418          /*////////////////////////////////////////////////////////////////////////////*/
 419          //ÈÄöÈÅìËàµÈáèËæìÂá∫/pwmËæìÂá∫ÂäüËÉΩÂàùÂßãÂåñ
 420          void hw_output_init()
 421          {
 422   1      #if 1
 423   1      //ËàµÈáèËæìÂá∫ÊéßÂà∂ÂÆöÊó∂Âô®‰∏≠Êñ≠ÂàùÂßãÂåñÔºåÈ´ò‰ºòÂÖàÁ∫ßÔºà‰ΩøÁî®ÂÆöÊó∂Âô®0Ôºâ
 424   1        IP=0x02;      //T0‰∏≠Êñ≠È´ò‰ºòÂÖàÁ∫ßÔºåÂÖ∂ÂÆÉ‰Ωé‰ºòÂÖàÁ∫ß
 425   1        //T0ËÆæÁΩÆ‰∏∫Ê®°Âºè0Ôºö16‰ΩçËá™Âä®ÈáçË£ÖÂÆöÊó∂Âô®ÔºåÂΩìÊ∫¢Âá∫Êó∂Â∞ÜRL_TH0ÂíåRL_TL0Â≠òÊîæÁöÑÂÄºËá™Âä®ÈáçË£
             -ÖÂÖ•TH0ÂíåTL0‰∏≠
 426   1        TMOD &= 0xF0; //bugfix(20230812): 0x0FÊîπ‰∏∫0xF0
 427   1        TMOD |= 0x00;
 428   1        ET0 = 1; //ÂÖÅËÆ∏T0‰∏≠Êñ≠
 429   1      #endif
 430   1      
 431   1      #if STC_15W408AS
                //Á°¨‰ª∂PWMËæìÂá∫ÂäüËÉΩÂàùÂßãÂåñÔºà‰ΩøÁî®PCAÂÆöÊó∂Âô®Ê®°Âùó2/1ÁöÑ8‰ΩçpwmÂäüËÉΩÔºåPCAËæìÂÖ•Êó∂ÈíüÈ¢ëÁéá1MH
             -zÔºåpwmÈ¢ëÁéá=1MHz/256~=4kÔºâ
                P_SW1 &= ~(3<<4); //Â§ñËÆæÂäüËÉΩÂàáÊç¢ÂØÑÂ≠òÂô®1ÔºöPWMÂºïËÑöÂàáÊç¢Âà∞P3.5~P3.7
                P_SW1 |= 1<<4;
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 37  

                PCA_PWM2=0x03;    //ÔºàP3.7Ôºâ8‰ΩçPWMÊ®°Âºè
                PCA_PWM1=0x03;    //ÔºàP3.6Ôºâ8‰ΩçPWMÊ®°Âºè
                //PCA_PWM0=0x03;  //ÔºàP3.5Ôºâ8‰ΩçPWMÊ®°Âºè
                hw_pwm_dis(0);
                hw_pwm_dis(1);
              #elif STC_8H
 441   1        //Á°¨‰ª∂CH1/CH2/CH6/CH7ÂØπÂ∫îPWM6_2/PWM5_2/PWM8_2/PWM7_2
 442   1        //stc8h PWMËæìÂá∫‰ΩøËÉΩ
 443   1        #define ENO5P             0x01
 444   1        #define ENO6P             0x04
 445   1        #define ENO7P             0x10
 446   1        #define ENO8P             0x40
 447   1        //pwm ÂàÜËæ®Áéá„ÄÅÈ¢ëÁéá ÂØÑÂ≠òÂô®ÈÖçÁΩÆÂÄºËÆ°ÁÆó
 448   1        #define ANALOG_PWM_ARR_8BITS  (256-2)
 449   1        //#define ANALOG_PWM_ARR_10BITS (1024-2)
 450   1        #define ANALOG_PWM_RANGE      (ANALOG_PWM_ARR_8BITS+1)
 451   1        #define ANALOG_PWM_PSCR_1KHZ  ((FOSC/ANALOG_PWM_RANGE/1000)-1)
 452   1        //stc8h PWMÂºïËÑöÈÄâÊã©
 453   1        #define PWM5_SW_P17       1
 454   1        #define PWM6_SW_P54       (1<<2)
 455   1        #define PWM7_SW_P33       (1<<4)
 456   1        #define PWM8_SW_P34       (1<<6)
 457   1      
 458   1        PWMB_BKR = 0x00;          //ÂÖ≥Èó≠‰∏ªËæìÂá∫ÔºåÂØÑÂ≠òÂô®Êó†ÂÜô‰øùÊä§
 459   1        PWMB_CR2 = 0x00;  
 460   1        PWMB_CR1 = 0x00;          //ÂÖ≥Èó≠ËÆ°Êï∞Âô®
 461   1        PWMB_CCER1 = 0x00;        //ÂÖ≥Èó≠ÈÄöÈÅìÔºöPWM5/PWM6
 462   1        PWMB_CCER2 = 0x00;        //ÂÖ≥Èó≠ÈÄöÈÅìÔºöPWM7/PWM8
 463   1        PWMB_CCMR1 = 0x60|0x08;   //ËÆæÁΩÆÈÄöÈÅì5Ê®°ÂºèÔºöPWMÊ®°Âºè1 | PWMn_CCRxÈ¢ÑË£ÖËΩΩ‰ΩøËÉΩ + ËæìÂá∫
 464   1        PWMB_CCMR2 = 0x60|0x08;   //ËÆæÁΩÆÈÄöÈÅì6Ê®°ÂºèÔºö
 465   1        PWMB_CCMR3 = 0x60|0x08;   //ËÆæÁΩÆÈÄöÈÅì7Ê®°ÂºèÔºö
 466   1        PWMB_CCMR4 = 0x60|0x08;   //ËÆæÁΩÆÈÄöÈÅì8Ê®°ÂºèÔºö
 467   1        PWMB_CCER1 = 0x11;        //ÂºÄÂêØÈÄöÈÅìÔºöPWM5/PWM6
 468   1        PWMB_CCER2 = 0x11;        //ÂºÄÂêØÈÄöÈÅìÔºöPWM7/PWM8
 469   1        PWMB_CCR5 = 0;            //ËÆæÁΩÆÂç†Á©∫ÊØîÊó∂Èó¥
 470   1        PWMB_CCR6 = 0;            //ËÆæÁΩÆÂç†Á©∫ÊØîÊó∂Èó¥
 471   1        PWMB_CCR7 = 0;            //ËÆæÁΩÆÂç†Á©∫ÊØîÊó∂Èó¥
 472   1        PWMB_CCR8 = 0;            //ËÆæÁΩÆÂç†Á©∫ÊØîÊó∂Èó¥
 473   1        //ËÆæÁΩÆÂë®ÊúüÊó∂Èó¥ÔºåÂøÖÈ°ªÂÖàÂÜôÈ´òÂ≠óËäÇPWMB_ARRHÔºõÂêë‰∏äËÆ°Êï∞ËåÉÂõ¥‰∏∫[0~ARR]
 474   1        PWMB_ARR = ANALOG_PWM_ARR_8BITS;;
 475   1        //ÂØπÁ≥ªÁªüÊó∂ÈíüÂàÜÈ¢ëÔºåÂøÖÈ°ªÂÖàÂÜôÈ´òÂ≠óËäÇPWMB_PSCRHÔºõPWMB_PSCRÂØπÁ≥ªÁªüÊó∂ÈíüÂàÜÈ¢ëÂæóÂà∞PWMBÊó∂Èí
             -üÔºåPWMB_PSCR+1‰∏™Á≥ªÁªüÊó∂ÈíüËæìÂá∫‰∏Ä‰∏™PWMBÊó∂Èíü
 476   1        PWMB_PSCR = ANALOG_PWM_PSCR_1KHZ;
 477   1        PWMB_PS = PWM5_SW_P17 | PWM6_SW_P54 | PWM7_SW_P33 | PWM8_SW_P34; //È´òÁ∫ß PWM ÈÄöÈÅìËæìÂá∫ËÑöÈÄâÊã©‰Ωç
 478   1        PWMB_DTR = 0;             //Ê≠ªÂå∫Êó∂Èó¥
 479   1        PWMB_RCR = 0;             //ÈáçÂ§çËÆ°Êï∞Âô®
 480   1        PWMB_ENO = 0;             //PWMBÊâÄÊúâÁ´ØÂè£Á¶ÅÊ≠¢ËæìÂá∫ // hw_pwm_dis(0/1/5/6);
 481   1        PWMB_BKR = 0x80;          //‰ΩøËÉΩ‰∏ªËæìÂá∫
 482   1        PWMB_EGR = 0x01;          //ÈáçÊñ∞ÂàùÂßãÂåñËÆ°Êï∞Âô®ÔºåÂπ∂‰∫ßÁîü‰∏Ä‰∏™Êõ¥Êñ∞‰∫ã‰ª∂„ÄÇ
 483   1        PWMB_CR1 = 0x01;          //ARR‰∏çÁºìÂÜ≤ÔºåÂêë‰∏äËÆ°Êï∞Ê®°ÂºèÔºåÂºÄÂßãÂêë‰∏äËÆ°Êï∞
 484   1      
 485   1      //PWMB_BKR = 0x81;          //‰ΩøËÉΩ‰∏ªËæìÂá∫+ÂÜô‰øùÊä§„ÄÇÁªèÊµãËØïÔºåËÆæÁΩÆÂÜô‰øùÊä§ÂêéÊó†Ê≥ïËæìÂá∫pwmÔºåÂéüÂ
             -õ†Êú™Êòé„ÄÇ
 486   1      
 487   1      #endif
 488   1      }
 489          
 490          #if STC_15W408AS
              
              void hw_pwm_en(u8 ch)
              {
                if(ch==0)       CCAPM2=0x42;  //PCAÊØîËæÉ/ÊçïËé∑ÂØÑÂ≠òÂô®ÔºöÂÖÅËÆ∏ÊØîËæÉÂô®ÂäüËÉΩÔºåÂÖÅËÆ∏ËÑâÂÆΩË∞ÉËäÇËæìÂá∫
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 38  

                else if(ch==1)  CCAPM1=0x42;
              }
              
              void hw_pwm_dis(u8 ch)
              {
                if(ch==0)       CCAPM2 = 0;   //PCAÊØîËæÉ/ÊçïËé∑ÂØÑÂ≠òÂô®ÔºöÁ¶ÅÊ≠¢ÊØîËæÉÂô®ÂäüËÉΩÔºåÁ¶ÅÊ≠¢ËÑâÂÆΩË∞ÉËäÇËæìÂá∫
                else if(ch==1)  CCAPM1 = 0;
              }
              
              #elif STC_8H
 505          
 506          void hw_pwm_en(u8 ch)
 507          {
 508   1        if(ch==0)       PWMB_ENO |= ENO6P;
 509   1        else if(ch==1)  PWMB_ENO |= ENO5P;
 510   1        else if(ch==5)  PWMB_ENO |= ENO8P;
 511   1        else if(ch==6)  PWMB_ENO |= ENO7P;
 512   1      }
 513          
 514          void hw_pwm_dis(u8 ch)
 515          {
 516   1        if(ch==0)       PWMB_ENO &= ~ENO6P;
 517   1        else if(ch==1)  PWMB_ENO &= ~ENO5P;
 518   1        else if(ch==5)  PWMB_ENO &= ~ENO8P;
 519   1        else if(ch==6)  PWMB_ENO &= ~ENO7P;
 520   1      }
 521          
 522          #endif
 523          
 524          // ËÆæÁΩÆpragma NOAREGSÔºåÂØÑÂ≠òÂô®ÁªÑ‰∏ç‰ΩøÁî®ÁªùÂØπÂú∞ÂùÄÔºå‰ª•‰æøÂú®‰ΩøÁî®usingÁöÑ‰∏≠Êñ≠ÂáΩÊï∞‰∏≠Ë∞ÉÁî®
 525          #pragma NOAREGS
 526          
 527          // ch[0,7], pwm[0,255]
 528          void hw_pwm_set(u8 ch, u8 pwm)
 529          {
 530   1      #if STC_15W408AS
              /*-----------------------------------------------------------------------------/
              ÊØîËæÉÂÄºÔºö{EPCnL,CCAPnL[7:0]}
              ÂΩìÂâçÂÄºÔºö{0,CL[7:0]}ÔºåÁî±CCPËÆ°Êï∞Âô®‰Ωé8‰ΩçCL‰∏é0ÁªÑÊàê9‰ΩçÊï∞ÊçÆÔºåÊï∞ÊçÆËåÉÂõ¥[0,255]
              
              8‰ΩçpwmÊ®°ÂºèÂàíÂàÜ256Á≤æÂ∫¶ÔºåÊ†πÊçÆSTC15ÊâãÂÜåP942ÔºåÂΩìÂâçÂÄºÂ§ß‰∫éÁ≠â‰∫éÊØîËæÉÂÄºÊó∂ËæìÂá∫1 --> ÊØîËæÉ
             -ÂÄº==‰ΩéÁîµÂπ≥Êï∞Èáè
              ÂΩìCCAPnL==255-pwm --> pwm[0-255]==CCAPnL[255-0]==‰ΩéÁîµÂπ≥[255/256-0/256]==È´òÁîµÂπ≥[1/256-256/256]
              ‰∏∫ËæìÂá∫ÂÖ®‰ΩéÁîµÂπ≥ÔºåÂΩìpwm<MININUMÊó∂ÂÅöÁâπÊÆäÂ§ÑÁêÜÔºåCCAPnL‰∏éEPCnL(Ê≠§Êó∂‰∏∫1)ÁªÑÊàê9‰ΩçÊØîËæÉÂÄºÔº
             -å‰ª•Êèê‰æõÂÖ®0ËæìÂá∫„ÄÇ
              /----------------------------------------------------------------------------*/
              
              // stc15w HW_PWM_MINNUMÊúÄ‰ΩéÂÄºÈúÄ‰∏∫1ÊâçËÉΩ‰øùËØÅËæìÂá∫ÂÖ®‰ΩéÁîµÂπ≥„ÄÇ‰ª•‰∏ãÂÆèÂØπHW_PWM_MINNUMËøõË°åÂ§Ñ
             -ÁêÜ„ÄÇ
              #if (LOLI3_RECV_PWM_MINNUM/4 >= 1)
                #define HW_PWM_MINNUM   (LOLI3_RECV_PWM_MINNUM/4)
              #else
                #define HW_PWM_MINNUM   1
              #endif
              
                if(ch==0)
                {
                  if( pwm>=HW_PWM_MINNUM )  PCA_PWM2=0x00;  // CCAPxH&CCAPnLÁ¨¨9‰ΩçÊï∞‰∏∫0
                  else                      PCA_PWM2=0x03;  // CCAPxH&CCAPnLÁ¨¨9‰ΩçÊï∞‰∏∫1
                  CCAP2H = 255-pwm;         // CLÊ∫¢Âá∫Êó∂EPCnH&CCAPnHÊï∞ÊçÆÊâçËΩΩÂÖ•EPCnL&CCAPnL
                }
                else if(ch==1)
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 39  

                {
                  if( pwm>=HW_PWM_MINNUM )  PCA_PWM1=0x00;
                  else                      PCA_PWM1=0x03;
                  CCAP1H = 255-pwm;
                }
              #elif STC_8H
 560   1      /*-----------------------------------------------------------------------------/
 561   1      
 562   1      Á°¨‰ª∂CH1/CH2/CH6/CH7ÂØπÂ∫îPWM6_2/PWM5_2/PWM8_2/PWM7_2
 563   1        
 564   1      /----------------------------------------------------------------------------*/
 565   1      #if (LOLI3_RECV_PWM_MINNUM/4 >= 1)
 566   1        #define HW_PWM_MINNUM   (LOLI3_RECV_PWM_MINNUM/4)
 567   1      #else
                #define HW_PWM_MINNUM   1
              #endif
 570   1        
 571   1        if(ch==0)
 572   1        {
 573   2          if( pwm>=HW_PWM_MINNUM )  PWMB_CCR6 = pwm;
 574   2          else                      PWMB_CCR6 = 0;
 575   2        }
 576   1        else if(ch==1)
 577   1        {
 578   2          if( pwm>=HW_PWM_MINNUM )  PWMB_CCR5 = pwm;
 579   2          else                      PWMB_CCR5 = 0;
 580   2        }
 581   1        else if(ch==5)
 582   1        {
 583   2          if( pwm>=HW_PWM_MINNUM )  PWMB_CCR8 = pwm;
 584   2          else                      PWMB_CCR8 = 0;
 585   2        }
 586   1        else if(ch==6)
 587   1        {
 588   2          if( pwm>=HW_PWM_MINNUM )  PWMB_CCR7 = pwm;
 589   2          else                      PWMB_CCR7 = 0;
 590   2        }
 591   1        
 592   1      /*-----------------------------------------------------------------------------/
 593   1      /----------------------------------------------------------------------------*/
 594   1      #endif
 595   1      }
 596          #pragma AREGS
 597          
 598          /*////////////////////////////////////////////////////////////////////////////*/
 599          
 600          void LED_on(void)
 601          {
 602   1        LED_ON();
 603   1      }
 604          
 605          void LED_off(void)
 606          {
 607   1        LED_OFF();
 608   1      }
 609          
 610          /*////////////////////////////////////////////////////////////////////////////*/
 611          // NRF24L01 SPIÁ´ØÂè£IOÊ®°ÂºèÂàùÂßãÂåñ
 612          void SPI_init_0()
 613          {
 614   1        // set SCK/MOSI/NSS output mode, MISO input mode
 615   1        //ÈªòËÆ§ÂáÜÂèåÂêëIOÔºåÊó†ÈúÄÈÖçÁΩÆ‰ª£Á†Å
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 40  

 616   1      }
 617          
 618          void SPI_init_1(void)
 619          {
 620   1        // then set SCK/MOSI 0, set NNS 1.
 621   1        SPI_SLAVE_DIS();
 622   1        SPI_SCK_CLR();
 623   1        SPI_MOSI_CLR();
 624   1      }
 625          
 626          /*////////////////////////////////////////////////////////////////////////////*/
 627          //ROMÂ≠òÂÇ®
 628          u8 EEPROM_read(u16 addr)  //ËØªÊï∞ÊçÆ
 629          {
 630   1        IAP_CMD=0x01;
 631   1      
 632   1        IAP_ADDRH=addr>>8;
 633   1        IAP_ADDRL=addr;
 634   1      
 635   1        IAP_TRIG=0x5a;
 636   1        IAP_TRIG=0xa5;
 637   1        _nop_();
 638   1      
 639   1        return IAP_DATA;
 640   1      }
 641          
 642          void EEPROM_write(u16 addr,u8 byte) //ÂÜôÂÖ•Êï∞ÊçÆ
 643          {
 644   1        IAP_CMD=0x02;
 645   1        IAP_DATA=byte;
 646   1      
 647   1        IAP_ADDRH=addr>>8;
 648   1        IAP_ADDRL=addr;
 649   1      
 650   1        IAP_TRIG=0x5a;
 651   1        IAP_TRIG=0xa5;
 652   1        _nop_();
 653   1      }
 654          
 655          void EEPROM_cleanPage(u8 addrPage)  //Êì¶Èô§ÊâáÂå∫Êï∞ÊçÆ
 656          {
 657   1        IAP_CMD=0x03;
 658   1      
 659   1        IAP_ADDRH=(SIZE_EEPROM_PAGE*addrPage)>>8;
 660   1        IAP_ADDRL=0;
 661   1      
 662   1        IAP_TRIG=0x5a;
 663   1        IAP_TRIG=0xa5;
 664   1        _nop_();
 665   1      }
 666          
 667          /*////////////////////////////////////////////////////////////////////////////*/
 668          
 669          void hw_sys_init()
 670          {
 671   1        //Á¶ÅÊ≠¢ÊâÄÊúâ‰∏≠Êñ≠
 672   1        IE = 0;
 673   1        IE2= 0;
 674   1      #if STC_8H
 675   1        EAXSFR(); //Êâ©Â±ïSFR
 676   1      #endif
 677   1        
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 41  

 678   1        //Á´ØÂè£ÂäüËÉΩÂàùÂßãÂåñ
 679   1        hw_io_chs_init();
 680   1        //ÂºÄÊú∫Âª∂Êó∂‰ª•ÈÅøËøáÁîµÊ∫êÊ≥¢Âä®
 681   1        hw_delay_ms(200); // ÂèÇÊï∞Á±ªÂûãu8Ôºå‰∏çÂ§ß‰∫é255„ÄÇ
 682   1        hw_delay_ms(200);
 683   1        //SBUSÂäüËÉΩÂàùÂßãÂåñ-------------------Ôºà‰ΩøÁî®ÂÆöÊó∂Âô®2Ôºâ
 684   1        hw_uart_init(UART_BPS); //init for debug and SBUS output
 685   1        //ÁîµÂéãÊµãÈáèÂäüËÉΩÂàùÂßãÂåñ
 686   1        hw_adc_init();
 687   1        //Á≥ªÁªüÂøÉË∑≥ÂäüËÉΩÂàùÂßãÂåñ---------------ÔºàSTC15W‰ΩøÁî®PCAÂÆöÊó∂Âô®Ê®°Âùó0‰∏≠Êñ≠ / STC8H‰ΩøÁî®ÂÆöÊó∂Â
             -ô®1Ôºâ
 688   1        hw_tick_init();
 689   1        //ÈÄöÈÅìËæìÂá∫ÂäüËÉΩÂàùÂßãÂåñ---------------Ôºà‰ΩøÁî®ÂÆöÊó∂Âô®0Ôºâ
 690   1        hw_output_init();
 691   1        
 692   1        // addin(20240515): ÂêéÁª≠‰ΩøÁî®delayÁöÑÂÆûÁé∞ÂèØËÉΩ‰æùËµñtick‰∏≠Êñ≠ÔºåÊïÖÊâìÂºÄtick‰∏≠Êñ≠ÔºõÊàñËÄÖÊäädel
             -ayÊõøÊç¢Êàêhw_delay_ms?
 693   1        hw_tick_en();
 694   1        INTERRUPT_en();
 695   1      }
 696          
 697          /******************************************************************************/
 698          /*-DO NOT ADD YOUR CODE AFTER HERE!-*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-WIDTH: 80-*/
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 42  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION hw_delay_1ms (BEGIN)
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 39
;---- Variable 'i' assigned to Register 'R7' ----
0000 7F0C              MOV     R7,#0CH
                                           ; SOURCE LINE # 40
;---- Variable 'j' assigned to Register 'R6' ----
0002 7EA9              MOV     R6,#0A9H
                                           ; SOURCE LINE # 42
0004         ?C0004:
                                           ; SOURCE LINE # 43
0004 DEFE              DJNZ    R6,?C0004
                                           ; SOURCE LINE # 44
0006 DFFC              DJNZ    R7,?C0004
                                           ; SOURCE LINE # 45
0008 22                RET     
             ; FUNCTION hw_delay_1ms (END)

             ; FUNCTION _hw_delay_ms (BEGIN)
                                           ; SOURCE LINE # 47
;---- Variable 'ms' assigned to Register 'R5' ----
0000 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 48
0002         ?C0007:
                                           ; SOURCE LINE # 49
0002 AF05              MOV     R7,AR5
0004 1D                DEC     R5
0005 EF                MOV     A,R7
0006 6005              JZ      ?C0009
0008 120000      R     LCALL   hw_delay_1ms
000B 80F5              SJMP    ?C0007
                                           ; SOURCE LINE # 50
000D         ?C0009:
000D 22                RET     
             ; FUNCTION _hw_delay_ms (END)

             ; FUNCTION hw_io_chs_init (BEGIN)
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 67
0000 E4                CLR     A
0001 F592              MOV     P1M0,A
                                           ; SOURCE LINE # 68
0003 F591              MOV     P1M1,A
                                           ; SOURCE LINE # 69
0005 F5B2              MOV     P3M0,A
                                           ; SOURCE LINE # 70
0007 F5B1              MOV     P3M1,A
                                           ; SOURCE LINE # 71
0009 F5CA              MOV     P5M0,A
                                           ; SOURCE LINE # 72
000B F5C9              MOV     P5M1,A
                                           ; SOURCE LINE # 74
000D 7590FF            MOV     P1,#0FFH
                                           ; SOURCE LINE # 75
0010 75B0FF            MOV     P3,#0FFH
                                           ; SOURCE LINE # 76
0013 75C8FF            MOV     P5,#0FFH
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 43  

                                           ; SOURCE LINE # 78
0016 C2CC              CLR     CH1
                                           ; SOURCE LINE # 79
0018 C297              CLR     CH2
                                           ; SOURCE LINE # 80
001A C290              CLR     CH3
                                           ; SOURCE LINE # 81
001C C2B7              CLR     CH4
                                           ; SOURCE LINE # 82
001E C2B6              CLR     CH5
                                           ; SOURCE LINE # 83
0020 C2B4              CLR     CH6
                                           ; SOURCE LINE # 84
0022 C2B3              CLR     CH7
                                           ; SOURCE LINE # 85
0024 C2B0              CLR     CH8
                                           ; SOURCE LINE # 88
0026 22                RET     
             ; FUNCTION hw_io_chs_init (END)

             ; FUNCTION hw_io_cho_init (BEGIN)
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 98
0000 75B280            MOV     P3M0,#080H
                                           ; SOURCE LINE # 102
0003 22                RET     
             ; FUNCTION hw_io_cho_init (END)

             ; FUNCTION hw_io_cho_clr (BEGIN)
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 110
0000 C2B7              CLR     P37
                                           ; SOURCE LINE # 114
0002 22                RET     
             ; FUNCTION hw_io_cho_clr (END)

             ; FUNCTION hw_io_cho_set (BEGIN)
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 122
0000 D2B7              SETB    P37
                                           ; SOURCE LINE # 126
0002 22                RET     
             ; FUNCTION hw_io_cho_set (END)

             ; FUNCTION hw_io_chi_init (BEGIN)
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 134
0000 D2B6              SETB    P36
                                           ; SOURCE LINE # 138
0002 22                RET     
             ; FUNCTION hw_io_chi_init (END)

             ; FUNCTION hw_io_chi_get (BEGIN)
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 145
0000 A2B6              MOV     C,P36
0002 E4                CLR     A
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 44  

0003 33                RLC     A
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 149
0005 22                RET     
             ; FUNCTION hw_io_chi_get (END)

             ; FUNCTION hw_io_chs_pushpull (BEGIN)
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
0000 C2CC              CLR     CH1
                                           ; SOURCE LINE # 154
0002 C297              CLR     CH2
                                           ; SOURCE LINE # 155
0004 C290              CLR     CH3
                                           ; SOURCE LINE # 156
0006 C2B7              CLR     CH4
                                           ; SOURCE LINE # 157
0008 C2B6              CLR     CH5
                                           ; SOURCE LINE # 158
000A C2B4              CLR     CH6
                                           ; SOURCE LINE # 160
000C C2B0              CLR     CH8
                                           ; SOURCE LINE # 168
000E C2B3              CLR     CH7
                                           ; SOURCE LINE # 170
0010 75CA10            MOV     P5M0,#010H
                                           ; SOURCE LINE # 171
0013 759281            MOV     P1M0,#081H
                                           ; SOURCE LINE # 172
0016 75B2DB            MOV     P3M0,#0DBH
                                           ; SOURCE LINE # 174
0019 22                RET     
             ; FUNCTION hw_io_chs_pushpull (END)

             ; FUNCTION _hw_uart_init (BEGIN)
                                           ; SOURCE LINE # 178
;---- Variable 'bps' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
0000 7598D0            MOV     SCON,#0D0H
                                           ; SOURCE LINE # 181
0003 438E01            ORL     AUXR,#01H
                                           ; SOURCE LINE # 182
0006 438E04            ORL     AUXR,#04H
                                           ; SOURCE LINE # 184
0009 EF                MOV     A,R7
000A FD                MOV     R5,A
000B 7C00              MOV     R4,#00H
000D 6401              XRL     A,#01H
000F 7008              JNZ     ?C0017
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 188
0011 75D7C8            MOV     T2L,#0C8H
                                           ; SOURCE LINE # 189
0014 75D6FE            MOV     T2H,#0FEH
                                           ; SOURCE LINE # 190
0017 8011              SJMP    ?C0018
0019         ?C0017:
                                           ; SOURCE LINE # 191
0019 ED                MOV     A,R5
001A 6402              XRL     A,#02H
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 45  

001C 4C                ORL     A,R4
001D 7005              JNZ     ?C0019
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 195
001F 75D7E6            MOV     T2L,#0E6H
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
0022 8003              SJMP    ?C0110
0024         ?C0019:
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 202
0024 75D7E2            MOV     T2L,#0E2H
                                           ; SOURCE LINE # 203
0027         ?C0110:
0027 75D6FF            MOV     T2H,#0FFH
                                           ; SOURCE LINE # 204
002A         ?C0018:
                                           ; SOURCE LINE # 206
002A D2B1              SETB    CHx
                                           ; SOURCE LINE # 207
002C 438E10            ORL     AUXR,#010H
                                           ; SOURCE LINE # 208
002F 22                RET     
             ; FUNCTION _hw_uart_init (END)

             ; FUNCTION _UART_pushByte (BEGIN)
                                           ; SOURCE LINE # 210
;---- Variable 'c' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
0000 309902            JNB     TI,?C0022
0003 C299              CLR     TI
0005         ?C0022:
                                           ; SOURCE LINE # 213
0005 EF                MOV     A,R7
                                           ; SOURCE LINE # 214
0006 A2D0              MOV     C,P
0008 929B              MOV     TB8,C
                                           ; SOURCE LINE # 215
000A F599              MOV     SBUF,A
                                           ; SOURCE LINE # 216
000C 22                RET     
             ; FUNCTION _UART_pushByte (END)

             ; FUNCTION _hw_uart_puts (BEGIN)
                                           ; SOURCE LINE # 218
0000 8B00        R     MOV     str,R3
0002 8A00        R     MOV     str+01H,R2
0004 8900        R     MOV     str+02H,R1
                                           ; SOURCE LINE # 219
0006         ?C0024:
                                           ; SOURCE LINE # 220
0006 AB00        R     MOV     R3,str
0008 AA00        R     MOV     R2,str+01H
000A A900        R     MOV     R1,str+02H
000C 120000      E     LCALL   ?C?CLDPTR
000F 6016              JZ      ?C0025
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
0011 0500        R     INC     str+02H
0013 E500        R     MOV     A,str+02H
0015 7002              JNZ     ?C0108
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 46  

0017 0500        R     INC     str+01H
0019         ?C0108:
0019 14                DEC     A
001A F9                MOV     R1,A
001B 120000      E     LCALL   ?C?CLDPTR
001E FF                MOV     R7,A
001F 120000      R     LCALL   _UART_pushByte
0022         ?C0026:
                                           ; SOURCE LINE # 223
0022 2099E1            JB      TI,?C0024
0025 80FB              SJMP    ?C0026
                                           ; SOURCE LINE # 224
0027         ?C0025:
                                           ; SOURCE LINE # 225
0027 7F0D              MOV     R7,#0DH
0029 120000      R     LCALL   _UART_pushByte
002C         ?C0028:
                                           ; SOURCE LINE # 226
002C 3099FD            JNB     TI,?C0028
                                           ; SOURCE LINE # 227
002F 7F0A              MOV     R7,#0AH
0031 120000      R     LCALL   _UART_pushByte
0034         ?C0030:
                                           ; SOURCE LINE # 228
0034 3099FD            JNB     TI,?C0030
                                           ; SOURCE LINE # 229
0037 22                RET     
             ; FUNCTION _hw_uart_puts (END)

             ; FUNCTION hw_adc_init (BEGIN)
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 238
0000 439102            ORL     P1M1,#02H
                                           ; SOURCE LINE # 255
0003 90FEA8            MOV     DPTR,#0FEA8H
0006 743F              MOV     A,#03FH
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
0009 75BC80            MOV     ADC_CONTR,#080H
                                           ; SOURCE LINE # 257
000C 7F02              MOV     R7,#02H
000E 120000      R     LCALL   _hw_delay_ms
                                           ; SOURCE LINE # 259
0011 75BCCF            MOV     ADC_CONTR,#0CFH
0014         ?C0033:
                                           ; SOURCE LINE # 260
0014 E5BC              MOV     A,ADC_CONTR
0016 30E5FB            JNB     ACC.5,?C0033
                                           ; SOURCE LINE # 262
0019 22                RET     
             ; FUNCTION hw_adc_init (END)

             ; FUNCTION _hw_adc_open (BEGIN)
                                           ; SOURCE LINE # 264
;---- Variable 'i' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 282
0000 EF                MOV     A,R7
0001 30E004            JNB     ACC.0,?C0036
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 285
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 47  

0004 75BCC1            MOV     ADC_CONTR,#0C1H
                                           ; SOURCE LINE # 289
0007 22                RET     
0008         ?C0036:
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 292
0008 75BCCF            MOV     ADC_CONTR,#0CFH
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 295
000B         ?C0038:
000B 22                RET     
             ; FUNCTION _hw_adc_open (END)

             ; FUNCTION hw_adc_read (BEGIN)
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 308
0000 AFBD              MOV     R7,ADC_RES
0002 EF                MOV     A,R7
0003 75F004            MOV     B,#04H
0006 A4                MUL     AB
0007 FF                MOV     R7,A
0008 AEF0              MOV     R6,B
000A E5BE              MOV     A,ADC_RESL
000C C4                SWAP    A
000D 13                RRC     A
000E 13                RRC     A
000F 5403              ANL     A,#03H
0011 FD                MOV     R5,A
0012 EF                MOV     A,R7
0013 4D                ORL     A,R5
0014 FF                MOV     R7,A
;---- Variable 'adc' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
0015 22                RET     
             ; FUNCTION hw_adc_read (END)

             ; FUNCTION hw_tick_init (BEGIN)
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 331
0000 7800        R     MOV     R0,#LOW _sys_ms
0002 120000      E     LCALL   ?C?LSTKIDATA
0005 00                DB      00H
0006 00                DB      00H
0007 00                DB      00H
0008 00                DB      00H
                                           ; SOURCE LINE # 332
0009 E4                CLR     A
000A 7800        R     MOV     R0,#LOW _sys_us_target
000C F6                MOV     @R0,A
000D 08                INC     R0
000E F6                MOV     @R0,A
                                           ; SOURCE LINE # 334
000F 53890F            ANL     TMOD,#0FH
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 336
0012 538EBF            ANL     AUXR,#0BFH
                                           ; SOURCE LINE # 337
0015 75A808            MOV     IE,#08H
                                           ; SOURCE LINE # 338
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 48  

0018 758DFC            MOV     TH1,#0FCH
                                           ; SOURCE LINE # 339
001B 758B18            MOV     TL1,#018H
                                           ; SOURCE LINE # 342
001E 22                RET     
             ; FUNCTION hw_tick_init (END)

             ; FUNCTION micros (BEGIN)
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 381
0000 C2AB              CLR     ET1
                                           ; SOURCE LINE # 382
0002 7800        R     MOV     R0,#LOW _sys_us_target
0004 E6                MOV     A,@R0
0005 FE                MOV     R6,A
0006 08                INC     R0
0007 E6                MOV     A,@R0
;---- Variable 'Tus' assigned to Register 'R4/R5' ----
0008 FD                MOV     R5,A
0009 AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 383
;---- Variable 'H0' assigned to Register 'R7' ----
000B AF8D              MOV     R7,TH1
                                           ; SOURCE LINE # 384
;---- Variable 'L' assigned to Register 'R3' ----
000D AB8B              MOV     R3,TL1
                                           ; SOURCE LINE # 385
;---- Variable 'H1' assigned to Register 'R6' ----
000F AE8D              MOV     R6,TH1
                                           ; SOURCE LINE # 386
0011 D2AB              SETB    ET1
                                           ; SOURCE LINE # 388
0013 EE                MOV     A,R6
0014 6F                XRL     A,R7
0015 6002              JZ      ?C0041
0017 E4                CLR     A
0018 FB                MOV     R3,A
0019         ?C0041:
                                           ; SOURCE LINE # 389
0019 AF06              MOV     R7,AR6
001B EF                MOV     A,R7
001C FE                MOV     R6,A
001D EB                MOV     A,R3
001E 24E8              ADD     A,#0E8H
0020 FF                MOV     R7,A
0021 EE                MOV     A,R6
0022 3403              ADDC    A,#03H
0024 FE                MOV     R6,A
;---- Variable 'T16' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 391
0025 ED                MOV     A,R5
0026 2F                ADD     A,R7
0027 FF                MOV     R7,A
0028 EC                MOV     A,R4
0029 3E                ADDC    A,R6
002A FE                MOV     R6,A
                                           ; SOURCE LINE # 394
002B 22                RET     
             ; FUNCTION micros (END)

             ; FUNCTION _delay (BEGIN)
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 49  

                                           ; SOURCE LINE # 398
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 AD07              MOV     R5,AR7
0002 AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 399
0004         ?C0043:
                                           ; SOURCE LINE # 401
0004 ED                MOV     A,R5
0005 1D                DEC     R5
0006 AE04              MOV     R6,AR4
0008 7001              JNZ     ?C0109
000A 1C                DEC     R4
000B         ?C0109:
000B 4E                ORL     A,R6
000C 6005              JZ      ?C0045
                                           ; SOURCE LINE # 402
000E 120000      R     LCALL   hw_delay_1ms
0011 80F1              SJMP    ?C0043
                                           ; SOURCE LINE # 406
0013         ?C0045:
0013 22                RET     
             ; FUNCTION _delay (END)

             ; FUNCTION hw_output_init (BEGIN)
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 424
0000 75B802            MOV     IP,#02H
                                           ; SOURCE LINE # 426
0003 5389F0            ANL     TMOD,#0F0H
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
0006 D2A9              SETB    ET0
                                           ; SOURCE LINE # 458
0008 90FEFD            MOV     DPTR,#0FEFDH
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 459
000D 90FEE1            MOV     DPTR,#0FEE1H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
0011 90FEE0            MOV     DPTR,#0FEE0H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
0015 90FEEC            MOV     DPTR,#0FEECH
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
0019 A3                INC     DPTR
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
001B 90FEE8            MOV     DPTR,#0FEE8H
001E 7468              MOV     A,#068H
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 464
0021 A3                INC     DPTR
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
0023 A3                INC     DPTR
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 466
0025 A3                INC     DPTR
0026 F0                MOVX    @DPTR,A
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 50  

                                           ; SOURCE LINE # 467
0027 A3                INC     DPTR
0028 7411              MOV     A,#011H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 468
002B A3                INC     DPTR
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
002D 90FEF5            MOV     DPTR,#0FEF5H
0030 E4                CLR     A
0031 F0                MOVX    @DPTR,A
0032 A3                INC     DPTR
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
0034 A3                INC     DPTR
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 471
0038 A3                INC     DPTR
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
003C A3                INC     DPTR
003D F0                MOVX    @DPTR,A
003E A3                INC     DPTR
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
0040 90FEF2            MOV     DPTR,#0FEF2H
0043 F0                MOVX    @DPTR,A
0044 A3                INC     DPTR
0045 74FE              MOV     A,#0FEH
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 476
0048 90FEF0            MOV     DPTR,#0FEF0H
004B E4                CLR     A
004C F0                MOVX    @DPTR,A
004D A3                INC     DPTR
004E 742E              MOV     A,#02EH
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
0051 90FEB6            MOV     DPTR,#0FEB6H
0054 7455              MOV     A,#055H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
0057 90FEFE            MOV     DPTR,#0FEFEH
005A E4                CLR     A
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 479
005C 90FEF4            MOV     DPTR,#0FEF4H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 480
0060 90FEB5            MOV     DPTR,#0FEB5H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
0064 90FEFD            MOV     DPTR,#0FEFDH
0067 7480              MOV     A,#080H
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 482
006A 90FEE7            MOV     DPTR,#0FEE7H
006D 7401              MOV     A,#01H
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 51  

006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
0070 90FEE0            MOV     DPTR,#0FEE0H
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 488
0074 22                RET     
             ; FUNCTION hw_output_init (END)

             ; FUNCTION _hw_pwm_en (BEGIN)
                                           ; SOURCE LINE # 506
;---- Variable 'ch' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 508
0000 EF                MOV     A,R7
0001 FD                MOV     R5,A
0002 7C00              MOV     R4,#00H
0004 7008              JNZ     ?C0047
0006 90FEB5            MOV     DPTR,#0FEB5H
0009 E0                MOVX    A,@DPTR
000A 4404              ORL     A,#04H
000C F0                MOVX    @DPTR,A
000D 22                RET     
000E         ?C0047:
                                           ; SOURCE LINE # 509
000E ED                MOV     A,R5
000F 6401              XRL     A,#01H
0011 4C                ORL     A,R4
0012 7008              JNZ     ?C0049
0014 90FEB5            MOV     DPTR,#0FEB5H
0017 E0                MOVX    A,@DPTR
0018 4401              ORL     A,#01H
001A F0                MOVX    @DPTR,A
001B 22                RET     
001C         ?C0049:
                                           ; SOURCE LINE # 510
001C EF                MOV     A,R7
001D FD                MOV     R5,A
001E 7C00              MOV     R4,#00H
0020 6405              XRL     A,#05H
0022 7008              JNZ     ?C0051
0024 90FEB5            MOV     DPTR,#0FEB5H
0027 E0                MOVX    A,@DPTR
0028 4440              ORL     A,#040H
002A F0                MOVX    @DPTR,A
002B 22                RET     
002C         ?C0051:
                                           ; SOURCE LINE # 511
002C ED                MOV     A,R5
002D 6406              XRL     A,#06H
002F 4C                ORL     A,R4
0030 7007              JNZ     ?C0054
0032 90FEB5            MOV     DPTR,#0FEB5H
0035 E0                MOVX    A,@DPTR
0036 4410              ORL     A,#010H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
0039         ?C0054:
0039 22                RET     
             ; FUNCTION _hw_pwm_en (END)

             ; FUNCTION _hw_pwm_dis (BEGIN)
                                           ; SOURCE LINE # 514
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 52  

;---- Variable 'ch' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 516
0000 EF                MOV     A,R7
0001 FD                MOV     R5,A
0002 7C00              MOV     R4,#00H
0004 7008              JNZ     ?C0055
0006 90FEB5            MOV     DPTR,#0FEB5H
0009 E0                MOVX    A,@DPTR
000A 54FB              ANL     A,#0FBH
000C F0                MOVX    @DPTR,A
000D 22                RET     
000E         ?C0055:
                                           ; SOURCE LINE # 517
000E ED                MOV     A,R5
000F 6401              XRL     A,#01H
0011 4C                ORL     A,R4
0012 7008              JNZ     ?C0057
0014 90FEB5            MOV     DPTR,#0FEB5H
0017 E0                MOVX    A,@DPTR
0018 54FE              ANL     A,#0FEH
001A F0                MOVX    @DPTR,A
001B 22                RET     
001C         ?C0057:
                                           ; SOURCE LINE # 518
001C EF                MOV     A,R7
001D FD                MOV     R5,A
001E 7C00              MOV     R4,#00H
0020 6405              XRL     A,#05H
0022 7008              JNZ     ?C0059
0024 90FEB5            MOV     DPTR,#0FEB5H
0027 E0                MOVX    A,@DPTR
0028 54BF              ANL     A,#0BFH
002A F0                MOVX    @DPTR,A
002B 22                RET     
002C         ?C0059:
                                           ; SOURCE LINE # 519
002C ED                MOV     A,R5
002D 6406              XRL     A,#06H
002F 4C                ORL     A,R4
0030 7007              JNZ     ?C0062
0032 90FEB5            MOV     DPTR,#0FEB5H
0035 E0                MOVX    A,@DPTR
0036 54EF              ANL     A,#0EFH
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
0039         ?C0062:
0039 22                RET     
             ; FUNCTION _hw_pwm_dis (END)

             ; FUNCTION _hw_pwm_set (BEGIN)
                                           ; SOURCE LINE # 528
;---- Variable 'pwm' assigned to Register 'R5' ----
;---- Variable 'ch' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 571
0000 EF                MOV     A,R7
0001 FB                MOV     R3,A
0002 7A00              MOV     R2,#00H
0004 7016              JNZ     ?C0063
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 573
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 53  

0006 ED                MOV     A,R5
0007 C3                CLR     C
0008 9419              SUBB    A,#019H
000A 7480              MOV     A,#080H
000C 9480              SUBB    A,#080H
000E 4007              JC      ?C0064
0010 ED                MOV     A,R5
0011 FF                MOV     R7,A
0012 90FEF7            MOV     DPTR,#0FEF7H
0015 8054              SJMP    ?C0115
0017         ?C0064:
                                           ; SOURCE LINE # 574
0017 90FEF7            MOV     DPTR,#0FEF7H
                                           ; SOURCE LINE # 575
001A 8058              SJMP    ?C0116
001C         ?C0063:
                                           ; SOURCE LINE # 576
001C EB                MOV     A,R3
001D 6401              XRL     A,#01H
001F 4A                ORL     A,R2
0020 7016              JNZ     ?C0067
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 578
0022 ED                MOV     A,R5
0023 C3                CLR     C
0024 9419              SUBB    A,#019H
0026 7480              MOV     A,#080H
0028 9480              SUBB    A,#080H
002A 4007              JC      ?C0068
002C ED                MOV     A,R5
002D FF                MOV     R7,A
002E 90FEF5            MOV     DPTR,#0FEF5H
0031         ?C0111:
0031 8038              SJMP    ?C0115
0033         ?C0068:
                                           ; SOURCE LINE # 579
0033 90FEF5            MOV     DPTR,#0FEF5H
0036         ?C0112:
                                           ; SOURCE LINE # 580
0036 803C              SJMP    ?C0116
0038         ?C0067:
                                           ; SOURCE LINE # 581
0038 EF                MOV     A,R7
0039 FB                MOV     R3,A
003A 7A00              MOV     R2,#00H
003C 6405              XRL     A,#05H
003E 7016              JNZ     ?C0071
                                           ; SOURCE LINE # 582
                                           ; SOURCE LINE # 583
0040 ED                MOV     A,R5
0041 C3                CLR     C
0042 9419              SUBB    A,#019H
0044 7480              MOV     A,#080H
0046 9480              SUBB    A,#080H
0048 4007              JC      ?C0072
004A ED                MOV     A,R5
004B FF                MOV     R7,A
004C 90FEFB            MOV     DPTR,#0FEFBH
004F         ?C0113:
004F 801A              SJMP    ?C0115
0051         ?C0072:
                                           ; SOURCE LINE # 584
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 54  

0051 90FEFB            MOV     DPTR,#0FEFBH
0054         ?C0114:
                                           ; SOURCE LINE # 585
0054 801E              SJMP    ?C0116
0056         ?C0071:
                                           ; SOURCE LINE # 586
0056 EB                MOV     A,R3
0057 6406              XRL     A,#06H
0059 4A                ORL     A,R2
005A 701C              JNZ     ?C0078
                                           ; SOURCE LINE # 587
                                           ; SOURCE LINE # 588
005C ED                MOV     A,R5
005D C3                CLR     C
005E 9419              SUBB    A,#019H
0060 7480              MOV     A,#080H
0062 9480              SUBB    A,#080H
0064 400B              JC      ?C0076
0066 ED                MOV     A,R5
0067 FF                MOV     R7,A
0068 90FEF9            MOV     DPTR,#0FEF9H
006B         ?C0115:
006B E4                CLR     A
006C F0                MOVX    @DPTR,A
006D A3                INC     DPTR
006E EF                MOV     A,R7
006F F0                MOVX    @DPTR,A
0070 22                RET     
0071         ?C0076:
                                           ; SOURCE LINE # 589
0071 90FEF9            MOV     DPTR,#0FEF9H
0074         ?C0116:
0074 E4                CLR     A
0075 F0                MOVX    @DPTR,A
0076 A3                INC     DPTR
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 595
0078         ?C0078:
0078 22                RET     
             ; FUNCTION _hw_pwm_set (END)

             ; FUNCTION LED_on (BEGIN)
                                           ; SOURCE LINE # 600
                                           ; SOURCE LINE # 601
                                           ; SOURCE LINE # 602
0000 D292              SETB    LED
                                           ; SOURCE LINE # 603
0002 22                RET     
             ; FUNCTION LED_on (END)

             ; FUNCTION LED_off (BEGIN)
                                           ; SOURCE LINE # 605
                                           ; SOURCE LINE # 606
                                           ; SOURCE LINE # 607
0000 C292              CLR     LED
                                           ; SOURCE LINE # 608
0002 22                RET     
             ; FUNCTION LED_off (END)

             ; FUNCTION SPI_init_0 (BEGIN)
                                           ; SOURCE LINE # 612
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 55  

                                           ; SOURCE LINE # 613
                                           ; SOURCE LINE # 616
0000 22                RET     
             ; FUNCTION SPI_init_0 (END)

             ; FUNCTION SPI_init_1 (BEGIN)
                                           ; SOURCE LINE # 618
                                           ; SOURCE LINE # 619
                                           ; SOURCE LINE # 621
0000 D2B5              SETB    CSN
                                           ; SOURCE LINE # 622
0002 C295              CLR     SCK
                                           ; SOURCE LINE # 623
0004 C293              CLR     MOSI
                                           ; SOURCE LINE # 624
0006 22                RET     
             ; FUNCTION SPI_init_1 (END)

             ; FUNCTION _EEPROM_read (BEGIN)
                                           ; SOURCE LINE # 628
;---- Variable 'addr' assigned to Register 'R4/R5' ----
0000 AD07              MOV     R5,AR7
0002 AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 630
0004 75C501            MOV     IAP_CMD,#01H
                                           ; SOURCE LINE # 632
0007 8CC3              MOV     IAP_ADDRH,R4
                                           ; SOURCE LINE # 633
0009 8DC4              MOV     IAP_ADDRL,R5
                                           ; SOURCE LINE # 635
000B 75C65A            MOV     IAP_TRIG,#05AH
                                           ; SOURCE LINE # 636
000E 75C6A5            MOV     IAP_TRIG,#0A5H
                                           ; SOURCE LINE # 637
0011 00                NOP     
                                           ; SOURCE LINE # 639
0012 AFC2              MOV     R7,IAP_DATA
                                           ; SOURCE LINE # 640
0014 22                RET     
             ; FUNCTION _EEPROM_read (END)

             ; FUNCTION _EEPROM_write (BEGIN)
                                           ; SOURCE LINE # 642
;---- Variable 'addr' assigned to Register 'R2/R3' ----
0000 AB07              MOV     R3,AR7
0002 AA06              MOV     R2,AR6
;---- Variable 'byte' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 643
                                           ; SOURCE LINE # 644
0004 75C502            MOV     IAP_CMD,#02H
                                           ; SOURCE LINE # 645
0007 8DC2              MOV     IAP_DATA,R5
                                           ; SOURCE LINE # 647
0009 8AC3              MOV     IAP_ADDRH,R2
                                           ; SOURCE LINE # 648
000B 8BC4              MOV     IAP_ADDRL,R3
                                           ; SOURCE LINE # 650
000D 75C65A            MOV     IAP_TRIG,#05AH
                                           ; SOURCE LINE # 651
0010 75C6A5            MOV     IAP_TRIG,#0A5H
                                           ; SOURCE LINE # 652
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 56  

0013 00                NOP     
                                           ; SOURCE LINE # 653
0014 22                RET     
             ; FUNCTION _EEPROM_write (END)

             ; FUNCTION _EEPROM_cleanPage (BEGIN)
                                           ; SOURCE LINE # 655
;---- Variable 'addrPage' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 656
                                           ; SOURCE LINE # 657
0000 75C503            MOV     IAP_CMD,#03H
                                           ; SOURCE LINE # 659
0003 EF                MOV     A,R7
0004 25E0              ADD     A,ACC
0006 F5C3              MOV     IAP_ADDRH,A
                                           ; SOURCE LINE # 660
0008 E4                CLR     A
0009 F5C4              MOV     IAP_ADDRL,A
                                           ; SOURCE LINE # 662
000B 75C65A            MOV     IAP_TRIG,#05AH
                                           ; SOURCE LINE # 663
000E 75C6A5            MOV     IAP_TRIG,#0A5H
                                           ; SOURCE LINE # 664
0011 00                NOP     
                                           ; SOURCE LINE # 665
0012 22                RET     
             ; FUNCTION _EEPROM_cleanPage (END)

             ; FUNCTION hw_sys_init (BEGIN)
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 672
0000 E4                CLR     A
0001 F5A8              MOV     IE,A
                                           ; SOURCE LINE # 673
0003 F5AF              MOV     IE2,A
                                           ; SOURCE LINE # 675
0005 43BA80            ORL     P_SW2,#080H
                                           ; SOURCE LINE # 679
0008 120000      R     LCALL   hw_io_chs_init
                                           ; SOURCE LINE # 681
000B 7FC8              MOV     R7,#0C8H
000D 120000      R     LCALL   _hw_delay_ms
                                           ; SOURCE LINE # 682
0010 7FC8              MOV     R7,#0C8H
0012 120000      R     LCALL   _hw_delay_ms
                                           ; SOURCE LINE # 684
0015 E4                CLR     A
0016 FF                MOV     R7,A
0017 120000      R     LCALL   _hw_uart_init
                                           ; SOURCE LINE # 686
001A 120000      R     LCALL   hw_adc_init
                                           ; SOURCE LINE # 688
001D 120000      R     LCALL   hw_tick_init
                                           ; SOURCE LINE # 690
0020 120000      R     LCALL   hw_output_init
                                           ; SOURCE LINE # 693
0023 D28E              SETB    TR1
                                           ; SOURCE LINE # 694
0025 D2AF              SETB    EA
                                           ; SOURCE LINE # 695
0027 22                RET     
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 57  

             ; FUNCTION hw_sys_init (END)

C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 58  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_hw_adc_open . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
P1M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0092H  1
P1M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
hw_adc_init. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
P3M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
_sys_ms. . . . . . . . . . . . . . . .  PUBLIC   IDATA  U_LONG   0000H  4
P3M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B1H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P5M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
CHx. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
P5M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C9H  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
hw_tick_init . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
P5 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
P6 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
P7 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
hw_output_init . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
P_SW2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
IAP_CMD. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C5H  1
micros . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  H0 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  H1 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  L. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  T16. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  Tus. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
_delay . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
SPI_init_0 . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
LED_on . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_hw_delay_ms . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ms . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
ADC_RES. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BDH  1
SPI_init_1 . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_hw_uart_init. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  bps. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
hw_io_chs_pushpull . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
IAP_ADDRH. . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C3H  1
IAP_ADDRL. . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C4H  1
_hw_uart_puts. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  str. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
_EEPROM_cleanPage. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addrPage . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
ADC_CONTR. . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
SBUF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
_hw_pwm_dis. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 59  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


hw_sys_init. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
MOSI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
P36. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
P37. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
CH1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
CH2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
CH3. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
CH4. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
CH5. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
IE2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AFH  1
CH6. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
AUXR . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
CH7. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
CH8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
_hw_pwm_set. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  pwm. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
hw_delay_1ms . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  j. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
hw_io_chi_init . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ACC. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
_EEPROM_read . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
_hw_pwm_en . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
hw_io_cho_init . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
T2H. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D6H  1
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
hw_io_chs_init . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
hw_io_chi_get. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TL1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
T2L. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D7H  1
LED. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
IAP_DATA . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C2H  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
hw_io_cho_clr. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_EEPROM_write. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
  byte . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
ADC_RESL . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
SCK. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
hw_io_cho_set. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CSN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
hw_adc_read. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  adc. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
LED_off. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
IAP_TRIG . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C6H  1
_sys_us_target . . . . . . . . . . . .  PUBLIC   IDATA  U_INT    0004H  2
_UART_pushByte . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  c. . . . . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0007H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1


C51 COMPILER V9.59.0.0   LOLI3_RECV_SYS_STC                                                05/21/2024 12:45:55 PAGE 60  

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    848    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =      6    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
